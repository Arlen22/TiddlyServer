{
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "GroupHashmap": {
      "type": "object",
      "description": "A shorthand form of group specified without any options",
      "patternProperties": {
        "^[^$]+$": {
          "$ref": "#/definitions/GroupChildren"
        }
      },
      "additionalProperties": false
    },
    "GroupChildren": {
      "oneOf": [
        {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/definitions/GroupArrayItem"
              },
              {
                "$ref": "#/definitions/FolderArrayItem"
              },
              {
                "$ref": "#/definitions/FolderPathShorthand"
              }
            ]
          }
        },
        {
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "$ref": "#/definitions/GroupRecordItem"
              },
              {
                "$ref": "#/definitions/FolderRecordItem"
              },
              {
                "$ref": "#/definitions/FolderPathShorthand"
              },
              {
                "$ref": "#/definitions/GroupHashmap"
              }
            ]
          }
        }
      ]
    },
    "GroupRecordItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^key$": {
          "type": "string"
        }
      },
      "properties": {
        "$element": {
          "enum": [
            "group"
          ]
        },
        "indexPath": {
          "type": "string"
        },
        "$children": { "$ref": "#/definitions/GroupChildren" }
      },
      "required": [
        "$children",
        "$element"
      ],
      "description": "The GroupElement children may be either a hashmap of Group and Path elements, with an $options property for the Option elements array, OR an Array of Group, Path, and Option elements. A string is shorthand for a Path element. A hashmap is a shorthand for the array with a key property specified on each element, and a string is shorthand for a folder element."
    },
    "FolderRecordItem": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^key$": {
          "type": "string"
        }
      },
      "properties": {
        "$element": {
          "enum": [
            "folder"
          ]
        },
        "path": {
          "type": "string"
        },
        "$children": {
          "type": "array"
        }
      },
      "required": [
        "$element",
        "path"
      ],
      "description": "The GroupElement children may be either a hashmap of Group and Path elements, with an $options property for the Option elements array, OR an Array of Group, Path, and Option elements. A string is shorthand for a Path element. A hashmap is a shorthand for the array with a key property specified on each element, and a string is shorthand for a folder element."
    },
    "GroupArrayItem": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericArrayItem"
        },
        {
          "$ref": "#/definitions/GroupRecordItem"
        }
      ]
    },
    "FolderArrayItem": {
      "allOf": [
        {
          "$ref": "#/definitions/GenericArrayItem"
        },
        {
          "$ref": "#/definitions/FolderRecordItem"
        }
      ]
    },
    "GenericArrayItem": {
      "properties": {
        "key": {
          "type": "string",
          "description": "The mount name that will show in the URL"
        }
      },
      "required": [
        "key"
      ]
    },
    "FolderPathShorthand": {
      "type": "string",
      "description": "The path of a folder to mount without any extra options. The folder name will be used for the url name."
    },
    "ServerConfigSchema": {
      "type": "object",
      "properties": {
        "_devmode": {
          "type": "boolean",
          "description": "enables certain expensive per-request checks"
        },
        "_datafoldertarget": {
          "type": "string",
          "description": "The tiddlywiki folder to use for data folder instances. Defaults to the \ntiddlywiki folder in the TiddlyServer installation regardless of the \nsettings.json location."
        },
        "tree": {
          "allOf": [
            {
              "$ref": "#/definitions/GroupRecordItem"
            },
            {
              "description": "The tree property accepts one of 3 formats. If it is a string ending in `.xml`, `.js`, or `.json`, \nthe tree will be loaded from the specified path. JS and JSON files must export a `tree` property \nand XML files must specify a `tree` element as root.\n\n- A path element (or a string specifying the path) to mount a path as root (a single file is possible but pointless)\n- A group element or the children of a group element (which is either an array, or an object with no $element property)"
            }
          ]
        },
        "bindInfo": {
          "type": "object",
          "properties": {
            "bindAddress": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of IP addresses to accept requests on. Can be any IP address\nassigned to the machine. Default is \"127.0.0.1\".\n\nIf `bindWildcard` is true, each connection is checked individually. Otherwise, the server listens\non the specified IP addresses and accepts all connections from the operating system. If an IP address\ncannot be bound, the server skips it unless `--bindAddressRequired` is specified\n\nIf `filterBindAddress` is true, IPv4 addresses may include a subnet mask,\n(e.g. `/24`) which matches any interface IP address in that range. Prefix with a minus sign (-) \nto block requests incoming to that IP address or range."
            },
            "filterBindAddress": {
              "type": "boolean",
              "description": "IPv4 addresses may include a subnet mask,\n(e.g. `/24`) which matches any IP address in that range. Prefix with a minus sign (-) \nto block requests incoming to that IP address or range."
            },
            "bindWildcard": {
              "type": "boolean",
              "enum": [
                true,
                false
              ],
              "description": "Bind to the wildcard addresses `0.0.0.0` and `::` (if enabled) in that order.\nThe default is `true`. In many cases this is preferred, however \nAndroid does not support this for some reason. On Android, set this to\n`false` and set host to `[\"0.0.0.0/0\"]` to bind to all IPv4 addresses."
            },
            "enableIPv6": {
              "type": "boolean",
              "description": "Bind to the IPv6 wildcard as well if `bindWilcard` is true and allow requests\nincoming to IPv6 addresses if not explicitly denied."
            },
            "port": {
              "type": "number",
              "description": "port to listen on, default is 8080 for http and 8443 for https"
            },
            "localAddressPermissions": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ServerConfig_AccessOptions"
              },
              "description": "Permissions based on local address: \"localhost\", \"*\" (all others), \"192.168.0.0/16\", etc. \nThis checks the IP address each client connects to (socket.localAddress), \nnot the bind address of the server instance that accepted the request."
            },
            "_bindLocalhost": {
              "type": "boolean",
              "description": "always bind a separate server instance to 127.0.0.1 regardless of any other settings"
            },
            "https": {
              "type": "string",
              "description": "https-only options: a string to a JavaScript file which exports a function of type\n`(iface:string) => https.ServerOptions`. Note that the initServer function will \nchange this to a boolean value indicating whether https is in use once inside TiddlyServer."
            }
          },
          "additionalProperties": false,
          "description": "bind address and port info"
        },
        "logging": {
          "type": "object",
          "properties": {
            "logAccess": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                }
              ],
              "description": "access log file"
            },
            "logError": {
              "type": "string",
              "description": "error log file"
            },
            "logColorsToFile": {
              "type": "boolean",
              "description": "write the console color markers to file, useful if you read the logs by printing them to a terminal"
            },
            "logToConsoleAlso": {
              "type": "boolean",
              "description": "print access and error events to the console regardless of whether they are logged to a file"
            },
            "debugLevel": {
              "type": "number",
              "description": "4 - Errors that require the process to exit for restart\n3 - Major errors that are handled and do not require a server restart\n2 - Warnings or errors that do not alter the program flow but need to be marked (minimum for status 500)\n1 - Info - Most startup messages\n0 - Normal debug messages and all software and request-side error messages\n-1 - Detailed debug messages from high level apis\n-2 - Response status messages and error response data\n-3 - Request and response data for all messages (verbose)\n-4 - Protocol details and full data dump (such as encryption steps and keys)"
            }
          },
          "additionalProperties": false,
          "description": "logging"
        },
        "directoryIndex": {
          "type": "object",
          "properties": {
            "mixFolders": {
              "type": "boolean",
              "description": "sort folder and files together rather than separated"
            },
            "defaultType": {
              "type": "string",
              "enum": [
                "html",
                "json"
              ],
              "description": "default format for the directory index"
            },
            "icons": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "description": "Hashmap of type { \"icon_name\": [\"ext\", \"ext\"]} where ext represents the extensions to use this icon for. \nIcons are in the TiddlyServer/assets/icons folder."
            },
            "types": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "description": "directory index options"
        },
        "putsaver": {
          "type": "object",
          "properties": {
            "backupDirectory": {
              "type": "string",
              "description": "backup directory for saving SINGLE-FILE wikis only"
            },
            "etag": {
              "type": "string",
              "enum": [
                "required",
                "disabled",
                ""
              ],
              "description": "Whether to use the etag field -- if not specified then it will check it if presented.\nThis does not affect the backup etagAge option, as the saving mechanism will still \nsend etags back to the browser, regardless of this option."
            },
            "etagWindow": {
              "type": "number",
              "description": "etag does not need to be exact by this many seconds"
            }
          },
          "additionalProperties": false,
          "description": "tiddlyserver specific options"
        },
        "authAccounts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/ServerConfig_AuthAccountsValue"
          },
          "description": "The Hashmap of accounts which may authenticate on this server.\nTakes either an object or a string to a `require`-able file (such as .js or .json) \nwhich exports the object"
        },
        "EXPERIMENTAL_clientside_datafolders": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "temporarily disable clientside datafolders (does NOT disable the `tiddlywiki` folder)"
            },
            "maxAge_tw_plugins": {
              "type": "number",
              "description": "how long to cache tw_plugins on the server side"
            },
            "alwaysRefreshCache": {
              "type": "boolean",
              "description": "refresh cache whenever ?refresh=true is called"
            }
          },
          "additionalProperties": false,
          "description": "client-side data folder loader which loads datafolders directly into the browser"
        },
        "authCookieAge": {
          "type": "number",
          "description": "Age to set for the auth cookie (default is 30 days)\n- 24 hours: `86400`\n- 7 days: `604800`\n- 30 days: `2592000`\n- 60 days: `5184000`\n- 90 days: `7776000`\n- 120 days: `10368000`\n- 150 days: `12950000`\n- 180 days: `15552000`"
        },
        "maxTransferRequests": {
          "type": "number",
          "description": "Max concurrent transfer requests"
        },
        "$schema": {
          "type": "string",
          "description": "The JSON schema location for this document. This schema is generated \ndirectly from the TypeScript interfaces\nused in TiddlyServer. A text-editor with autocomplete, such as VS code, \nwill make editing this file much simpler. \nMost fields include a description like this one. \n\nAll relative paths in this file are resolved relative to this file, so \n`./settings-tree.xml` refers to an XML file in the same folder as this file. \nAll relative paths in included files (such as the XML file) are resolved \nrelative to the included file."
        }
      },
      "required": [
        "tree",
        "$schema"
      ],
      "additionalProperties": false
    },
    "ServerConfig_AccessOptions": {
      "type": "object",
      "properties": {
        "writeErrors": {
          "type": "boolean"
        },
        "upload": {
          "type": "boolean",
          "description": "allow uploads on the directory index page"
        },
        "mkdir": {
          "type": "boolean",
          "description": "allow create directory on directory index page"
        },
        "websockets": {
          "type": "boolean",
          "description": "allow websocket connections (default true)"
        },
        "registerNotice": {
          "type": "boolean",
          "description": "login attempts for a public/private key pair which has not been \nregistered will be logged at debug level 2 with the full public key\nwhich can be copied into an authAccounts entry."
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "ServerConfig_AuthAccountsValue": {
      "type": "object",
      "properties": {
        "clientKeys": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Hashmap of [username]: public key"
        },
        "permissions": {
          "$ref": "#/definitions/ServerConfig_AccessOptions",
          "description": "override hostLevelPermissions for users with this account"
        }
      },
      "required": [
        "clientKeys",
        "permissions"
      ],
      "additionalProperties": false
    }
  },
  "$ref": "#/definitions/ServerConfigSchema"
}