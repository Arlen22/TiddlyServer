{
	"$schema": "http://json-schema.org/draft-06/schema#",
	"definitions": {
		"ServerConfigSchema": {
			"type": "object",
			"properties": {
				"server": {
					"type": "object",
					"properties": {
						"bindAddress": {
							"type": "array",
							"items": {
								"type": "string"
							},
							"description": "An array of IP addresses to accept requests on. Can be any IP address\r\nassigned to the machine. Default is \"127.0.0.1\".\r\n\r\nIf `bindWildcard` is true, each connection is checked individually. Otherwise, the server listens\r\non the specified IP addresses and accepts all connections from the operating system. If an IP address\r\ncannot be bound, the server skips it unless `--bindAddressRequired` is specified\r\n\r\nIf `filterBindAddress` is true, IPv4 addresses may include a subnet mask,\r\n(e.g. `/24`) which matches any interface IP address in that range. Prefix with a minus sign (-) \r\nto block requests incoming to that IP address or range."
						},
						"filterBindAddress": {
							"type": "boolean",
							"description": "IPv4 addresses may include a subnet mask,\r\n(e.g. `/24`) which matches any IP address in that range. Prefix with a minus sign (-) \r\nto block requests incoming to that IP address or range."
						},
						"bindWildcard": {
							"type": "boolean",
							"enum": [
								true,
								false
							],
							"description": "Bind to the wildcard addresses `0.0.0.0` and `::` (if enabled) in that order.\r\nThe default is `true`. In many cases this is preferred, however \r\nAndroid does not support this for some reason. On Android, set this to\r\n`false` and set host to `[\"0.0.0.0/0\"]` to bind to all IPv4 addresses."
						},
						"enableIPv6": {
							"type": "boolean",
							"description": "Bind to the IPv6 wildcard as well if `bindWilcard` is true and allow requests\r\nincoming to IPv6 addresses if not explicitly denied."
						},
						"port": {
							"type": "number",
							"description": "port to listen on"
						},
						"logAccess": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "boolean",
									"enum": [
										false
									]
								}
							],
							"description": "access log file"
						},
						"logError": {
							"type": "string",
							"description": "error log file"
						},
						"logColorsToFile": {
							"type": "boolean",
							"description": "write the console color markers to file, useful if you read the logs by printing them to a terminal"
						},
						"logToConsoleAlso": {
							"type": "boolean",
							"description": "print access and error events to the console regardless of whether they are logged to a file"
						},
						"debugLevel": {
							"type": "number",
							"description": "4 - Errors that require the process to exit for restart\r\n3 - Major errors that are handled and do not require a server restart\r\n2 - Warnings or errors that do not alter the program flow but need to be marked (minimum for status 500)\r\n1 - Info - Most startup messages\r\n0 - Normal debug messages and all software and request-side error messages\r\n-1 - Detailed debug messages from high level apis\r\n-2 - Response status messages and error response data\r\n-3 - Request and response data for all messages (verbose)\r\n-4 - Protocol details and full data dump (such as encryption steps and keys)"
						},
						"https": {
							"anyOf": [
								{
									"$ref": "#/definitions/SecureServerOptions"
								},
								{
									"type": "string"
								}
							],
							"description": "https-only options: an object or a string to a `require`-able file (such as .js or .json) \r\nwhich exports the object"
						},
						"_bindLocalhost": {
							"type": "boolean",
							"description": "always bind a separate server instance to 127.0.0.1 regardless of any other settings"
						},
						"_devmode": {
							"type": "boolean",
							"description": "enables certain expensive per-request checks"
						}
					},
					"required": [
						"bindAddress",
						"filterBindAddress",
						"bindWildcard",
						"enableIPv6",
						"port",
						"logAccess",
						"logError",
						"logColorsToFile",
						"logToConsoleAlso",
						"debugLevel",
						"_bindLocalhost",
						"_devmode"
					],
					"additionalProperties": false,
					"description": "Generic webserver options."
				},
				"directoryIndex": {
					"type": "object",
					"properties": {
						"mixFolders": {
							"type": "boolean",
							"description": "sort folder and files together rather than separated"
						},
						"defaultType": {
							"type": "string",
							"enum": [
								"html",
								"json"
							],
							"description": "default format for the directory index"
						},
						"icons": {
							"type": "object",
							"additionalProperties": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"description": "Hashmap of type { \"icon_name\": [\"ext\", \"ext\"]} where ext represents the extensions to use this icon for. \r\nIcons are in the TiddlyServer/assets/icons folder."
						}
					},
					"required": [
						"mixFolders",
						"defaultType",
						"icons"
					],
					"additionalProperties": false,
					"description": "directory index options"
				},
				"tiddlyserver": {
					"type": "object",
					"properties": {
						"backupDirectory": {
							"type": "string",
							"description": "backup directory for saving SINGLE-FILE wikis only"
						},
						"etag": {
							"type": "string",
							"enum": [
								"required",
								"disabled",
								""
							],
							"description": "whether to use the etag field, blank string means \"if specified\""
						},
						"etagWindow": {
							"type": "number",
							"description": "etag does not need to be exact by this many seconds"
						},
						"useTW5path": {
							"type": "boolean",
							"description": "serve datafolders with a trailing slash"
						},
						"hostLevelPermissions": {
							"type": "object",
							"additionalProperties": {
								"$ref": "#/definitions/ServerConfig_AccessOptions"
							},
							"description": "permissions based on host address: \"localhost\", \"*\" (all others), \"192.168.0.0/16\""
						}
					},
					"required": [
						"etag",
						"etagWindow",
						"useTW5path",
						"hostLevelPermissions"
					],
					"additionalProperties": false,
					"description": "tiddlyserver specific options"
				},
				"EXPERIMENTAL_clientside_datafolders": {
					"type": "object",
					"properties": {
						"enabled": {
							"type": "boolean",
							"description": "temporarily disable clientside datafolders (does NOT disable the `tiddlywiki` folder)"
						},
						"maxAge_tw_plugins": {
							"type": "number",
							"description": "how long to cache tw_plugins on the server side"
						},
						"alwaysRefreshCache": {
							"type": "boolean",
							"description": "refresh cache whenever ?refresh=true is called"
						}
					},
					"required": [
						"enabled",
						"maxAge_tw_plugins",
						"alwaysRefreshCache"
					],
					"additionalProperties": false,
					"description": "client-side data folder loader which loads datafolders directly into the browser"
				},
				"$schema": {
					"type": "string",
					"description": "The JSON schema location for this document. This schema is generated \r\ndirectly from the TypeScript interfaces\r\nused in TiddlyServer. A text-editor with autocomplete, such as VS code, \r\nwill make editing this file much simpler. \r\nMost fields include a description like this one. \r\n\r\nAll relative paths in this file are resolved relative to this file, so \r\n`./settings-tree.xml` refers to an XML file in the same folder as this file. \r\nAll relative paths in included files (such as the XML file) are resolved \r\nrelative to the included file."
				},
				"tree": {
					"$ref": "#/definitions/NewTreeObjectSchemaItem"
				}
			},
			"required": [
				"$schema",
				"EXPERIMENTAL_clientside_datafolders",
				"directoryIndex",
				"server",
				"tiddlyserver",
				"tree"
			],
			"additionalProperties": false
		},
		"SecureServerOptions": {
			"type": "object",
			"properties": {
				"key": {
					"description": "All private keys as specified in \r\nhttps://nodejs.org/docs/latest-v8.x/api/tls.html#tls_tls_createsecurecontext_options"
				},
				"cert": {
					"description": "The certificate chain for all private keys as specified in \r\nhttps://nodejs.org/docs/latest-v8.x/api/tls.html#tls_tls_createsecurecontext_options"
				},
				"requestClientCertificate": {
					"anyOf": [
						{
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						{
							"type": "boolean"
						}
					],
					"description": "EITHER: A list of file paths of self-signed certs and certificate authorities to allow for \r\nclient certificates. OR: Boolean `true`, then the list of Mozilla CAs will be used and \r\nself-signed certs will not be possible unless `rejectUnauthorizedCertificate` is false."
				},
				"rejectUnauthorizedCertificate": {
					"type": "boolean",
					"description": "whether to reject connections which do not have a valid certificate"
				}
			},
			"required": [
				"key",
				"cert",
				"requestClientCertificate",
				"rejectUnauthorizedCertificate"
			],
			"additionalProperties": false
		},
		"ServerConfig_AccessOptions": {
			"type": "object",
			"properties": {
				"writeErrors": {
					"type": "boolean"
				},
				"upload": {
					"type": "boolean",
					"description": "allow uploads on the directory index page"
				},
				"mkdir": {
					"type": "boolean",
					"description": "allow create directory on directory index page"
				},
				"settings": {
					"type": "boolean",
					"description": "allow non-critical settings to be modified"
				},
				"WARNING_all_settings_WARNING": {
					"type": "boolean",
					"description": "allow critical settings to be modified"
				}
			},
			"required": [
				"writeErrors",
				"upload",
				"mkdir",
				"settings",
				"WARNING_all_settings_WARNING"
			],
			"additionalProperties": false
		},
		"NewTreeObjectSchemaItem": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreeHashmapGroupSchema"
				},
				{
					"$ref": "#/definitions/NewTreeHashmapPath"
				},
				{
					"type": "string"
				}
			]
		},
		"NewTreeHashmapGroupSchema": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"group"
					]
				},
				"$children": {
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/NewTreeItemSchema"
							}
						},
						{
							"$ref": "#/definitions/NewTreeObjectSchema"
						}
					],
					"default": {}
				}
			},
			"required": [
				"$element",
				"$children"
			],
			"additionalProperties": false
		},
		"NewTreeItemSchema": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreeGroupSchema"
				},
				{
					"$ref": "#/definitions/NewTreePathSchema"
				},
				{
					"type": "string"
				}
			],
			"default": {
				"$element": ""
			}
		},
		"NewTreeGroupSchema": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"group"
					]
				},
				"$children": {
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/NewTreeItemSchema"
							}
						},
						{
							"$ref": "#/definitions/NewTreeObjectSchema"
						}
					],
					"default": {}
				},
				"key": {
					"type": "string"
				}
			},
			"required": [
				"$children",
				"$element",
				"key"
			],
			"additionalProperties": false
		},
		"NewTreePathSchema": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"folder"
					]
				},
				"path": {
					"type": "string"
				},
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreeOptions"
					}
				},
				"key": {
					"type": "string"
				}
			},
			"additionalProperties": false,
			"required": [
				"$element",
				"path"
			]
		},
		"NewTreeOptions": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreePathOptions_Index"
				},
				{
					"$ref": "#/definitions/NewTreePathOptions_AuthPassword"
				},
				{
					"$ref": "#/definitions/NewTreePathOptions_AuthPublicKey"
				}
			],
			"default": {
				"$element": ""
			}
		},
		"NewTreePathOptions_Index": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"index"
					],
					"description": "Options related to the directory index (request paths ending in a \r\nbackslash which do not resolve to a TiddlyWiki data folder)."
				},
				"defaultType": {
					"type": "string",
					"enum": [
						"html",
						"json",
						"403",
						"404"
					],
					"description": "The format of the index generated if no index file is found, or \"403\" to \r\nreturn a 403 Access Denied, or \"404\" to return a 404 Not Found."
				},
				"indexFile": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Look for index files named exactly this or with one of the defaultExts added. \r\nFor example, a defaultFile of [\"index\"] and a defaultExts of [\"htm\",\"html\"] would \r\nlook for \"index.htm\", \"index.html\", in that order."
				},
				"indexExts": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Extensions to add when looking for an index file. A blank string will set the order \r\nto search for the exact indexFile name. The extensions are searched in the order specified."
				}
			},
			"required": [
				"$element",
				"defaultType",
				"indexFile",
				"indexExts"
			],
			"additionalProperties": false
		},
		"NewTreePathOptions_AuthPassword": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"authPassword"
					],
					"description": "Use basic auth for access control"
				},
				"username": {
					"type": "string",
					"description": "Username given to TiddlyWiki data folders and anywhere else it's needed"
				},
				"password": {
					"type": "string",
					"description": "password encoded in utf8"
				}
			},
			"required": [
				"$element",
				"username",
				"password"
			],
			"additionalProperties": false
		},
		"NewTreePathOptions_AuthPublicKey": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"authClientKey"
					],
					"description": "use TLS Client Certificates for access control"
				},
				"username": {
					"type": "string",
					"description": "Username given to TiddlyWiki data folders and anywhere else it's needed"
				},
				"certificateAuthority": {
					"type": "string",
					"description": "all certificate authories and self-signed certificates to allow"
				},
				"rejectUnauthorized": {
					"type": "boolean",
					"description": "Reject requests that cannot present a signed certificate"
				}
			},
			"required": [
				"$element",
				"username",
				"certificateAuthority",
				"rejectUnauthorized"
			],
			"additionalProperties": false
		},
		"NewTreeObjectSchema": {
			"type": "object",
			"properties": {
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreeOptions"
					},
					"description": "The children of a hashmap `group` element which are not\r\n`group` or `folder` elements"
				}
			},
			"additionalProperties": {
				"$ref": "#/definitions/NewTreeObjectSchemaItem",
				"description": "A hashmap tree element: either a string or a group/folder element without the `key` attribute",
				"default": {
					"$element": {}
				},
				"pattern": "^([^$]+)+$"
			},
			"default": {
				"$element": {}
			},
			"description": "A hashmap of `group` elements, `folder` elements, and folder paths"
		},
		"NewTreeHashmapPath": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"folder"
					]
				},
				"path": {
					"type": "string"
				},
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreeOptions"
					}
				}
			},
			"required": [
				"$element",
				"path"
			],
			"additionalProperties": false
		}
	},
	"$ref": "#/definitions/ServerConfigSchema"
}