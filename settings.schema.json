{
	"$schema": "http://json-schema.org/draft-06/schema#",
	"definitions": {
		"ServerConfigSchema": {
			"type": "object",
			"properties": {
				"_disableLocalHost": {
					"type": "boolean"
				},
				"_devmode": {
					"type": "boolean"
				},
				"types": {
					"type": "object",
					"properties": {
						"htmlfile": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					"required": [
						"htmlfile"
					],
					"additionalProperties": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				"username": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"host": {
					"type": "string"
				},
				"port": {
					"anyOf": [
						{
							"type": "number"
						},
						{
							"type": "number",
							"enum": [
								8080
							]
						}
					]
				},
				"backupDirectory": {
					"type": "string"
				},
				"etag": {
					"type": "string",
					"enum": [
						"required",
						"disabled",
						""
					]
				},
				"etagWindow": {
					"type": "number"
				},
				"useTW5path": {
					"type": "boolean"
				},
				"debugLevel": {
					"type": "number"
				},
				"allowNetwork": {
					"$ref": "#/definitions/ServerConfig_AccessOptions"
				},
				"allowLocalhost": {
					"$ref": "#/definitions/ServerConfig_AccessOptions"
				},
				"logAccess": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"type": "boolean",
							"enum": [
								false
							]
						}
					]
				},
				"logError": {
					"type": "string"
				},
				"logColorsToFile": {
					"type": "boolean"
				},
				"logToConsoleAlso": {
					"type": "boolean"
				},
				"maxAge": {
					"type": "object",
					"properties": {
						"tw_plugins": {
							"type": "number"
						}
					},
					"required": [
						"tw_plugins"
					],
					"additionalProperties": false,
					"description": "cache max age in milliseconds for different types of data"
				},
				"tsa": {
					"type": "object",
					"properties": {
						"alwaysRefreshCache": {
							"type": "boolean"
						}
					},
					"required": [
						"alwaysRefreshCache"
					],
					"additionalProperties": false
				},
				"mixFolders": {
					"type": "boolean"
				},
				"$schema": {
					"type": "string",
					"description": "Schema generated by marcoq.vscode-typescript-to-json-schema VS code plugin"
				},
				"tree": {
					"anyOf": [
						{
							"$ref": "#/definitions/NewTreeHashmapPath"
						},
						{
							"$ref": "#/definitions/NewTreeHashmapGroupSchema"
						},
						{
							"type": "string"
						}
					]
				}
			},
			"required": [
				"$schema",
				"_devmode",
				"_disableLocalHost",
				"allowLocalhost",
				"allowNetwork",
				"debugLevel",
				"etag",
				"etagWindow",
				"host",
				"logAccess",
				"logColorsToFile",
				"logError",
				"logToConsoleAlso",
				"maxAge",
				"mixFolders",
				"port",
				"tree",
				"tsa",
				"types",
				"useTW5path"
			],
			"additionalProperties": false
		},
		"ServerConfig_AccessOptions": {
			"type": "object",
			"properties": {
				"writeErrors": {
					"type": "boolean"
				},
				"upload": {
					"type": "boolean",
					"description": "allow uploads on the directory index page"
				},
				"mkdir": {
					"type": "boolean",
					"description": "allow create directory on directory index page"
				},
				"settings": {
					"type": "boolean",
					"description": "allow non-critical settings to be modified"
				},
				"WARNING_all_settings_WARNING": {
					"type": "boolean",
					"description": "allow critical settings to be modified"
				}
			},
			"required": [
				"writeErrors",
				"upload",
				"mkdir",
				"settings",
				"WARNING_all_settings_WARNING"
			],
			"additionalProperties": false
		},
		"NewTreeHashmapPath": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"folder"
					]
				},
				"path": {
					"type": "string"
				},
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreePathOptions"
					}
				}
			},
			"required": [
				"$element",
				"path"
			],
			"additionalProperties": false
		},
		"NewTreePathOptions": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreePathOptions_Index"
				},
				{
					"$ref": "#/definitions/NewTreePathOptions_AuthPassword"
				},
				{
					"$ref": "#/definitions/NewTreePathOptions_AuthPublicKey"
				}
			],
			"default": {
				"$element": ""
			}
		},
		"NewTreePathOptions_Index": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"index"
					],
					"description": "Options related to the directory index (request paths ending in a \r\nbackslash which do not resolve to a TiddlyWiki data folder)."
				},
				"defaultType": {
					"type": "string",
					"enum": [
						"html",
						"json",
						"403",
						"404"
					],
					"description": "The format of the index generated if no index file is found, or \"403\" to \r\nreturn a 403 Access Denied, or \"404\" to return a 404 Not Found."
				},
				"indexFile": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Look for index files named exactly this or with one of the defaultExts added. \r\nFor example, a defaultFile of [\"index\"] and a defaultExts of [\"htm\",\"html\"] would \r\nlook for \"index.htm\", \"index.html\", in that order."
				},
				"indexExts": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "Extensions to add when looking for an index file. A blank string will set the order \r\nto search for the exact indexFile name. The extensions are searched in the order specified."
				}
			},
			"required": [
				"$element",
				"defaultType",
				"indexFile",
				"indexExts"
			],
			"additionalProperties": false
		},
		"NewTreePathOptions_AuthPassword": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"authPassword"
					],
					"description": "Use basic auth for access control"
				},
				"username": {
					"type": "string",
					"description": "Username given to TiddlyWiki data folders and anywhere else it's needed"
				},
				"password": {
					"type": "string",
					"description": "password encoded in utf8"
				},
				"$children": {
					"not": {}
				}
			},
			"required": [
				"$element",
				"username",
				"password"
			],
			"additionalProperties": false
		},
		"NewTreePathOptions_AuthPublicKey": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"authClientKey"
					],
					"description": "use TLS Client Certificates for access control"
				},
				"username": {
					"type": "string",
					"description": "Username given to TiddlyWiki data folders and anywhere else it's needed"
				},
				"certificateAuthority": {
					"type": "string",
					"description": "all certificate authories and self-signed certificates to allow"
				},
				"rejectUnauthorized": {
					"type": "boolean",
					"description": "Reject requests that cannot present a signed certificate"
				},
				"$children": {
					"not": {}
				}
			},
			"required": [
				"$element",
				"username",
				"certificateAuthority",
				"rejectUnauthorized"
			],
			"additionalProperties": false
		},
		"NewTreeHashmapGroupSchema": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"group"
					]
				},
				"$children": {
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/NewTreeItemSchema"
							}
						},
						{
							"$ref": "#/definitions/NewTreeObjectSchema"
						}
					],
					"default": {}
				}
			},
			"required": [
				"$element",
				"$children"
			],
			"additionalProperties": false
		},
		"NewTreeItemSchema": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreeGroupSchema"
				},
				{
					"$ref": "#/definitions/NewTreePath"
				},
				{
					"type": "string"
				}
			],
			"default": {
				"$element": ""
			}
		},
		"NewTreeGroupSchema": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"group"
					]
				},
				"$children": {
					"anyOf": [
						{
							"type": "array",
							"items": {
								"$ref": "#/definitions/NewTreeItemSchema"
							}
						},
						{
							"$ref": "#/definitions/NewTreeObjectSchema"
						}
					],
					"default": {}
				},
				"key": {
					"type": "string"
				}
			},
			"required": [
				"$children",
				"$element",
				"key"
			],
			"additionalProperties": false
		},
		"NewTreePath": {
			"type": "object",
			"properties": {
				"$element": {
					"type": "string",
					"enum": [
						"folder"
					]
				},
				"path": {
					"type": "string"
				},
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreePathOptions"
					}
				},
				"key": {
					"type": "string"
				}
			},
			"required": [
				"$element",
				"key",
				"path"
			],
			"additionalProperties": false
		},
		"NewTreeObjectSchema": {
			"type": "object",
			"properties": {
				"$children": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/NewTreePathOptions"
					},
					"description": "The children of a hashmap `group` element which are not\r\n`group` or `folder` elements"
				}
			},
			"additionalProperties": {
				"$ref": "#/definitions/NewTreeObjectSchemaItem",
				"description": "A hashmap tree element: either a string or a group/folder element without the `key` attribute",
				"default": {
					"$element": {}
				},
				"pattern": "^([^$]+)+$"
			},
			"description": "A hashmap of `group` elements, `folder` elements, and folder paths"
		},
		"NewTreeObjectSchemaItem": {
			"anyOf": [
				{
					"$ref": "#/definitions/NewTreeHashmapGroupSchema"
				},
				{
					"$ref": "#/definitions/NewTreeHashmapPath"
				},
				{
					"type": "string"
				}
			],
			"default": {
				"$element": {}
			}
		}
	},
	"$ref": "#/definitions/ServerConfigSchema"
}