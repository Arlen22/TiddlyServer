{"title":"$:/plugins/tiddlywiki/text-slicer","description":"Tools for slicing text into tiddlers","author":"JeremyRuston","core-version":">=5.0.0","list":"readme docs","version":"5.1.14","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/text-slicer/docs":{"title":"$:/plugins/tiddlywiki/text-slicer/docs","text":"! Introduction\n\nThis plugin contains tools to help work with documents that are structured as a hierarchical outline of tiddlers.  The structural relationships within the document are expressed as lists: for example, headings have a list specifying the content to be shown under the heading.\n\nTiddlyWiki is built on the philosophy that text is easier to re-use and work with if it is sliced up into separate chunks that can be independently manipulated, and then woven back together to make up stories and narratives for publication.\n\nThe components within the text slicer plugin include:\n\n* ''the slicer'', a tool that slices up an existing monolithic document according to the headings, lists and paragraphs. It is available as a toolbar button for the browser, or as a command for use under Node.js\n* ''document preview column'', a new sidebar on the left that shows the full text of any documents in the wiki and allows individual tiddlers to be opened with a click\n* ''exporters'' for exporting the individual documents as HTML files (and for previewing them)\n\n! Slicing Monolithic Documents\n\nThe tool can slice any tiddler that can be rendered as HTML, including both WikiText and HTML itself.\n\nDocuments created with Microsoft Word will need to be first converted to HTML. The library [[mammoth.js|https://github.com/mwilliamson/mammoth.js]] is recommended for this purpose.\n\n!! Browser\n\nIn the browser, you can slice a monolithic document tiddler using the slicer toolbar button.\n\n!! Node.js\n\nThe `--slice` command allows a tiddler to be sliced under Node.js:\n\n```\ntiddlywiki mywiki --slice SourceDocument --build index\n```\n\n! Working with the Document Preview Column\n\nThe document preview column appears at the left side of the screen. The content of headings can be collapsed and expanded to help navigation. Clicking on a tiddler opens the corresponding tiddler in the main story river.\n\nClicking ''Show toolbar'' causes each tiddler be preceded by a toolbar showing the underlying title. It can be edited directly to rename the tiddler. References to the tiddler in the ''tags'' and ''list'' are automatically updated to reflect the change, but note that links to the tiddler will not be automatically changed.\n\nThe following theme tweaks should be applied to enable the preview column:\n\n* Set [[story left position|$:/themes/tiddlywiki/vanilla/metrics/storyleft]] to ''400px'' (or more)\n* It is recommended to also set the [[sidebar layout|$:/themes/tiddlywiki/vanilla/options/sidebarlayout]] to ''fluid-fixed''.\n\n! Exporting Documents\n\nDocuments can be saved under Node.js, or previewed in the browser.\n\n!! Exporting Documents in the Browser\n\nTo preview a document, locate it in the preview column and click the button labelled \"View document\". The document will open in plain text in a new window. The window will be automatically updated as you work on the document.\n\n!! Exporting Documents under Node.js\n\n[TBD]\n\n! Sliced Document Format\n\n!! Introduction\n\nIndividual tiddlers are created for each heading, paragraph and list item. They are linked together into a hierarchical outline using lists.\n\nFor example, consider a tiddler titled ''Example'' containing this simple text:\n\n<<<\n! This is a heading\n\nThis is a paragraph.\n\n* And the first list item\n* Second list item\n<<<\n\nIt will be sliced up into:\n\n* a tiddler for the overall document\n** a tiddler for the heading\n*** a tiddler for the paragraph\n*** a tiddler for the list\n**** and a tiddler for each list item\n\nThese tiddlers are bound together using lists: the parent tiddler has a ''list'' field that lists each child in the correct order.\n\n!! Slicing Process\n\nSlicing generates the following component tiddlers.\n\nTiddler titles are generated automatically in most cases (but can subsequently be changed manually). The automatically generated title is made up of concatenating the following elements:\n\n* root text (e.g. ''para'')\n* a dash ''-''\n* the first few words of the text of the item (up to 40 characters), separated with dashes ''-''\n* if necessary, a dash ''-'' and a numerical index to make the title unique\n\nFor example, ''para-how-to-use-pentagonal-tiles 23''.\n\nAny CSS classes used in the original document are assigned as tags to the associated tiddlers.\n\n!!! Document\n\nThe document itself is represented by a tiddler with the following fields:\n\n* ''toc-type'': the text \"document\"\n* ''title'': the text ''\"Sliced up \"'' plus the title of the tiddler that was sliced\n* ''text'': Available for comments about the document\n* ''list'': ordered list of tiddlers making up the root level of this document\n\n!!! Headings\n\nTiddlers representing headings have the following fields:\n\n* ''toc-type'': the text \"heading\"\n* ''toc-heading-level'': the heading level \"h1\", \"h2\", \"h3\" etc.\n* ''title'': an automatically generated unique title\n* ''text'': the text of the heading\n* ''list'': ordered list of tiddlers tagged with this heading (i.e. the child headings, paragraphs and lists displayed under this heading)\n** In addition, any CSS classes found in the HTML are converted into tags\n\n!!! Paragraphs\n\nTiddlers representing paragraphs have the following fields:\n\n* ''toc-type'': the text \"paragraph\"\n* ''title'': an automatically generated unique title\n* ''text'': the text of the paragraph\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\n!!! Lists\n\nLists are represented by several tiddlers: one for the list itself, and one for each item in the list.\n\nThe tiddler representing the list itself has the following fields:\n\n* ''toc-type'': the text \"list\"\n* ''toc-list-type'': the text \"ul\" or \"ol\"\n* ''toc-list-filter'': the default filter used to generate the titles of the list items\n* ''title'': an automatically generated unique title\n* ''list'': ordered list of titles of tiddlers representing the items in this list\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\nThe tiddlers representing items within the list have the following fields:\n\n* ''toc-type'': the text \"item\"\n* ''title'': an automatically generated unique title\n* ''text'': the text of the list item\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\n!!! Definition lists\n\nDefinition lists are represented by several tiddlers: one for the definition list itself, and one for each term and definition in the list.\n\nThe tiddler representing the definition list itself has the following fields:\n\n* ''toc-type'': the text \"def-list\"\n* ''toc-list-filter'': the default filter used to generate the titles of the definition list items\n* ''title'': an automatically generated unique title\n* ''list'': ordered list of titles of tiddlers representing the items (terms and/or definition) in the definition list\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\nThe tiddlers representing terms within the definition list have the following fields:\n\n* ''toc-type'': the text \"term\"\n* ''title'': an automatically generated unique title\n* ''text'': the text of the definition list term\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\nThe tiddlers representing definitions within the definition list have the following fields:\n\n* ''toc-type'': the text \"definition\"\n* ''title'': an automatically generated unique title\n* ''text'' : the text of the definition list definition\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\n!!! Images\n\nTiddlers representing images have the following fields:\n\n* ''toc-type'': the text \"image\"\n* ''title'': an automatically generated unique title\n* ''type'': appropriate content type for the image (eg \"image/jpeg\")\n\n!!! Notes\n\nNotes are available during editing but hidden for static renderings. The slicing mechanism does not generate notes; they can only be subsequently added manually. Tiddlers representing notes have the following fields:\n\n* ''toc-type'': the text \"note\"\n* ''title'': an automatically generated unique title\n* ''text'': the text of the note\n* ''tags'': any CSS classes found in the HTML are converted into tags\n\n! Document Metadata, Tags and Classes\n\n[TBD]\n\n\n"},"$:/plugins/tiddlywiki/text-slicer/exporters/full-doc":{"title":"$:/plugins/tiddlywiki/text-slicer/exporters/full-doc","text":"{{||$:/plugins/tiddlywiki/text-slicer/templates/static/document}}"},"$:/plugins/tiddlywiki/text-slicer/icon":{"title":"$:/plugins/tiddlywiki/text-slicer/icon","tags":"$:/tags/Image","text":"<svg class=\"tc-image-text-slicer tc-image-button\" width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\n    <g fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M64,0 L118.5596,32 L118.5596,96 L64,128 L9.44039956,96 L9.44039956,32 L64,0 Z\" ></path>\n        <g transform=\"translate(32.000000, 32.000000) scale(2.19)\" fill=\"#ffffff\">\n            {{$:/plugins/tiddlywiki/text-slicer/images/text-slicer-icon}}\n        </g>\n    </g>\n</svg>"},"$:/plugins/tiddlywiki/text-slicer/images/text-slicer-icon":{"title":"$:/plugins/tiddlywiki/text-slicer/images/text-slicer-icon","tags":"$:/tags/Image","text":"<svg class=\"tc-image-text-slicer tc-image-button\" width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\n    <g fill-rule=\"evenodd\">\n        <g transform=\"translate(4.000000, 0.000000)\">\n            <path d=\"M38.3411765,60.8692043 L37.0438554,60.5934502 L36.1060169,61.5312888 L30.0358967,67.6014089 L26.8546358,70.7826698 L31.2553046,71.7180609 L57.49096,77.2946216 L55.6094677,75.4131293 L60.2969414,97.4659591 L62.6863095,96.9580832 L63.4542053,94.6391709 C61.3968756,93.9578968 59.2178345,93.6803997 57.0133961,93.834549 C47.752502,94.4821338 40.7734518,102.529805 41.4221661,111.806851 C42.0708803,121.083897 50.1020302,128.081953 59.3629243,127.434368 C68.6238185,126.786783 75.6028686,118.739112 74.9541544,109.462066 C74.9172571,108.93441 74.8561906,108.411074 74.7713217,107.893227 L72.3607324,108.288294 L74.8030833,108.332344 C74.8113029,107.876617 74.7676676,107.419644 74.6718491,106.968854 L68.0968468,76.0359001 L65.1996027,78.9331442 L95.7256082,85.4216469 C97.3484677,85.8346681 99.1301315,85.9957158 100.927243,85.8700496 C110.188137,85.2224648 117.167187,77.1747935 116.518473,67.8977477 C115.869758,58.6207018 107.838608,51.622646 98.5777143,52.2702308 C89.3168202,52.9178156 82.3377701,60.9654868 82.9864843,70.2425327 C83.0829952,71.6227022 83.3447327,72.9713395 83.7634295,74.2666802 L86.0877705,73.5153767 L86.5956464,71.1260085 L64.5768319,66.445765 L66.4583242,68.3272573 L52.9962533,4.9931931 C52.3027992,1.7307483 49.0908655,-0.351931923 45.8299389,0.34119942 C42.5678304,1.03458199 40.4828911,4.24818153 41.1753213,7.50580974 L53.9709451,67.7044865 L56.8681892,64.8072424 L38.3411765,60.8692043 L38.3411765,60.8692043 Z M62.9704214,109.856258 C62.9938415,110.000792 63.0107875,110.147165 63.0211368,110.295166 C63.2044836,112.917148 61.2347613,115.188472 58.6247241,115.370983 C56.014687,115.553495 53.7480268,113.578408 53.5646799,110.956426 C53.3813331,108.334444 55.3510554,106.063121 57.9610925,105.880609 C60.1295425,105.728976 62.1103551,107.076498 62.7888621,109.116336 L65.1067464,108.345342 L62.7173781,108.853218 L62.850917,109.48147 C62.9106646,109.76256 62.989888,110.03773 63.0878857,110.305385 L65.3817182,109.465533 L62.9704214,109.856258 L62.9704214,109.856258 Z M100.189042,73.8066649 C97.5790052,73.9891764 95.312345,72.0140901 95.1289982,69.3921077 C94.9456513,66.7701254 96.9153736,64.4988023 99.5254108,64.3162907 C102.135448,64.1337792 104.402108,66.1088655 104.585455,68.7308479 C104.768802,71.3528302 102.79908,73.6241533 100.189042,73.8066649 L100.189042,73.8066649 L100.189042,73.8066649 Z\"></path>\n            <g transform=\"translate(37.805833, 47.877863) rotate(-135.000000) translate(-37.805833, -47.877863) translate(34.692000, -1.943461)\">\n                <path d=\"M6.22766546,40.4798255 C6.22766546,38.7601032 4.83355506,37.3659928 3.11383273,37.3659928 C1.3941104,37.3659928 -1.32677371e-13,38.7601032 -1.32782674e-13,40.4798255 C-1.32887976e-13,42.1995478 1.3941104,43.5936583 3.11383273,43.5936583 C4.83355506,43.5936583 6.22766546,42.1995478 6.22766546,40.4798255 L6.22766546,40.4798255 Z\" id=\"Oval-251\"></path>\n                <path d=\"M6.22766546,87.1873165 C6.22766546,85.4675942 4.83355506,84.0734838 3.11383273,84.0734838 C1.3941104,84.0734838 -1.93517593e-13,85.4675942 -1.93622895e-13,87.1873165 C-1.93728198e-13,88.9070388 1.3941104,90.3011492 3.11383273,90.3011492 C4.83355506,90.3011492 6.22766546,88.9070388 6.22766546,87.1873165 L6.22766546,87.1873165 Z\"></path>\n                <path d=\"M6.22766546,96.5288147 C6.22766546,94.8090924 4.83355506,93.414982 3.11383273,93.414982 C1.3941104,93.414982 -1.26904211e-13,94.8090924 -1.27009514e-13,96.5288147 C-1.27114817e-13,98.248537 1.3941104,99.6426474 3.11383273,99.6426474 C4.83355506,99.6426474 6.22766546,98.248537 6.22766546,96.5288147 L6.22766546,96.5288147 Z\"></path>\n                <path d=\"M6.22766546,31.1383273 C6.22766546,29.418605 4.83355506,28.0244946 3.11383273,28.0244946 C1.3941104,28.0244946 -2.01955288e-13,29.418605 -2.0206059e-13,31.1383273 C-2.02165893e-13,32.8580497 1.3941104,34.2521601 3.11383273,34.2521601 C4.83355506,34.2521601 6.22766546,32.8580497 6.22766546,31.1383273 L6.22766546,31.1383273 Z\"></path>\n                <path d=\"M6.22766546,78.0925797 C6.22766546,76.3728573 4.83355506,74.9787469 3.11383273,74.9787469 C1.3941104,74.9787469 -8.33239236e-15,76.3728573 -8.43769499e-15,78.0925797 C-8.54299761e-15,79.812302 1.3941104,81.2064124 3.11383273,81.2064124 C4.83355506,81.2064124 6.22766546,79.812302 6.22766546,78.0925797 L6.22766546,78.0925797 Z\"></path>\n                <path d=\"M6.22766546,21.7968291 C6.22766546,20.0771068 4.83355506,18.6829964 3.11383273,18.6829964 C1.3941104,18.6829964 4.14055991e-14,20.0771068 4.13002965e-14,21.7968291 C4.11949939e-14,23.5165515 1.3941104,24.9106619 3.11383273,24.9106619 C4.83355506,24.9106619 6.22766546,23.5165515 6.22766546,21.7968291 L6.22766546,21.7968291 Z\"></path>\n                <path d=\"M6.22766546,68.7510815 C6.22766546,67.0313591 4.83355506,65.6372487 3.11383273,65.6372487 C1.3941104,65.6372487 -8.33239236e-15,67.0313591 -8.43769499e-15,68.7510815 C-8.54299761e-15,70.4708038 1.3941104,71.8649142 3.11383273,71.8649142 C4.83355506,71.8649142 6.22766546,70.4708038 6.22766546,68.7510815 L6.22766546,68.7510815 Z\"></path>\n                <path d=\"M6.22766546,12.4553309 C6.22766546,10.7356086 4.83355506,9.3414982 3.11383273,9.3414982 C1.3941104,9.3414982 -2.74282284e-14,10.7356086 -2.7533531e-14,12.4553309 C-2.76388336e-14,14.1750533 1.3941104,15.5691637 3.11383273,15.5691637 C4.83355506,15.5691637 6.22766546,14.1750533 6.22766546,12.4553309 L6.22766546,12.4553309 Z\"></path>\n                <path d=\"M6.22766546,59.4095833 C6.22766546,57.6898609 4.83355506,56.2957505 3.11383273,56.2957505 C1.3941104,56.2957505 -7.71662199e-14,57.6898609 -7.72715225e-14,59.4095833 C-7.73768251e-14,61.1293056 1.3941104,62.523416 3.11383273,62.523416 C4.83355506,62.523416 6.22766546,61.1293056 6.22766546,59.4095833 L6.22766546,59.4095833 Z\"></path>\n                <path d=\"M6.22766546,3.11383273 C6.22766546,1.3941104 4.83355506,3.33066907e-14 3.11383273,3.33066907e-14 C1.3941104,3.33066907e-14 -2.74282284e-14,1.3941104 -2.7533531e-14,3.11383273 C-2.76388336e-14,4.83355506 1.3941104,6.22766546 3.11383273,6.22766546 C4.83355506,6.22766546 6.22766546,4.83355506 6.22766546,3.11383273 L6.22766546,3.11383273 Z\"></path>\n                <path d=\"M6.22766546,50.0680851 C6.22766546,48.3483627 4.83355506,46.9542523 3.11383273,46.9542523 C1.3941104,46.9542523 -7.71662199e-14,48.3483627 -7.72715225e-14,50.0680851 C-7.73768251e-14,51.7878074 1.3941104,53.1819178 3.11383273,53.1819178 C4.83355506,53.1819178 6.22766546,51.7878074 6.22766546,50.0680851 L6.22766546,50.0680851 Z\"></path>\n            </g>\n        </g>\n    </g>\n</svg>\n"},"$:/language/Help/slice":{"title":"$:/language/Help/slice","description":"Slice a hierarchical document into individual tiddlers","text":"Slices the specified tiddler\n\n```\n--slice <title>\n```\n"},"$:/plugins/tiddlywiki/text-slicer/modules/commands/slice.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/commands/slice.js\ntype: application/javascript\nmodule-type: command\n\nCommand to slice a specified tiddler\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar widget = require(\"$:/core/modules/widgets/widget.js\"),\n\ttextSlicer = require(\"$:/plugins/tiddlywiki/text-slicer/modules/slicer.js\");\n\nexports.info = {\n\tname: \"slice\",\n\tsynchronous: false\n};\n\nvar Command = function(params,commander,callback) {\n\tthis.params = params;\n\tthis.commander = commander;\n\tthis.callback = callback;\n};\n\nCommand.prototype.execute = function() {\n\tif(this.params.length < 1) {\n\t\treturn \"Missing parameters\";\n\t}\n\tvar self = this,\n\t\twiki = this.commander.wiki,\n\t\tsourceTitle = this.params[0],\n\t\tdestTitle = this.params[1],\n\t\tslicer = new textSlicer.Slicer({\n\t\t\tsourceTiddlerTitle: sourceTitle,\n\t\t\tbaseTiddlerTitle: destTitle,\n\t\t\twiki: wiki\n\t\t});\n\twiki.addTiddlers(slicer.getTiddlers());\n\t$tw.utils.nextTick(this.callback);\n\treturn null;\n};\n\nexports.Command = Command;\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/commands/slice.js","type":"application/javascript","module-type":"command"},"$:/core/modules/filters/list-children.js":{"text":"/*\\\ntitle: $:/core/modules/filters/list-children.js\ntype: application/javascript\nmodule-type: filteroperator\n\nFilter operator returning all the descendents of a tiddler listed in the \"list\" field\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n/*\nExport our filter function\n*/\nexports[\"list-children\"] = function(source,operator,options) {\n\tvar children = {},\n\t\tprocessTiddler = function(title) {\n\t\t\tvar tiddler = options.wiki.getTiddler(title);\n\t\t\tif(tiddler && !$tw.utils.hop(children,title)) {\n\t\t\t\tchildren[title] = true;\n\t\t\t\tvar list = options.wiki.getTiddlerList(title,operator.operand);\n\t\t\t\tlist.forEach(function(listItem) {\n\t\t\t\t\tif(!$tw.utils.hop(children,listItem)) {\n\t\t\t\t\t\tprocessTiddler(listItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\tsource(function(tiddler,title) {\n\t\tprocessTiddler(title);\n\t});\n\treturn Object.keys(children);\n};\n\n})();\n","title":"$:/core/modules/filters/list-children.js","type":"application/javascript","module-type":"filteroperator"},"$:/plugins/tiddlywiki/text-slicer/modules/slicer.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicer.js\ntype: application/javascript\nmodule-type: library\n\nSlice a tiddler or DOM document into individual tiddlers\n\nvar slicer = new textSlicer.Slicer(doc,{\n\t\tsourceTiddlerTitle: tiddler to slice -or-\n\t\tsourceText: text to slice -or-\n\t\tsourceDoc: DOM document to\n\t\tbaseTiddlerTitle: \"MySlicedTiddlers-\",\n\t\trole: \"sliced-content\"\n\t});\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar DOMParser = $tw.browser ? window.DOMParser : require(\"$:/plugins/tiddlywiki/xmldom/dom-parser\").DOMParser;\n\nfunction Slicer(options) {\n\t// Marshal parameters\n\tthis.sourceDoc = options.sourceDoc;\n\tthis.sourceTiddlerTitle = options.sourceTiddlerTitle;\n\tthis.sourceText = options.sourceText;\n\tthis.wiki = options.wiki;\n\tif(options.baseTiddlerTitle) {\n\t\tthis.baseTiddlerTitle = options.baseTiddlerTitle\t\t\n\t} else {\n\t\tif(this.sourceTiddlerTitle) {\n\t\t\tthis.baseTiddlerTitle = \"Sliced up \" + this.sourceTiddlerTitle;\n\t\t} else {\n\t\t\tthis.baseTiddlerTitle = \"SlicedTiddler\";\n\t\t}\n\t}\n\tthis.role = options.role || \"sliced-html\";\n\t// Initialise state\n\tthis.extractedTiddlers = {}; // Hashmap of created tiddlers\n\tthis.parentStack = []; // Stack of parent heading or list\n\tthis.containerStack = []; // Stack of elements containing other elements\n\tthis.slicers = $tw.modules.applyMethods(\"slicer\");\n\tthis.anchors = Object.create(null); // Hashmap of HTML anchor ID to tiddler title\n\t// Get the DOM document for the source text\n\tif(!this.sourceDoc) {\n\t\tif(this.sourceTiddlerTitle) {\n\t\t\tthis.sourceDoc = this.parseTiddlerText(this.sourceTiddlerTitle);\n\t\t} else {\n\t\t\tthis.sourceDoc = this.parseHtmlText(this.sourceText);\n\t\t}\n\t}\n\t// Create parent tiddler\nconsole.log(\"Slicing to\",this.baseTiddlerTitle)\n\tvar sliceTiddler = {\n\t\ttitle: this.baseTiddlerTitle,\n\t\ttext: \"Sliced at \" + (new Date()),\n\t\t\"toc-type\": \"document\",\n\t\ttags: [],\n\t\tlist: [],\n\t\trole: this.role\n\t};\n\tthis.addTiddler(sliceTiddler);\n\t// Slice the text into subordinate tiddlers\n\tthis.parentStack.push({type: \"h0\", title: sliceTiddler.title});\n\tthis.currentTiddler = sliceTiddler.title;\n\tthis.containerStack.push(sliceTiddler.title);\n\tthis.processNodeList(this.sourceDoc.childNodes);\n\tthis.containerStack.pop();\n}\n\nSlicer.prototype.parseTiddlerText = function(title) {\n\tvar tiddler = this.wiki.getTiddler(title);\n\tif(tiddler) {\n\t\tif(tiddler.fields.type === \"text/html\") {\n\t\t\treturn this.parseHtmlText(tiddler.fields.text);\n\t\t} else {\n\t\t\treturn this.parseWikiText(tiddler);\n\t\t}\n\t}\n};\n\nSlicer.prototype.parseWikiText = function(tiddler) {\n\tvar widgetNode = this.wiki.makeTranscludeWidget(tiddler.fields.title,{\n\t\t\tdocument: $tw.fakeDocument,\n\t\t\tparseAsInline: false,\n\t\t\timportPageMacros: true}),\n\t\tcontainer = $tw.fakeDocument.createElement(\"div\");\n\twidgetNode.render(container,null);\n\treturn container;\n};\n\nSlicer.prototype.parseHtmlText = function(text) {\n\ttext = text || \"\";\n\tif($tw.browser) {\n\t\tthis.iframe = document.createElement(\"iframe\");\n\t\tdocument.body.appendChild(this.iframe);\n\t\tthis.iframe.contentWindow.document.open();\n\t\tthis.iframe.contentWindow.document.write(text);\n\t\tthis.iframe.contentWindow.document.close();\n\t\treturn this.iframe.contentWindow.document;\n\t} else {\n\t\treturn new DOMParser().parseFromString(text);\n\t}\n};\n\nSlicer.prototype.addToList = function(parent,child) {\n\tvar parentTiddler = this.getTiddler(parent) || {},\n\t\tparentList = parentTiddler.list || [];\n\tparentList.push(child);\n\tthis.addTiddler($tw.utils.extend({title: parent},parentTiddler,{list: parentList}));\n};\n\nSlicer.prototype.insertBeforeListItem = function(parent,child,beforeSibling) {\n\tvar parentTiddler = this.getTiddler(parent) || {},\n\t\tparentList = parentTiddler.list || [],\n\t\tparentListSiblingPosition = parentList.indexOf(beforeSibling);\n\tif(parentListSiblingPosition !== -1) {\n\t\tparentList.splice(parentListSiblingPosition,0,child)\n\t\tthis.addTiddler($tw.utils.extend({title: parent},parentTiddler,{list: parentList}));\n\t}\n\n\telse {debugger;}\n};\n\nSlicer.prototype.popParentStackUntil = function(type) {\n\t// Pop the stack to remove any entries at the same or lower level\n\tvar newLevel = this.convertTypeToLevel(type),\n\t\ttopIndex = this.parentStack.length - 1;\n\tdo {\n\t\tvar topLevel = this.convertTypeToLevel(this.parentStack[this.parentStack.length - 1].type);\n\t\tif(topLevel !== null && topLevel < newLevel ) {\n\t\t\tbreak;\n\t\t}\n\t\tthis.parentStack.length--;\n\t} while(true);\n\treturn this.parentStack[this.parentStack.length - 1].title;\n};\n\nSlicer.prototype.getTopContainer = function() {\n\treturn this.containerStack[this.containerStack.length-1];\n};\n\nSlicer.prototype.appendToCurrentContainer = function(newText) {\n\tvar title = this.containerStack[this.containerStack.length-1];\n\tif(title) {\n\t\tvar tiddler = this.getTiddler(title) || {},\n\t\t\ttext = tiddler.text || \"\";\n\t\tthis.addTiddler($tw.utils.extend({title: title},tiddler,{text: text + newText}));\n\t}\n\telse {debugger;}\n};\n\nSlicer.prototype.convertTypeToLevel = function(type) {\n\tif(type.charAt(0) === \"h\") {\n\t\treturn parseInt(type.charAt(1),10);\t\t\t\n\t} else {\n\t\treturn null;\n\t}\n};\n\nSlicer.prototype.isBlank = function(s) {\n\treturn (/^[\\s\\xA0]*$/g).test(s);\n};\n\nSlicer.prototype.registerAnchor = function(id) {\n\tthis.anchors[id] = this.currentTiddler;\n}\n\nSlicer.prototype.processNodeList = function(domNodeList) {\n\t$tw.utils.each(domNodeList,this.processNode.bind(this));\n}\n\nSlicer.prototype.processNode = function(domNode) {\n\tvar nodeType = domNode.nodeType,\n\t\ttagName = (domNode.tagName || \"\").toLowerCase(),\n\t\thasProcessed = false;\n\tfor(var slicerTitle in this.slicers) {\n\t\tvar slicer = this.slicers[slicerTitle];\n\t\tif(slicer.bind(this)(domNode,tagName)) {\n\t\t\thasProcessed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!hasProcessed) {\n\t\tif(nodeType === 1 && domNode.hasChildNodes()) {\n\t\t\tthis.processNodeList(domNode.childNodes);\n\t\t}\n\t}\n};\n\nSlicer.prototype.makeUniqueTitle = function(rawText) {\n\t// Remove characters other than lowercase alphanumeric and spaces\n\tvar prefix = this.baseTiddlerTitle,\n\t\tself = this,\n\t\tcleanText;\n\tif(rawText) {\n\t\t// Replace non alpha characters with spaces\n\t\tcleanText = rawText.toLowerCase().replace(/[^\\s\\xA0]/mg,function($0,$1,$2) {\n\t\t\tif(($0 >= \"a\" && $0 <= \"z\") || ($0 >= \"0\" && $0 <= \"9\")) {\n\t\t\t\treturn $0;\n\t\t\t} else {\n\t\t\t\treturn \" \";\n\t\t\t}\n\t\t});\n\t\t// Split on word boundaries\n\t\tvar words = cleanText.split(/[\\s\\xA0]+/mg);\n\t\t// Remove common words\n\t\twords = words.filter(function(word) {\n\t\t\treturn word && (\"the and a of on i\".split(\" \").indexOf(word) === -1);\n\t\t});\n\t\t// Accumulate the number of words that will fit\n\t\tvar c = 0,\n\t\t\ts = \"\";\n\t\twhile(c < words.length && (s.length + words[c].length + 1) < 50) {\n\t\t\ts += \"-\" + words[c++];\n\t\t}\n\t\tprefix = prefix + s;\n\t}\n\t// Check for duplicates\n\tvar baseTitle = prefix;\n\tc = 0;\n\tvar title = baseTitle;\n\twhile(this.getTiddler(title)) {\n\t\ttitle = baseTitle + \"-\" + (++c);\n\t}\n\treturn title;\n};\n\nSlicer.prototype.addTiddler = function(fields) {\n\tif(fields.title) {\n\t\tthis.extractedTiddlers[fields.title] = Object.assign({},fields);\n\t}\n\treturn fields.title;\n};\n\nSlicer.prototype.addTiddlers = function(fieldsArray) {\n\tvar self = this;\n\t(fieldsArray || []).forEach(function(fields) {\n\t\tself.addTiddler(fields);\n\t});\n};\n\nSlicer.prototype.getTiddler = function(title) {\n\treturn this.extractedTiddlers[title];\n};\n\nSlicer.prototype.getTiddlers = function() {\n\tvar self = this;\n\treturn Object.keys(this.extractedTiddlers).map(function(title) {\n\t\treturn self.extractedTiddlers[title]\n\t})\n};\n\nexports.Slicer = Slicer;\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicer.js","type":"application/javascript","module-type":"library"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/anchor.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/anchor.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing anchor nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processAnchorNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 1 && tagName === \"a\") {\n\t\tvar id = domNode.getAttribute(\"id\");\n\t\tif(id) {\n\t\t\tthis.registerAnchor(id);\n\t\t\treturn true;\n\t\t}\n\t} \n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/anchor.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/def-list.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/def-list.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing definition list nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processDefListNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 1 && tagName === \"dl\") {\n\t\tvar title = this.makeUniqueTitle(\"def-list-\" + tagName),\n\t\t\tparentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\ttags = [];\n\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t}\n\t\tthis.addToList(parentTitle,title);\n\t\tthis.parentStack.push({type: tagName, title: this.addTiddler({\n\t\t\t\"toc-type\": \"def-list\",\n\t\t\t\"toc-list-filter\": \"[list<currentTiddler>!has[draft.of]]\",\n\t\t\ttext: \"\",\n\t\t\ttitle: title,\n\t\t\tlist: [],\n\t\t\ttags: tags\n\t\t})});\n\t\tthis.currentTiddler = title;\n\t\tthis.processNodeList(domNode.childNodes);\n\t\tthis.parentStack.pop();\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/def-list.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/definition.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/definition.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing definition nodes in definition lists\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processDefinitionNode = function(domNode,tagName) {\n\tvar text = $tw.utils.htmlEncode(domNode.textContent);\n\tif(domNode.nodeType === 1 && tagName === \"dd\") {\n\t\t// if(!this.isBlank(text)) {\n\t\t\tvar title = this.makeUniqueTitle(\"definition \" + text),\n\t\t\t\tparentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\t\ttags = [];\n\t\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t\t}\n\t\t\tthis.addToList(parentTitle,title);\n\t\t\tthis.addTiddler({\n\t\t\t\t\"toc-type\": \"definition\",\n\t\t\t\ttitle: title,\n\t\t\t\ttext: \"\",\n\t\t\t\tlist: [],\n\t\t\t\ttags: tags\n\t\t\t});\n\t\t\tthis.currentTiddler = title;\n\t\t\tthis.containerStack.push(title);\n\t\t\t// this.containerStack.push(\"Just testing\" + new Date());\n\t\t\tthis.processNodeList(domNode.childNodes);\n\t\t\tthis.containerStack.pop();\n\t\t\treturn true;\n\t\t// }\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/definition.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/heading.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/heading.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing heading nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processHeadingNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 1 && (tagName === \"h1\" || tagName === \"h2\" || tagName === \"h3\" || tagName === \"h4\")) {\n\t\tvar text = $tw.utils.htmlEncode(domNode.textContent);\n\t\tvar title = this.makeUniqueTitle(\"heading \" + text),\n\t\t\tparentTitle = this.popParentStackUntil(tagName),\n\t\t\ttags = [];\n\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t}\n\t\tthis.addToList(parentTitle,title);\n\t\tthis.parentStack.push({type: tagName, title: this.addTiddler({\n\t\t\t\"toc-type\": \"heading\",\n\t\t\t\"toc-heading-level\": tagName,\n\t\t\ttitle: title,\n\t\t\ttext: \"\",\n\t\t\tlist: [],\n\t\t\ttags: tags\n\t\t})});\n\t\tthis.currentTiddler = title;\n\t\tthis.containerStack.push(title);\n\t\tthis.processNodeList(domNode.childNodes);\n\t\tthis.containerStack.pop();\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/heading.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/image.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/image.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing img nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processImageNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 1 && tagName === \"img\") {\n\t\tvar src = domNode.getAttribute(\"src\");\n\t\tif(src) {\n\t\t\tvar containerTitle = this.getTopContainer(),\n\t\t\t\tcontainerTiddler = this.getTiddler(containerTitle),\n\t\t\t\ttitle, tiddler = {\n\t\t\t\t\t\"toc-type\": \"image\"\n\t\t\t\t};\n\t\t\tif(src.substr(0,5) === \"data:\") {\n\t\t\t\tvar parts = src.toString().substr(5).split(\";base64,\");\n\t\t\t\ttiddler.type = parts[0];\n\t\t\t\ttiddler.text = parts[1];\n\t\t\t\tvar contentTypeInfo = $tw.config.contentTypeInfo[tiddler.type] || {extension: \"\"};\n\t\t\t\ttitle = this.makeUniqueTitle(\"image \" + containerTitle) + contentTypeInfo.extension;\n\t\t\t\ttiddler.title = title;\n\t\t\t\tthis.addTiddler(tiddler);\n\t\t\t} else {\n\t\t\t\ttitle = $tw.utils.resolvePath(src,this.baseTiddlerTitle);\n\t\t\t}\n\t\t\tswitch(containerTiddler[\"toc-type\"]) {\n\t\t\t\tcase \"document\":\n\t\t\t\t\t// Make the image be the next child of the document\n\t\t\t\t\tthis.addToList(containerTitle,title);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"heading\":\n\t\t\t\t\t// Make the image be the older sibling of the heading\n\t\t\t\t\tvar parentTitle = this.parentStack[this.parentStack.length - 2].title;\n\t\t\t\t\tthis.insertBeforeListItem(parentTitle,title,containerTitle);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"paragraph\":\n\t\t\t\t\t// Make the image be the older sibling of the paragraph\n\t\t\t\t\tvar parentTitle = this.parentStack[this.parentStack.length - 1].title;\n\t\t\t\t\tthis.insertBeforeListItem(parentTitle,title,containerTitle);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"item\":\n\t\t\t\t\t// Create a new older sibling item to contain the image\n\t\t\t\t\tvar parentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\t\t\t\titemTitle = this.makeUniqueTitle(\"image-item-wrapper \" + containerTitle),\n\t\t\t\t\t\titemTiddler = {\n\t\t\t\t\t\t\ttitle: itemTitle,\n\t\t\t\t\t\t\t\"toc-type\": \"item\",\n\t\t\t\t\t\t\tlist: [title],\n\t\t\t\t\t\t\ttext: \"[img[\" + title + \"]]\"\n\t\t\t\t\t\t};\n\t\t\t\t\tthis.addTiddler(itemTiddler);\n\t\t\t\t\tthis.insertBeforeListItem(parentTitle,itemTitle,containerTitle);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// this.appendToCurrentContainer(\"[img[\" + title + \"]]\");\n\t\t\treturn true;\n\t\t}\n\t} \n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/image.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/item.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/item.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing list item nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processListItemNode = function(domNode,tagName) {\n\tvar text = $tw.utils.htmlEncode(domNode.textContent);\n\tif(domNode.nodeType === 1 && tagName === \"li\") {\n\t\t// if(!this.isBlank(text)) {\n\t\t\tvar title = this.makeUniqueTitle(\"list-item \" + text),\n\t\t\t\tparentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\t\ttags = [];\n\t\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t\t}\n\t\t\tthis.addToList(parentTitle,title);\n\t\t\tthis.addTiddler({\n\t\t\t\t\"toc-type\": \"item\",\n\t\t\t\ttitle: title,\n\t\t\t\ttext: \"\",\n\t\t\t\tlist: [],\n\t\t\t\ttags: tags\n\t\t\t});\n\t\t\tthis.currentTiddler = title;\n\t\t\tthis.containerStack.push(title);\n\t\t\t// this.containerStack.push(\"Just testing\" + new Date());\n\t\t\tthis.processNodeList(domNode.childNodes);\n\t\t\tthis.containerStack.pop();\n\t\t\treturn true;\n\t\t// }\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/item.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/list.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/list.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing list nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processListNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 1 && (tagName === \"ul\" || tagName === \"ol\")) {\n\t\tvar title = this.makeUniqueTitle(\"list \" + tagName),\n\t\t\tparentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\ttags = [];\n\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t}\n\t\tthis.addToList(parentTitle,title);\n\t\tthis.parentStack.push({type: tagName, title: this.addTiddler({\n\t\t\t\"toc-type\": \"list\",\n\t\t\t\"toc-list-type\": tagName,\n\t\t\t\"toc-list-filter\": \"[list<currentTiddler>!has[draft.of]]\",\n\t\t\ttext: \"\",\n\t\t\ttitle: title,\n\t\t\tlist: [],\n\t\t\ttags: tags\n\t\t})});\n\t\tthis.currentTiddler = title;\n\t\tthis.processNodeList(domNode.childNodes);\n\t\tthis.parentStack.pop();\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/list.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/paragraph.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/paragraph.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing paragraph nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processParagraphNode = function(domNode,tagName) {\n\tvar text = $tw.utils.htmlEncode(domNode.textContent);\n\tif(domNode.nodeType === 1 && tagName === \"p\") {\n\t\tif(!this.isBlank(text)) {\n\t\t\tvar parentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\t\ttags = [],\n\t\t\t\ttitle = this.makeUniqueTitle(\"paragraph \" + text);\n\t\t\tif(domNode.className && domNode.className && domNode.className.trim() !== \"\") {\n\t\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t\t}\n\t\t\tthis.addToList(parentTitle,this.addTiddler({\n\t\t\t\t\"toc-type\": \"paragraph\",\n\t\t\t\ttitle: title,\n\t\t\t\ttext: \"\",\n\t\t\t\ttags: tags\n\t\t\t}));\n\t\t\tthis.currentTiddler = title;\n\t\t\tthis.containerStack.push(title);\n\t\t\tthis.processNodeList(domNode.childNodes);\n\t\t\tthis.containerStack.pop();\n\t\t\treturn true;\n\t\t}\n\t} \n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/paragraph.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/term.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/term.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing term nodes in definition lists\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processTermNode = function(domNode,tagName) {\n\tvar text = $tw.utils.htmlEncode(domNode.textContent);\n\tif(domNode.nodeType === 1 && tagName === \"dt\") {\n\t\t// if(!this.isBlank(text)) {\n\t\t\tvar title = this.makeUniqueTitle(\"term \" + text),\n\t\t\t\tparentTitle = this.parentStack[this.parentStack.length - 1].title,\n\t\t\t\ttags = [];\n\t\t\tif(domNode.className && domNode.className.trim() !== \"\") {\n\t\t\t\ttags = tags.concat(domNode.className.split(\" \"));\n\t\t\t}\n\t\t\tthis.addToList(parentTitle,title);\n\t\t\tthis.addTiddler({\n\t\t\t\t\"toc-type\": \"term\",\n\t\t\t\ttitle: title,\n\t\t\t\ttext: \"\",\n\t\t\t\tlist: [],\n\t\t\t\ttags: tags\n\t\t\t});\n\t\t\tthis.currentTiddler = title;\n\t\t\tthis.containerStack.push(title);\n\t\t\t// this.containerStack.push(\"Just testing\" + new Date());\n\t\t\tthis.processNodeList(domNode.childNodes);\n\t\t\tthis.containerStack.pop();\n\t\t\treturn true;\n\t\t// }\n\t}\n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/term.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/slicers/text.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/slicers/text.js\ntype: application/javascript\nmodule-type: slicer\n\nHandle slicing text nodes\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.processTextNode = function(domNode,tagName) {\n\tif(domNode.nodeType === 3) {\n\t\tthis.appendToCurrentContainer($tw.utils.htmlEncode(domNode.textContent));\n\t\treturn true;\n\t} \n\treturn false;\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/slicers/text.js","type":"application/javascript","module-type":"slicer"},"$:/plugins/tiddlywiki/text-slicer/modules/startup/slicer-startup.js":{"text":"/*\\\ntitle: $:/plugins/tiddlywiki/text-slicer/modules/startup/slicer-startup.js\ntype: application/javascript\nmodule-type: startup\n\nSetup the root widget event handlers\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar textSlicer = require(\"$:/plugins/tiddlywiki/text-slicer/modules/slicer.js\");\n\n// Export name and synchronous status\nexports.name = \"slicer\";\nexports.platforms = [\"browser\"];\nexports.after = [\"startup\"];\nexports.synchronous = true;\n\n// Install the root widget event handlers\nexports.startup = function() {\n\t// Check xmldom is installed\n\tif(!$tw.utils.hop($tw.modules.titles,\"$:/plugins/tiddlywiki/xmldom/dom-parser\")) {\n\t\t// Make a logger\n\t\tvar logger = new $tw.utils.Logger(\"text-slicer\");\n\t\tlogger.alert(\"The plugin 'text-slicer' requires the 'xmldom' plugin to be installed\");\n\t}\n\t// Add tm-slice-tiddler event handler\n\t$tw.rootWidget.addEventListener(\"tm-slice-tiddler\",function(event) {\n\t\tvar slicer = new textSlicer.Slicer({\n\t\t\tsourceTiddlerTitle: event.param,\n\t\t\tbaseTiddlerTitle: event.paramObject && event.paramObject.destTitle,\n\t\t\twiki: $tw.wiki\n\t\t});\n\t\t$tw.wiki.addTiddlers(slicer.getTiddlers());\n\t});\n};\n\n})();\n","title":"$:/plugins/tiddlywiki/text-slicer/modules/startup/slicer-startup.js","type":"application/javascript","module-type":"startup"},"$:/plugins/tiddlywiki/text-slicer/readme":{"title":"$:/plugins/tiddlywiki/text-slicer/readme","text":"//''This plugin is under active development, and is subject to change in the future''. It is currently only intended for advanced users. The tools are in the early stages of development, and likely to need some customisation to do what you need.//\n\nThis plugin contains tools to help slice up long texts into individual tiddlers.\n"},"$:/plugins/tiddlywiki/text-slicer/styles":{"title":"$:/plugins/tiddlywiki/text-slicer/styles","tags":"$:/tags/Stylesheet","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\n\n.tc-document-preview-column {\n\tposition: fixed;\n\toverflow-y: auto;\n\toverflow-x: visible;\n\t-webkit-overflow-scrolling: touch;\n    background-color: <<colour page-background>>;\n\tright: auto;\n\tleft: 0;\n\ttop: 0;\n\tbottom: 0;\n\twidth: {{$:/themes/tiddlywiki/vanilla/metrics/storyleft}};\n\tfont-size: 0.9em;\n}\n\n.tc-sliced-document-title {\n\tfont-size: 1.7em;\n}\n\n.tc-slice-note {\n    color: #800;\n    padding: 4px 4px 4px 4px;\n    border: 1px solid #feed77;\n    background: #feed77;\n    background: -webkit-gradient(linear,left top,left bottom,color-stop(0%,#dede80),color-stop(7%,#feed77),color-stop(92%,#feed77),color-stop(100%,#dede80));\n    background: -webkit-linear-gradient(72deg,rgba(255, 255, 255, 0.5) 8%,rgba(255, 255, 255, 0.1) 80%), -webkit-linear-gradient(top,#dede80 0,#feed77 7%,#feed77 92%,#dede80 100%);\n    background: -moz-linear-gradient(72deg,rgba(255, 255, 255, 0.5) 8%,rgba(255, 255, 255, 0.1) 80%), -moz-linear-gradient(top,#dede80 0,#feed77 7%,#feed77 92%,#dede80 100%);\n    background: -o-linear-gradient(72deg,rgba(255, 255, 255, 0.5) 8%,rgba(255, 255, 255, 0.1) 80%), -o-linear-gradient(top,#dede80 0,#feed77 7%,#feed77 92%,#dede80 100%);\n    background: -ms-linear-gradient(72deg,rgba(255, 255, 255, 0.5) 8%,rgba(255, 255, 255, 0.1) 80%), -ms-linear-gradient(top,#dede80 0,#feed77 7%,#feed77 92%,#dede80 100%);\n    background: linear-gradient(72deg,rgba(255, 255, 255, 0.5) 8%,rgba(255, 255, 255, 0.1) 80%), linear-gradient(top,#dede80 0,#feed77 7%,#feed77 92%,#dede80 100%);\n\t<<box-shadow \"1px 1px 6px rgba(0,0,0,0.4)\">>\n}\n\n.tc-document-preview-column .tc-sliced-document-header {\n\tmargin-left: 24px;\n}\n\n.tc-document-preview-column .tc-sliced-document {\n\tmargin-bottom: 3px;\n}\n\n.tc-view-template-document-tiddler-wrapper,\n.tc-edit-template-document-tiddler-wrapper {\n    border-top: 2px solid #D6A2A2;\n    margin-left: -42px;\n    margin-right: -42px;\n    margin-bottom: -42px;\n    padding-left: 42px;\n    padding-right: 42px;\n    background: #FFE3E3;\n    padding-bottom: 10px;\n}\n\n.tc-edit-template-document-tiddler-wrapper {\n\tbackground: #A3A3D7;\n}\n\ndiv.tc-view-template-document-tiddler-heading a,\ndiv.tc-edit-template-document-tiddler-heading a {\n\tborder: 1px solid #D6A2A2;\n\tbackground: #fff;\n\tborder-radius: 16px;\n    padding: 0px 4px 0px 4px;\n    margin: 2px 4px 2px 4px;\n    white-space: nowrap;\n    display: inline-block;\n}\n\ndiv.tc-view-template-document-tiddler-heading a:hover,\ndiv.tc-edit-template-document-tiddler-heading a:hover {\n\tborder: 1px solid <<colour background>>;\n\ttext-decoration: none;\n\tcolor: <<colour background>>;\n\tbackground: <<colour foreground>>;\n}\n\n.tc-view-template-document-tiddler-heading-icon,\n.tc-edit-template-document-tiddler-heading-icon {\n\twidth: 42px;\n\ttext-align: center;\n    margin-left: -42px;\n    margin-right: -42px;\n    position: absolute;\n}\n\n.tc-view-template-document-tiddler-subheading,\n.tc-edit-template-document-tiddler-subheading {\n\tfont-size: 0.7em;\n\tfont-weight: bold;\n\tcolor: <<colour muted-foreground>>;\n}\n\n.tc-view-template-document-tiddler-heading-icon svg,\n.tc-edit-template-document-tiddler-heading-icon svg {\n\tfill: <<colour background>>;\t\n}\n\n.tc-view-template-document-tiddler {\n\tfont-size: 0.9em;\n}\n\n.tc-document-tiddler {\n\tfont-family: Georgia, Times, 'Times New Roman', serif;\n}\n\n.tc-text-slicer-rename input {\n\tdisplay: block;\n\twidth: 100%;\n}\n\n.tc-document-tiddler-link {\n\tcursor: pointer;\n}\n\n.tc-document-tiddler-link:hover {\n    background: <<color background>>;\n}\n\n.tc-document-tiddler-toolbar {\n\tposition: absolute;\n\twidth: 24px;\n\ttext-align: center;\n}\n\n.tc-document-preview-column .tc-sliced-document-body {\n\tmargin-left: 24px;\n}\n\n.tc-document-preview-column .tc-document-tiddler-toolbar {\n\tmargin-left: -24px;\n}\n\n.tc-table-of-contents .tc-slice-toolbar button {\n\tcolor: inherit;\n\tbackground-color: inherit;\n}\n\n.tc-tiddler-frame .tc-document-tiddler-toolbar {\n    left: 0;\n    width: 42px;\n}\n\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/def-list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/def-list","text":"\\define body()\n<dl>\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler\"/>\n</$list>\n</dl>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/definition":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/definition","text":"\\define body()\n<$link tag=\"dd\" class=\"tc-document-tiddler-link\">\n\n<$transclude/>\n\n</$link>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/document":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/document","text":"\\define config-document-status()\n$:/state/plugins/tiddlywiki/text-slicer/show-preview-document/$(tv-heading-status-config-prefix)$/$(currentTiddler)$\n\\end\n\n\\define config-show-toolbar()\n$:/state/plugins/tiddlywiki/text-slicer/show-toolbar/$(currentTiddler)$\n\\end\n\n\\define config-show-metadata()\n$:/state/plugins/tiddlywiki/text-slicer/show-metadata/$(currentTiddler)$\n\\end\n\n\\define config-heading-status()\n$:/state/plugins/tiddlywiki/text-slicer/heading-status/$(currentTiddler)$\n\\end\n\n\\define body()\n<$set name=\"tv-heading-status-config-title\" value=<<config-heading-status>>>\n<$set name=\"tv-show-toolbar\" value={{$(config-show-toolbar)$}}>\n<div class=\"tc-sliced-document\">\n<div class=\"tc-sliced-document-header\">\n<div class=\"tc-document-tiddler-toolbar\">\n<$reveal type=\"nomatch\" state=<<config-document-status>> text=\"close\" default=\"open\">\n<$button set=<<config-document-status>> setTo=\"close\" class=\"tc-btn-invisible\">\n{{$:/core/images/down-arrow}}\n</$button>\n</$reveal>\n<$reveal type=\"match\" state=<<config-document-status>> text=\"close\" default=\"open\">\n<$button set=<<config-document-status>> setTo=\"open\" class=\"tc-btn-invisible\">\n{{$:/core/images/right-arrow}}\n</$button>\n</$reveal>\n</div>\n<h1 class=\"tc-sliced-document-title\">''Document'': <$link><$view field=\"title\"/></$link></h1>\n</div>\n<$reveal type=\"nomatch\" state=<<config-document-status>> text=\"close\" default=\"open\">\n{{||$:/plugins/tiddlywiki/text-slicer/ui/document/header}}\n<div class='tc-sliced-document-body'>\n<$set name=\"tv-show-toolbar\" value={{$(config-show-toolbar)$}}>\n<$set name=\"tv-exclude-filter\" value={{!!toc-exclude-filter}}>\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler\"/>\n</$set>\n</$set>\n</div>\n</$reveal>\n</div>\n</$set>\n</$set>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/heading":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/heading","text":"\\define config-heading-status()\n$(tv-heading-status-config-title)$/$(tv-heading-status-config-prefix)$/$(currentTiddler)$\n\\end\n\n\\define body(level:\"h1\")\n<$set name=\"tv-heading-status-config-title\" value=<<config-heading-status>>>\n<div class=\"tc-document-tiddler\">\n<div class=\"tc-document-tiddler-toolbar\">\n<$reveal type=\"nomatch\" state=<<tv-heading-status-config-title>> text=\"close\" default=<<tv-default-heading-state>>>\n<$button set=<<tv-heading-status-config-title>> setTo=\"close\" class=\"tc-btn-invisible\">\n{{$:/core/images/down-arrow}}\n</$button>\n</$reveal>\n<$reveal type=\"match\" state=<<tv-heading-status-config-title>> text=\"close\" default=<<tv-default-heading-state>>>\n<$button set=<<tv-heading-status-config-title>> setTo=\"open\" class=\"tc-btn-invisible\">\n{{$:/core/images/right-arrow}}\n</$button>\n</$reveal>\n</div>\n<$link tag=\"$level$\" class=\"tc-document-tiddler-link\">\n<$transclude/>\n</$link>\n<$reveal type=\"nomatch\" state=<<tv-heading-status-config-title>> text=\"close\" default=<<tv-default-heading-state>>>\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler\"/>\n</$reveal>\n</div>\n</$set>\n\\end\n\n<$macrocall $name=\"body\" level={{!!toc-heading-level}}/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/image":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/image","text":"\\define body()\n<$link tag=\"div\" class=\"tc-document-tiddler-link tc-document-tiddler\">\n\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n<$transclude/>\n\n</$list>\n\n</$link>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/item":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/item","text":"\\define body()\n<$link tag=\"li\" class=\"tc-document-tiddler-link\">\n\n<$transclude/>\n\n</$link>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/list","text":"\\define body(type:\"ul\")\n<$type$>\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler\"/>\n</$list>\n</$type$>\n\\end\n\n<$macrocall $name=\"body\" type={{!!toc-list-type}}/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/note":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/note","text":"\\define body()\n<div class=\"tc-slice-note\">\n\n<$link tag=\"div\" class=\"tc-document-tiddler-link tc-document-tiddler\">\n\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n<$transclude/>\n\n</$list>\n\n</$link>\n\n</div>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/paragraph":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/paragraph","text":"\\define body()\n<$link tag=\"div\" class=\"tc-document-tiddler-link tc-document-tiddler\">\n\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n<$transclude/>\n\n</$list>\n\n</$link>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/term":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/term","text":"\\define body()\n<$link tag=\"dt\" class=\"tc-document-tiddler-link\">\n\n<$transclude/>\n\n</$link>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler","text":"<$list filter=\"[<tv-show-toolbar>prefix[yes]]\" variable=\"hasToolbar\">\n{{||$:/plugins/tiddlywiki/text-slicer/ui/tiddler/toolbar}}\n</$list>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"document\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/document\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"heading\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/heading\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"paragraph\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/paragraph\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"note\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/note\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"list\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/list\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/item\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"image\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/image\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"def-list\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/def-list\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"term\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/term\" mode=\"block\"/>\n</$reveal>\n\n<$reveal type=\"match\" state=\"!!toc-type\" text=\"definition\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/definition\" mode=\"block\"/>\n</$reveal>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/def-list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/def-list","text":"\\define body()\n<dl>\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler\"/>\n</$list>\n</dl>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/definition":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/definition","text":"\\define body()\n<dd>\n\n<$transclude/>\n\n</dd>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/document":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/document","text":"<$set name=\"tv-exclude-filter\" value={{!!toc-exclude-filter}}>\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler\"/>\n\n</$set>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/heading":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/heading","text":"\\define body(level:\"h1\")\n<$level$>\n<$transclude/>\n</$level$>\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler\"/>\n\\end\n\n<$macrocall $name=\"body\" level={{!!toc-heading-level}}/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/image":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/image","text":"<$transclude/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/item":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/item","text":"\\define body()\n<li>\n\n<$transclude/>\n\n</li>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/list","text":"\\define body(type:\"ul\")\n<$type$>\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler\"/>\n</$list>\n</$type$>\n\\end\n\n<$macrocall $name=\"body\" type={{!!toc-list-type}}/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/note":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/note","text":"<!-- Don't display notes in plain mode -->\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/paragraph":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/paragraph","text":"\\define body()\n<div>\n\n<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n<$transclude/>\n\n</$list>\n\n</div>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/term":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/term","text":"\\define body()\n<dt>\n\n<$transclude/>\n\n</dt>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/plain/tiddler","text":"<$vars toc-type={{!!toc-type}}>\n\n<$list filter=\"[<toc-type>prefix[document]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/document\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[heading]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/heading\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[paragraph]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/paragraph\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[note]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/note\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[list]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/list\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[item]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/item\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[image]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/image\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[def-list]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/def-list\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[term]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/term\" mode=\"block\"/>\n</$list>\n\n<$list filter=\"[<toc-type>prefix[definition]]\" variable=\"item\">\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/definition\" mode=\"block\"/>\n</$list>\n\n</$vars>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/def-list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/def-list","text":"<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n`<dl class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n\n`</dl>`\n\n</$list>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/definition":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/definition","text":"`<dd class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$transclude/>\n\n`</dd>`\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/document":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/document","text":"<$set name=\"tv-exclude-filter\" value={{!!toc-exclude-filter}}>\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n\n</$set>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/heading":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/heading","text":"`<`<$text text={{!!toc-heading-level}}/>` class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$view field=\"text\" format=\"htmlencodedplainwikified\"/>\n\n`</`<$text text={{!!toc-heading-level}}/>`>`\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes","text":"<$list filter=\"[all[current]tags[]addprefix[$:/_DocumentTags/]has[title]]\"><$view field=\"css-class\"/> </$list>"},"$:/plugins/tiddlywiki/text-slicer/templates/static/image":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/image","text":"<$reveal state=\"!!_canonical_uri\" type=\"match\" text=\"\">\n\n`<img src=\"data:`<$view format=\"text\" field=\"type\"/>`;base64,`<$view format=\"text\" field=\"text\"/>`\" class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n</$reveal>\n\n<$reveal state=\"!!_canonical_uri\" type=\"nomatch\" text=\"\">\n\n`<img src=\"`<$text text=<<tv-external-image-path>>/><$view field=\"title\" format=\"doubleurlencoded\"/>`\" class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n</$reveal>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/item":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/item","text":"`<li class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$transclude/>\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n\n`</li>`\n\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/list":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/list","text":"<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n`<`<$text text={{!!toc-list-type}}/>` class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$list filter={{!!toc-list-filter}} template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n\n`</`<$text text={{!!toc-list-type}}/>`>`\n\n</$list>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/note":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/note","text":"<!-- Don't display notes in static mode -->\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/paragraph":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/paragraph","text":"<$list filter=\"\"\"[all[current]] $(tv-exclude-filter)$ +[limit[1]]\"\"\" variable=\"item\">\n\n`<p class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$view field=\"text\" format=\"htmlencodedplainwikified\"/>\n\n`</p>`\n\n</$list>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/term":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/term","text":"`<dt class=\"`{{||$:/plugins/tiddlywiki/text-slicer/templates/static/helpers/classes}}`\">`\n\n<$transclude/>\n\n`</dt>`\n\n<$list filter=\"[list<currentTiddler>!has[draft.of]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler\"/>\n"},"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler":{"title":"$:/plugins/tiddlywiki/text-slicer/templates/static/tiddler","text":"<$vars toc-type={{!!toc-type}}>\n\n<$list filter=\"[<toc-type>prefix[document]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/document\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[heading]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/heading\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[paragraph]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/paragraph\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[note]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/note\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[list]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/list\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[item]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/item\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[image]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/image\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[def-list]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/def-list\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[term]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/term\" mode=\"block\"/>\n\n</$list>\n\n<$list filter=\"[<toc-type>prefix[definition]]\" variable=\"item\">\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/static/definition\" mode=\"block\"/>\n\n</$list>\n\n</$vars>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/document/header":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/document/header","text":"\\define metadatafield()\n<tr>\n<td>\n''<$transclude tiddler=<<listItem>> field=\"caption\"/>''\n</td>\n<td>\n<$reveal type=\"match\" state=\"\"\"$(listItem)$!!field-type\"\"\" text=\"string\">\n<$edit-text field={{$(listItem)$!!field}}/>\n</$reveal>\n<$reveal type=\"match\" state=\"\"\"$(listItem)$!!field-type\"\"\" text=\"list\">\n<$edit-text tag=\"textarea\" field={{$(listItem)$!!field}}/>\n</$reveal>\n</td>\n</tr>\n\\end\n\n<div class=\"tc-sliced-document-header\">\n\n''Exclude filter'': <$edit-text field=\"toc-exclude-filter\"/>\n\n<$checkbox tiddler=<<config-show-toolbar>> field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> Show toolbar </$checkbox> <$checkbox tiddler=<<config-show-metadata>> field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> Show metadata</$checkbox> <$button>\n<$action-sendmessage $message=\"tm-open-window\" $param=<<currentTiddler>> template=\"$:/plugins/tiddlywiki/text-slicer/templates/plain/document\"/>\nView document\n</$button>\n\n<$reveal state=<<config-show-metadata>> default=\"no\" type=\"match\" text=\"yes\">\n<table>\n<tbody>\n<$list filter=\"[all[system+tiddlers]tag[$:/tags/DocumentMetaData]]\" variable=\"listItem\">\n<<metadatafield>>\n</$list>\n</tbody>\n</table>\n</$reveal>\n\n\n</div>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/edit-template-segment":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/edit-template-segment","tags":"$:/tags/EditTemplate","text":"\\define edit-field(name,tag:\"input\")\n$name$:\n\n<$edit-text field=\"\"\"$name$\"\"\" tag=\"$tag$\" class=\"tc-edit-texteditor\"/>\n\\end\n\n<$reveal type=\"nomatch\" state=\"!!toc-type\" text=\"\">\n\n<div class=\"tc-edit-template-document-tiddler-wrapper\">\n\n<div class=\"tc-edit-template-document-tiddler-heading\">\n\n<div class=\"tc-edit-template-document-tiddler-heading-icon\">\n\n{{$:/core/images/file}}\n\n</div>\n\n<div class=\"tc-edit-template-document-tiddler-subheading\">\n\n<$view field=\"toc-type\"/>\n\n</div>\n\n<<edit-field \"list\" tag:\"textarea\">>\n\n</div>\n\n</div>\n\n</$reveal>\n\n"},"$:/plugins/tiddlywiki/text-slicer/filters/Orphans":{"title":"$:/plugins/tiddlywiki/text-slicer/filters/Orphans","tags":"$:/tags/Filter","filter":"[has[toc-type]] -[toc-type[document]list-children[]]","description":"[Text-slicer] Tiddlers that are not part of any document","text":""},"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/empty":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/empty","text":"<div class=\"tc-sliced-document-header\">\n\nCreate a document by slicing an existing tiddler\n\n---\n\n[[Help|$:/plugins/tiddlywiki/text-slicer/docs]]\n\n</div>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/multiple":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/multiple","text":"Show document: <$select tiddler=\"$:/plugins/tiddlywiki/text-slicer/config/currentDocument\">\n<$list filter=\"[toc-type[document]!has[draft.of]sort[title]]\">\n<option value=<<currentTiddler>>><$view field=\"title\"/></option>\n</$list>\n</$select>\n\n<$tiddler tiddler={{$:/plugins/tiddlywiki/text-slicer/config/currentDocument}}>\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/document\"/>\n\n</$tiddler>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/single":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/single","text":"<$list filter=\"[toc-type[document]!has[draft.of]sort[title]limit[1]]\" template=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/document\"/>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/preview-column":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/preview-column","tags":"$:/tags/AboveStory","text":"<$scrollable fallthrough=\"no\" class=\"tc-document-preview-column\">\n\n<$vars\n\ttv-default-heading-state=\"open\"\n>\n\n<$list filter=\"[toc-type[document]!has[draft.of]sort[title]limit[1]]\" emptyMessage={{$:/plugins/tiddlywiki/text-slicer/ui/preview-column/empty}}>\n\n<$list filter=\"[toc-type[document]!has[draft.of]sort[title]butfirst[1]limit[1]]\" emptyMessage={{$:/plugins/tiddlywiki/text-slicer/ui/preview-column/single}} template=\"$:/plugins/tiddlywiki/text-slicer/ui/preview-column/multiple\"/>\n\n</$list>\n\n</$vars>\n\n</$scrollable>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/slice-toolbar-button":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/slice-toolbar-button","tags":"$:/tags/ViewToolbar","list-before":"$:/core/ui/Buttons/edit","caption":"{{$:/plugins/tiddlywiki/text-slicer/images/text-slicer-icon}} Slice tiddler","description":"Slice this tiddler by headings and lists","text":"\\define hint()\nSlice this tiddler by headings and lists\n\\end\n\n<$button message=\"tm-slice-tiddler\" param=<<currentTiddler>> tooltip=<<hint>> aria-label=<<hint>> class=<<tv-config-toolbar-class>>>\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\n{{$:/plugins/tiddlywiki/text-slicer/images/text-slicer-icon}}\n</$list>\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\n<span class=\"tc-btn-text\">Slice tiddler</span>\n</$list>\n</$button>"},"$:/plugins/tiddlywiki/text-slicer/ui/tiddler/toolbar/title":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/tiddler/toolbar/title","tags":"$:/tags/TextSlicerToolbar","text":"\\define renameProxyTitle()\n$:/state/plugins/tiddlywiki/text-slicer/rename-$(currentTiddler)$\n\\end\n\n\\define body()\n<div class=\"tc-text-slicer-rename\">\n<$edit-text tag=\"input\" tiddler=<<renameProxyTitle>> placeholder=\"Rename\" default=<<currentTiddler>>/>\n<$reveal type=\"nomatch\" state=\"\"\"$(renameProxyTitle)$\"\"\" text=<<currentTiddler>> default=<<currentTiddler>>>\n<$button>\n<$action-deletetiddler $tiddler=<<renameProxyTitle>>/>\ncancel\n</$button>\n<$button>\n<$action-sendmessage $message=\"tm-rename-tiddler\" from=<<currentTiddler>> to={{$(renameProxyTitle)$}}/>\n<$action-deletetiddler $tiddler=<<renameProxyTitle>>/>\nrename\n</$button>\n<$set name=\"proxy-title\" value={{$(renameProxyTitle)$}}>\n<$list filter=\"\"\"[<proxy-title>is[tiddler]]\"\"\">\nWarning: tiddler already exists\n</$list>\n</$set>\n</$reveal>\n</div>\n\\end\n\n<<body>>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/tiddler/toolbar":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/tiddler/toolbar","text":"<div class=\"tc-slice-toolbar\">\n<$list filter=\"[all[shadows+tiddlers]tag[$:/tags/TextSlicerToolbar]!has[draft.of]]\" variable=\"listItem\"><$transclude tiddler=<<listItem>>/></$list>\n</div>\n"},"$:/plugins/tiddlywiki/text-slicer/ui/view-template-segment":{"title":"$:/plugins/tiddlywiki/text-slicer/ui/view-template-segment","tags":"$:/tags/ViewTemplate","text":"\\define config-heading-status()\n$:/state/plugins/tiddlywiki/text-slicer/heading-status/$(currentTiddler)$\n\\end\n\n<$reveal type=\"nomatch\" state=<<folded-state>> text=\"hide\" retain=\"yes\" animate=\"yes\">\n\n<$reveal type=\"nomatch\" state=\"!!toc-type\" text=\"\">\n\n<div class=\"tc-view-template-document-tiddler-wrapper\">\n\n<div class=\"tc-view-template-document-tiddler-heading\">\n\n<div class=\"tc-view-template-document-tiddler-heading-icon\">\n\n{{$:/core/images/file}}\n\n</div>\n\n<div class=\"tc-view-template-document-tiddler-subheading\">\n\n<$view field=\"toc-type\"/>\n\n</div>\n\nParents: <$list filter=\"[all[current]listed[]!is[system]]\" emptyMessage=\"None\">\n<$link><$view field=\"title\"/></$link>\n</$list>\n\n</div>\n\n<div class=\"tc-view-template-document-tiddler\">\n\n<$vars\n\ttv-default-heading-state=\"close\"\n\ttv-heading-status-config-prefix=\"view-template\"\n\ttv-heading-status-config-title=<<config-heading-status>>\n>\n\n<$transclude tiddler=\"$:/plugins/tiddlywiki/text-slicer/templates/interactive/tiddler\"/>\n\n</$vars>\n\n</div>\n\n</div>\n\n</$reveal>\n\n</$reveal>\n"}}}