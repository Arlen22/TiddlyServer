{"title":"$:/plugins/tiddlywiki/cecily","description":"Zoomable storyview (Cecily)","author":"JeremyRuston","core-version":">=5.0.0","list":"readme","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/cecily/cecily.js":{"title":"$:/plugins/tiddlywiki/cecily/cecily.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/cecily/cecily.js\r\ntype: application/javascript\r\nmodule-type: storyview\r\n\r\nPositions tiddlers on a 2D map\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar CecilyStoryView = function(listWidget) {\r\n\tvar self = this;\r\n\tthis.listWidget = listWidget;\r\n\t// Load the map\r\n\tthis.loadMap();\r\n\t// Position the existing tiddlers\r\n\t$tw.utils.each(this.listWidget.children,function(itemWidget,index) {\r\n\t\tvar domNode = itemWidget.findFirstDomNode();\r\n\t\tdomNode.style.position = \"absolute\";\r\n\t\tvar title = itemWidget.parseTreeNode.itemTitle;\r\n\t\tself.positionTiddler(title,domNode);\r\n\t});\r\n};\r\n\r\nCecilyStoryView.prototype.navigateTo = function(historyInfo) {\r\n\tvar listElementIndex = this.listWidget.findListItem(0,historyInfo.title);\r\n\tif(listElementIndex === undefined) {\r\n\t\treturn;\r\n\t}\r\n\tvar listItemWidget = this.listWidget.children[listElementIndex],\r\n\t\ttargetElement = listItemWidget.findFirstDomNode();\r\n\t// Scroll the node into view\r\n\tthis.listWidget.dispatchEvent({type: \"tm-scroll\", target: targetElement});\r\n};\r\n\r\nCecilyStoryView.prototype.insert = function(widget) {\r\n\tvar domNode = widget.findFirstDomNode(),\r\n\t\tduration = $tw.utils.getAnimationDuration();\r\n\t// Make the newly inserted node position absolute\r\n\t$tw.utils.setStyle(domNode,[\r\n\t\t{position: \"absolute\"},\r\n\t\t{transition: \"\"},\r\n\t\t{opacity: \"0.0\"}\r\n\t]);\r\n\t// Position it\r\n\tvar title = widget.parseTreeNode.itemTitle;\r\n\tthis.positionTiddler(title,domNode);\r\n\t$tw.utils.forceLayout(domNode);\r\n\t// Animate it in\r\n\t$tw.utils.setStyle(domNode,[\r\n\t\t{transition: \"opacity \" + duration + \"ms ease-out\"},\r\n\t\t{opacity: \"1.0\"}\r\n\t]);\r\n};\r\n\r\nCecilyStoryView.prototype.remove = function(widget) {\r\n\tvar targetElement = widget.findFirstDomNode(),\r\n\t\tduration = $tw.utils.getAnimationDuration();\r\n\t// Remove the widget at the end of the transition\r\n\tsetTimeout(function() {\r\n\t\twidget.removeChildDomNodes();\r\n\t},duration);\r\n\t// Animate the closure\r\n\t$tw.utils.setStyle(targetElement,[\r\n\t\t{transition: \"none\"},\r\n\t\t{opacity: \"1.0\"}\r\n\t]);\r\n\t$tw.utils.forceLayout(targetElement);\r\n\t$tw.utils.setStyle(targetElement,[\r\n\t\t{transition: $tw.utils.roundTripPropertyName(\"transform\") + \" \" + duration + \"ms ease-in-out, \" +\r\n\t\t\t\t\t\"opacity \" + duration + \"ms ease-in-out\"},\r\n\t\t{transform: \"scale(0.01)\"},\r\n\t\t{opacity: \"0.0\"}\r\n\t]);\r\n};\r\n\r\n/*\r\nLoad the current map\r\n*/\r\nCecilyStoryView.prototype.loadMap = function() {\r\n\tthis.map = this.listWidget.wiki.getTiddlerData(this.getMapTiddlerTitle(),{\r\n\t\tpositions: {},\r\n\t\tnewTiddlerPosition: {x: 0, y: 0},\r\n\t\twidth: parseInt(this.listWidget.getAttribute(\"cecily-width\",\"600\"),10)\r\n\t});\r\n};\r\n\r\nCecilyStoryView.prototype.getMapTiddlerTitle = function() {\r\n\treturn this.listWidget.getAttribute(\"cecily-map\",\"$:/TiddlerMap\");\r\n};\r\n\r\n/*\r\nPosition a tiddler according to the map\r\n*/\r\nCecilyStoryView.prototype.positionTiddler = function(title,domNode) {\r\n\tvar pos = this.lookupTiddlerInMap(title,domNode),\r\n\t\tscale = pos.w/domNode.offsetWidth;\r\n\t$tw.utils.setStyle(domNode,[\r\n\t\t{width: this.map.width + \"px\"},\r\n\t\t{transformOrigin: \"0% 0%\"},\r\n\t\t{transform: \"translateX(\" + pos.x + \"px) translateY(\" + pos.y + \"px) scale(\" + scale + \") translateX(-50%) rotate(\" + (pos.r || 0) + \"deg) translateX(50%)\"}\r\n\t]);\r\n};\r\n\r\n// Get the position of a particular tiddler\r\nCecilyStoryView.prototype.lookupTiddlerInMap = function(title,domNode) {\r\n\t// If this is a draft tiddler then look for the position of the original tiddler\r\n\tvar tiddler = this.listWidget.wiki.getTiddler(title);\r\n\tif(tiddler) {\r\n\t\tvar draftOf = tiddler.fields[\"draft.of\"];\r\n\t\tif(draftOf && this.map.positions[draftOf]) {\r\n\t\t\treturn this.map.positions[draftOf];\r\n\t\t}\r\n\t}\r\n\t// Try looking the target tiddler up in the map\r\n\tif(this.map.positions[title]) {\r\n\t\treturn this.map.positions[title];\r\n\t}\r\n\t// If the tiddler wasn't in the map we'll have to compute it\r\n\tvar newPosition;\r\n\tswitch(this.map.positionNew) {\r\n\t\tdefault: // \"right\"\r\n\t\t\tnewPosition = {\r\n\t\t\t\tx: this.map.newTiddlerPosition.x,\r\n\t\t\t\ty: this.map.newTiddlerPosition.y,\r\n\t\t\t\tw: 200,\r\n\t\t\t\th: 200\r\n\t\t\t};\r\n\t\t\tthis.map.newTiddlerPosition.x += newPosition.w * 1.1;\r\n\t\t\tbreak;\r\n\t}\r\n\t// A default position\r\n\tnewPosition = newPosition || {x: 0,y: 0,w: 100,h: 100};\r\n\t// Save the position back to the map\r\n\tthis.map.positions[title] = newPosition;\r\n\treturn newPosition;\r\n};\r\n\r\nexports.cecily = CecilyStoryView;\r\n\r\n})();\r\n","type":"application/javascript","module-type":"storyview"},"$:/plugins/tiddlywiki/cecily/readme":{"title":"$:/plugins/tiddlywiki/cecily/readme","text":"This experimental plugin provides a new story visualisation that displays individual tiddlers as resizable tiles on an infinite canvas.\n\nCecily is based on an earlier plugin for TiddlyWiki Classic: http://jermolene.com/cecily\n\nCecily is currently in the early stages of development with little functionality yet implemented.\n\n[[Source code|https://github.com/Jermolene/TiddlyWiki5/blob/master/plugins/tiddlywiki/cecily]]\r\n"},"$:/core/images/storyview-cecily":{"title":"$:/core/images/storyview-cecily","tags":"$:/tags/Image","text":"<svg class=\"tc-image-storyview-cecily tc-image-button\" width=\"22pt\" height=\"22pt\" viewBox=\"0 0 128 128\">\r\n    <g fill-rule=\"evenodd\">\r\n        <path d=\"M8.00697327,0 C3.58484404,0 0,3.59075293 0,8.00697327 L0,119.993027 C0,124.415156 3.59075293,128 8.00697327,128 L119.993027,128 C124.415156,128 128,124.409247 128,119.993027 L128,8.00697327 C128,3.58484404 124.409247,0 119.993027,0 L8.00697327,0 L8.00697327,0 Z M23.9949725,16 C19.5794711,16 16,19.5776607 16,23.9924054 L16,40.0075946 C16,44.4216782 19.5905136,48 23.9949725,48 L71.0050275,48 C75.4205289,48 79,44.4223393 79,40.0075946 L79,23.9924054 C79,19.5783218 75.4094864,16 71.0050275,16 L23.9949725,16 L23.9949725,16 Z M72.0070969,64 C67.5848994,64 64,67.5881712 64,72.0070969 L64,103.992903 C64,108.415101 67.5881712,112 72.0070969,112 L103.992903,112 C108.415101,112 112,108.411829 112,103.992903 L112,72.0070969 C112,67.5848994 108.411829,64 103.992903,64 L72.0070969,64 L72.0070969,64 Z M24.0034204,80 C19.5832534,80 16,83.5776607 16,87.9924054 L16,104.007595 C16,108.421678 19.5863782,112 24.0034204,112 L38.9965796,112 C43.4167466,112 47,108.422339 47,104.007595 L47,87.9924054 C47,83.5783218 43.4136218,80 38.9965796,80 L24.0034204,80 L24.0034204,80 Z M104,16 C99.581722,16 96,19.5776607 96,23.9924054 L96,40.0075946 C96,44.4216782 99.5907123,48 104,48 C108.418278,48 112,44.4223393 112,40.0075946 L112,23.9924054 C112,19.5783218 108.409288,16 104,16 L104,16 Z\"></path>\r\n    </g>\r\n</svg>"}}}