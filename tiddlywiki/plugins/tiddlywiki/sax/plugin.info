{"title":"$:/plugins/tiddlywiki/sax","description":"Wrapper for sax.js library by Isaac Z. Schlueter","author":"Isaac Z. Schlueter","core-version":">=5.0.0","list":"readme license","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/sax/sax.js":{"text":";(function (sax) { // wrapper for non-node envs\r\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\r\n  sax.SAXParser = SAXParser\r\n  sax.SAXStream = SAXStream\r\n  sax.createStream = createStream\r\n\r\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\r\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\r\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\r\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\r\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\r\n  // large string into write() might have undesirable effects, but this is manageable by\r\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\r\n  // edge case, result in creating at most one complete copy of the string passed in.\r\n  // Set to Infinity to have unlimited buffers.\r\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\r\n\r\n  var buffers = [\r\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\r\n    'procInstName', 'procInstBody', 'entity', 'attribName',\r\n    'attribValue', 'cdata', 'script'\r\n  ]\r\n\r\n  sax.EVENTS = [\r\n    'text',\r\n    'processinginstruction',\r\n    'sgmldeclaration',\r\n    'doctype',\r\n    'comment',\r\n    'opentagstart',\r\n    'attribute',\r\n    'opentag',\r\n    'closetag',\r\n    'opencdata',\r\n    'cdata',\r\n    'closecdata',\r\n    'error',\r\n    'end',\r\n    'ready',\r\n    'script',\r\n    'opennamespace',\r\n    'closenamespace'\r\n  ]\r\n\r\n  function SAXParser (strict, opt) {\r\n    if (!(this instanceof SAXParser)) {\r\n      return new SAXParser(strict, opt)\r\n    }\r\n\r\n    var parser = this\r\n    clearBuffers(parser)\r\n    parser.q = parser.c = ''\r\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\r\n    parser.opt = opt || {}\r\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\r\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\r\n    parser.tags = []\r\n    parser.closed = parser.closedRoot = parser.sawRoot = false\r\n    parser.tag = parser.error = null\r\n    parser.strict = !!strict\r\n    parser.noscript = !!(strict || parser.opt.noscript)\r\n    parser.state = S.BEGIN\r\n    parser.strictEntities = parser.opt.strictEntities\r\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\r\n    parser.attribList = []\r\n\r\n    // namespaces form a prototype chain.\r\n    // it always points at the current tag,\r\n    // which protos to its parent tag.\r\n    if (parser.opt.xmlns) {\r\n      parser.ns = Object.create(rootNS)\r\n    }\r\n\r\n    // mostly just for error reporting\r\n    parser.trackPosition = parser.opt.position !== false\r\n    if (parser.trackPosition) {\r\n      parser.position = parser.line = parser.column = 0\r\n    }\r\n    emit(parser, 'onready')\r\n  }\r\n\r\n  if (!Object.create) {\r\n    Object.create = function (o) {\r\n      function F () {}\r\n      F.prototype = o\r\n      var newf = new F()\r\n      return newf\r\n    }\r\n  }\r\n\r\n  if (!Object.keys) {\r\n    Object.keys = function (o) {\r\n      var a = []\r\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\r\n      return a\r\n    }\r\n  }\r\n\r\n  function checkBufferLength (parser) {\r\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\r\n    var maxActual = 0\r\n    for (var i = 0, l = buffers.length; i < l; i++) {\r\n      var len = parser[buffers[i]].length\r\n      if (len > maxAllowed) {\r\n        // Text/cdata nodes can get big, and since they're buffered,\r\n        // we can get here under normal conditions.\r\n        // Avoid issues by emitting the text node now,\r\n        // so at least it won't get any bigger.\r\n        switch (buffers[i]) {\r\n          case 'textNode':\r\n            closeText(parser)\r\n            break\r\n\r\n          case 'cdata':\r\n            emitNode(parser, 'oncdata', parser.cdata)\r\n            parser.cdata = ''\r\n            break\r\n\r\n          case 'script':\r\n            emitNode(parser, 'onscript', parser.script)\r\n            parser.script = ''\r\n            break\r\n\r\n          default:\r\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\r\n        }\r\n      }\r\n      maxActual = Math.max(maxActual, len)\r\n    }\r\n    // schedule the next check for the earliest possible buffer overrun.\r\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\r\n    parser.bufferCheckPosition = m + parser.position\r\n  }\r\n\r\n  function clearBuffers (parser) {\r\n    for (var i = 0, l = buffers.length; i < l; i++) {\r\n      parser[buffers[i]] = ''\r\n    }\r\n  }\r\n\r\n  function flushBuffers (parser) {\r\n    closeText(parser)\r\n    if (parser.cdata !== '') {\r\n      emitNode(parser, 'oncdata', parser.cdata)\r\n      parser.cdata = ''\r\n    }\r\n    if (parser.script !== '') {\r\n      emitNode(parser, 'onscript', parser.script)\r\n      parser.script = ''\r\n    }\r\n  }\r\n\r\n  SAXParser.prototype = {\r\n    end: function () { end(this) },\r\n    write: write,\r\n    resume: function () { this.error = null; return this },\r\n    close: function () { return this.write(null) },\r\n    flush: function () { flushBuffers(this) }\r\n  }\r\n\r\n  var Stream\r\n  try {\r\n    Stream = require('stream').Stream\r\n  } catch (ex) {\r\n    Stream = function () {}\r\n  }\r\n\r\n  var streamWraps = sax.EVENTS.filter(function (ev) {\r\n    return ev !== 'error' && ev !== 'end'\r\n  })\r\n\r\n  function createStream (strict, opt) {\r\n    return new SAXStream(strict, opt)\r\n  }\r\n\r\n  function SAXStream (strict, opt) {\r\n    if (!(this instanceof SAXStream)) {\r\n      return new SAXStream(strict, opt)\r\n    }\r\n\r\n    Stream.apply(this)\r\n\r\n    this._parser = new SAXParser(strict, opt)\r\n    this.writable = true\r\n    this.readable = true\r\n\r\n    var me = this\r\n\r\n    this._parser.onend = function () {\r\n      me.emit('end')\r\n    }\r\n\r\n    this._parser.onerror = function (er) {\r\n      me.emit('error', er)\r\n\r\n      // if didn't throw, then means error was handled.\r\n      // go ahead and clear error, so we can write again.\r\n      me._parser.error = null\r\n    }\r\n\r\n    this._decoder = null\r\n\r\n    streamWraps.forEach(function (ev) {\r\n      Object.defineProperty(me, 'on' + ev, {\r\n        get: function () {\r\n          return me._parser['on' + ev]\r\n        },\r\n        set: function (h) {\r\n          if (!h) {\r\n            me.removeAllListeners(ev)\r\n            me._parser['on' + ev] = h\r\n            return h\r\n          }\r\n          me.on(ev, h)\r\n        },\r\n        enumerable: true,\r\n        configurable: false\r\n      })\r\n    })\r\n  }\r\n\r\n  SAXStream.prototype = Object.create(Stream.prototype, {\r\n    constructor: {\r\n      value: SAXStream\r\n    }\r\n  })\r\n\r\n  SAXStream.prototype.write = function (data) {\r\n    if (typeof Buffer === 'function' &&\r\n      typeof Buffer.isBuffer === 'function' &&\r\n      Buffer.isBuffer(data)) {\r\n      if (!this._decoder) {\r\n        var SD = require('string_decoder').StringDecoder\r\n        this._decoder = new SD('utf8')\r\n      }\r\n      data = this._decoder.write(data)\r\n    }\r\n\r\n    this._parser.write(data.toString())\r\n    this.emit('data', data)\r\n    return true\r\n  }\r\n\r\n  SAXStream.prototype.end = function (chunk) {\r\n    if (chunk && chunk.length) {\r\n      this.write(chunk)\r\n    }\r\n    this._parser.end()\r\n    return true\r\n  }\r\n\r\n  SAXStream.prototype.on = function (ev, handler) {\r\n    var me = this\r\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\r\n      me._parser['on' + ev] = function () {\r\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\r\n        args.splice(0, 0, ev)\r\n        me.emit.apply(me, args)\r\n      }\r\n    }\r\n\r\n    return Stream.prototype.on.call(me, ev, handler)\r\n  }\r\n\r\n  // this really needs to be replaced with character classes.\r\n  // XML allows all manner of ridiculous numbers and digits.\r\n  var CDATA = '[CDATA['\r\n  var DOCTYPE = 'DOCTYPE'\r\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\r\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\r\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\r\n\r\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\r\n  // This implementation works on strings, a single character at a time\r\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\r\n  // without a significant breaking change to either this  parser, or the\r\n  // JavaScript language.  Implementation of an emoji-capable xml parser\r\n  // is left as an exercise for the reader.\r\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\r\n\r\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\r\n\r\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\r\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\r\n\r\n  function isWhitespace (c) {\r\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\r\n  }\r\n\r\n  function isQuote (c) {\r\n    return c === '\"' || c === '\\''\r\n  }\r\n\r\n  function isAttribEnd (c) {\r\n    return c === '>' || isWhitespace(c)\r\n  }\r\n\r\n  function isMatch (regex, c) {\r\n    return regex.test(c)\r\n  }\r\n\r\n  function notMatch (regex, c) {\r\n    return !isMatch(regex, c)\r\n  }\r\n\r\n  var S = 0\r\n  sax.STATE = {\r\n    BEGIN: S++, // leading byte order mark or whitespace\r\n    BEGIN_WHITESPACE: S++, // leading whitespace\r\n    TEXT: S++, // general stuff\r\n    TEXT_ENTITY: S++, // &amp and such.\r\n    OPEN_WAKA: S++, // <\r\n    SGML_DECL: S++, // <!BLARG\r\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\r\n    DOCTYPE: S++, // <!DOCTYPE\r\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\r\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\r\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\r\n    COMMENT_STARTING: S++, // <!-\r\n    COMMENT: S++, // <!--\r\n    COMMENT_ENDING: S++, // <!-- blah -\r\n    COMMENT_ENDED: S++, // <!-- blah --\r\n    CDATA: S++, // <![CDATA[ something\r\n    CDATA_ENDING: S++, // ]\r\n    CDATA_ENDING_2: S++, // ]]\r\n    PROC_INST: S++, // <?hi\r\n    PROC_INST_BODY: S++, // <?hi there\r\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\r\n    OPEN_TAG: S++, // <strong\r\n    OPEN_TAG_SLASH: S++, // <strong /\r\n    ATTRIB: S++, // <a\r\n    ATTRIB_NAME: S++, // <a foo\r\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\r\n    ATTRIB_VALUE: S++, // <a foo=\r\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\r\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\r\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\r\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\r\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\r\n    CLOSE_TAG: S++, // </a\r\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\r\n    SCRIPT: S++, // <script> ...\r\n    SCRIPT_ENDING: S++ // <script> ... <\r\n  }\r\n\r\n  sax.XML_ENTITIES = {\r\n    'amp': '&',\r\n    'gt': '>',\r\n    'lt': '<',\r\n    'quot': '\"',\r\n    'apos': \"'\"\r\n  }\r\n\r\n  sax.ENTITIES = {\r\n    'amp': '&',\r\n    'gt': '>',\r\n    'lt': '<',\r\n    'quot': '\"',\r\n    'apos': \"'\",\r\n    'AElig': 198,\r\n    'Aacute': 193,\r\n    'Acirc': 194,\r\n    'Agrave': 192,\r\n    'Aring': 197,\r\n    'Atilde': 195,\r\n    'Auml': 196,\r\n    'Ccedil': 199,\r\n    'ETH': 208,\r\n    'Eacute': 201,\r\n    'Ecirc': 202,\r\n    'Egrave': 200,\r\n    'Euml': 203,\r\n    'Iacute': 205,\r\n    'Icirc': 206,\r\n    'Igrave': 204,\r\n    'Iuml': 207,\r\n    'Ntilde': 209,\r\n    'Oacute': 211,\r\n    'Ocirc': 212,\r\n    'Ograve': 210,\r\n    'Oslash': 216,\r\n    'Otilde': 213,\r\n    'Ouml': 214,\r\n    'THORN': 222,\r\n    'Uacute': 218,\r\n    'Ucirc': 219,\r\n    'Ugrave': 217,\r\n    'Uuml': 220,\r\n    'Yacute': 221,\r\n    'aacute': 225,\r\n    'acirc': 226,\r\n    'aelig': 230,\r\n    'agrave': 224,\r\n    'aring': 229,\r\n    'atilde': 227,\r\n    'auml': 228,\r\n    'ccedil': 231,\r\n    'eacute': 233,\r\n    'ecirc': 234,\r\n    'egrave': 232,\r\n    'eth': 240,\r\n    'euml': 235,\r\n    'iacute': 237,\r\n    'icirc': 238,\r\n    'igrave': 236,\r\n    'iuml': 239,\r\n    'ntilde': 241,\r\n    'oacute': 243,\r\n    'ocirc': 244,\r\n    'ograve': 242,\r\n    'oslash': 248,\r\n    'otilde': 245,\r\n    'ouml': 246,\r\n    'szlig': 223,\r\n    'thorn': 254,\r\n    'uacute': 250,\r\n    'ucirc': 251,\r\n    'ugrave': 249,\r\n    'uuml': 252,\r\n    'yacute': 253,\r\n    'yuml': 255,\r\n    'copy': 169,\r\n    'reg': 174,\r\n    'nbsp': 160,\r\n    'iexcl': 161,\r\n    'cent': 162,\r\n    'pound': 163,\r\n    'curren': 164,\r\n    'yen': 165,\r\n    'brvbar': 166,\r\n    'sect': 167,\r\n    'uml': 168,\r\n    'ordf': 170,\r\n    'laquo': 171,\r\n    'not': 172,\r\n    'shy': 173,\r\n    'macr': 175,\r\n    'deg': 176,\r\n    'plusmn': 177,\r\n    'sup1': 185,\r\n    'sup2': 178,\r\n    'sup3': 179,\r\n    'acute': 180,\r\n    'micro': 181,\r\n    'para': 182,\r\n    'middot': 183,\r\n    'cedil': 184,\r\n    'ordm': 186,\r\n    'raquo': 187,\r\n    'frac14': 188,\r\n    'frac12': 189,\r\n    'frac34': 190,\r\n    'iquest': 191,\r\n    'times': 215,\r\n    'divide': 247,\r\n    'OElig': 338,\r\n    'oelig': 339,\r\n    'Scaron': 352,\r\n    'scaron': 353,\r\n    'Yuml': 376,\r\n    'fnof': 402,\r\n    'circ': 710,\r\n    'tilde': 732,\r\n    'Alpha': 913,\r\n    'Beta': 914,\r\n    'Gamma': 915,\r\n    'Delta': 916,\r\n    'Epsilon': 917,\r\n    'Zeta': 918,\r\n    'Eta': 919,\r\n    'Theta': 920,\r\n    'Iota': 921,\r\n    'Kappa': 922,\r\n    'Lambda': 923,\r\n    'Mu': 924,\r\n    'Nu': 925,\r\n    'Xi': 926,\r\n    'Omicron': 927,\r\n    'Pi': 928,\r\n    'Rho': 929,\r\n    'Sigma': 931,\r\n    'Tau': 932,\r\n    'Upsilon': 933,\r\n    'Phi': 934,\r\n    'Chi': 935,\r\n    'Psi': 936,\r\n    'Omega': 937,\r\n    'alpha': 945,\r\n    'beta': 946,\r\n    'gamma': 947,\r\n    'delta': 948,\r\n    'epsilon': 949,\r\n    'zeta': 950,\r\n    'eta': 951,\r\n    'theta': 952,\r\n    'iota': 953,\r\n    'kappa': 954,\r\n    'lambda': 955,\r\n    'mu': 956,\r\n    'nu': 957,\r\n    'xi': 958,\r\n    'omicron': 959,\r\n    'pi': 960,\r\n    'rho': 961,\r\n    'sigmaf': 962,\r\n    'sigma': 963,\r\n    'tau': 964,\r\n    'upsilon': 965,\r\n    'phi': 966,\r\n    'chi': 967,\r\n    'psi': 968,\r\n    'omega': 969,\r\n    'thetasym': 977,\r\n    'upsih': 978,\r\n    'piv': 982,\r\n    'ensp': 8194,\r\n    'emsp': 8195,\r\n    'thinsp': 8201,\r\n    'zwnj': 8204,\r\n    'zwj': 8205,\r\n    'lrm': 8206,\r\n    'rlm': 8207,\r\n    'ndash': 8211,\r\n    'mdash': 8212,\r\n    'lsquo': 8216,\r\n    'rsquo': 8217,\r\n    'sbquo': 8218,\r\n    'ldquo': 8220,\r\n    'rdquo': 8221,\r\n    'bdquo': 8222,\r\n    'dagger': 8224,\r\n    'Dagger': 8225,\r\n    'bull': 8226,\r\n    'hellip': 8230,\r\n    'permil': 8240,\r\n    'prime': 8242,\r\n    'Prime': 8243,\r\n    'lsaquo': 8249,\r\n    'rsaquo': 8250,\r\n    'oline': 8254,\r\n    'frasl': 8260,\r\n    'euro': 8364,\r\n    'image': 8465,\r\n    'weierp': 8472,\r\n    'real': 8476,\r\n    'trade': 8482,\r\n    'alefsym': 8501,\r\n    'larr': 8592,\r\n    'uarr': 8593,\r\n    'rarr': 8594,\r\n    'darr': 8595,\r\n    'harr': 8596,\r\n    'crarr': 8629,\r\n    'lArr': 8656,\r\n    'uArr': 8657,\r\n    'rArr': 8658,\r\n    'dArr': 8659,\r\n    'hArr': 8660,\r\n    'forall': 8704,\r\n    'part': 8706,\r\n    'exist': 8707,\r\n    'empty': 8709,\r\n    'nabla': 8711,\r\n    'isin': 8712,\r\n    'notin': 8713,\r\n    'ni': 8715,\r\n    'prod': 8719,\r\n    'sum': 8721,\r\n    'minus': 8722,\r\n    'lowast': 8727,\r\n    'radic': 8730,\r\n    'prop': 8733,\r\n    'infin': 8734,\r\n    'ang': 8736,\r\n    'and': 8743,\r\n    'or': 8744,\r\n    'cap': 8745,\r\n    'cup': 8746,\r\n    'int': 8747,\r\n    'there4': 8756,\r\n    'sim': 8764,\r\n    'cong': 8773,\r\n    'asymp': 8776,\r\n    'ne': 8800,\r\n    'equiv': 8801,\r\n    'le': 8804,\r\n    'ge': 8805,\r\n    'sub': 8834,\r\n    'sup': 8835,\r\n    'nsub': 8836,\r\n    'sube': 8838,\r\n    'supe': 8839,\r\n    'oplus': 8853,\r\n    'otimes': 8855,\r\n    'perp': 8869,\r\n    'sdot': 8901,\r\n    'lceil': 8968,\r\n    'rceil': 8969,\r\n    'lfloor': 8970,\r\n    'rfloor': 8971,\r\n    'lang': 9001,\r\n    'rang': 9002,\r\n    'loz': 9674,\r\n    'spades': 9824,\r\n    'clubs': 9827,\r\n    'hearts': 9829,\r\n    'diams': 9830\r\n  }\r\n\r\n  Object.keys(sax.ENTITIES).forEach(function (key) {\r\n    var e = sax.ENTITIES[key]\r\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\r\n    sax.ENTITIES[key] = s\r\n  })\r\n\r\n  for (var s in sax.STATE) {\r\n    sax.STATE[sax.STATE[s]] = s\r\n  }\r\n\r\n  // shorthand\r\n  S = sax.STATE\r\n\r\n  function emit (parser, event, data) {\r\n    parser[event] && parser[event](data)\r\n  }\r\n\r\n  function emitNode (parser, nodeType, data) {\r\n    if (parser.textNode) closeText(parser)\r\n    emit(parser, nodeType, data)\r\n  }\r\n\r\n  function closeText (parser) {\r\n    parser.textNode = textopts(parser.opt, parser.textNode)\r\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\r\n    parser.textNode = ''\r\n  }\r\n\r\n  function textopts (opt, text) {\r\n    if (opt.trim) text = text.trim()\r\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\r\n    return text\r\n  }\r\n\r\n  function error (parser, er) {\r\n    closeText(parser)\r\n    if (parser.trackPosition) {\r\n      er += '\\nLine: ' + parser.line +\r\n        '\\nColumn: ' + parser.column +\r\n        '\\nChar: ' + parser.c\r\n    }\r\n    er = new Error(er)\r\n    parser.error = er\r\n    emit(parser, 'onerror', er)\r\n    return parser\r\n  }\r\n\r\n  function end (parser) {\r\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\r\n    if ((parser.state !== S.BEGIN) &&\r\n      (parser.state !== S.BEGIN_WHITESPACE) &&\r\n      (parser.state !== S.TEXT)) {\r\n      error(parser, 'Unexpected end')\r\n    }\r\n    closeText(parser)\r\n    parser.c = ''\r\n    parser.closed = true\r\n    emit(parser, 'onend')\r\n    SAXParser.call(parser, parser.strict, parser.opt)\r\n    return parser\r\n  }\r\n\r\n  function strictFail (parser, message) {\r\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\r\n      throw new Error('bad call to strictFail')\r\n    }\r\n    if (parser.strict) {\r\n      error(parser, message)\r\n    }\r\n  }\r\n\r\n  function newTag (parser) {\r\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\r\n    var parent = parser.tags[parser.tags.length - 1] || parser\r\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\r\n\r\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\r\n    if (parser.opt.xmlns) {\r\n      tag.ns = parent.ns\r\n    }\r\n    parser.attribList.length = 0\r\n    emitNode(parser, 'onopentagstart', tag)\r\n  }\r\n\r\n  function qname (name, attribute) {\r\n    var i = name.indexOf(':')\r\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\r\n    var prefix = qualName[0]\r\n    var local = qualName[1]\r\n\r\n    // <x \"xmlns\"=\"http://foo\">\r\n    if (attribute && name === 'xmlns') {\r\n      prefix = 'xmlns'\r\n      local = ''\r\n    }\r\n\r\n    return { prefix: prefix, local: local }\r\n  }\r\n\r\n  function attrib (parser) {\r\n    if (!parser.strict) {\r\n      parser.attribName = parser.attribName[parser.looseCase]()\r\n    }\r\n\r\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\r\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\r\n      parser.attribName = parser.attribValue = ''\r\n      return\r\n    }\r\n\r\n    if (parser.opt.xmlns) {\r\n      var qn = qname(parser.attribName, true)\r\n      var prefix = qn.prefix\r\n      var local = qn.local\r\n\r\n      if (prefix === 'xmlns') {\r\n        // namespace binding attribute. push the binding into scope\r\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\r\n          strictFail(parser,\r\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\r\n            'Actual: ' + parser.attribValue)\r\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\r\n          strictFail(parser,\r\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\r\n            'Actual: ' + parser.attribValue)\r\n        } else {\r\n          var tag = parser.tag\r\n          var parent = parser.tags[parser.tags.length - 1] || parser\r\n          if (tag.ns === parent.ns) {\r\n            tag.ns = Object.create(parent.ns)\r\n          }\r\n          tag.ns[local] = parser.attribValue\r\n        }\r\n      }\r\n\r\n      // defer onattribute events until all attributes have been seen\r\n      // so any new bindings can take effect. preserve attribute order\r\n      // so deferred events can be emitted in document order\r\n      parser.attribList.push([parser.attribName, parser.attribValue])\r\n    } else {\r\n      // in non-xmlns mode, we can emit the event right away\r\n      parser.tag.attributes[parser.attribName] = parser.attribValue\r\n      emitNode(parser, 'onattribute', {\r\n        name: parser.attribName,\r\n        value: parser.attribValue\r\n      })\r\n    }\r\n\r\n    parser.attribName = parser.attribValue = ''\r\n  }\r\n\r\n  function openTag (parser, selfClosing) {\r\n    if (parser.opt.xmlns) {\r\n      // emit namespace binding events\r\n      var tag = parser.tag\r\n\r\n      // add namespace info to tag\r\n      var qn = qname(parser.tagName)\r\n      tag.prefix = qn.prefix\r\n      tag.local = qn.local\r\n      tag.uri = tag.ns[qn.prefix] || ''\r\n\r\n      if (tag.prefix && !tag.uri) {\r\n        strictFail(parser, 'Unbound namespace prefix: ' +\r\n          JSON.stringify(parser.tagName))\r\n        tag.uri = qn.prefix\r\n      }\r\n\r\n      var parent = parser.tags[parser.tags.length - 1] || parser\r\n      if (tag.ns && parent.ns !== tag.ns) {\r\n        Object.keys(tag.ns).forEach(function (p) {\r\n          emitNode(parser, 'onopennamespace', {\r\n            prefix: p,\r\n            uri: tag.ns[p]\r\n          })\r\n        })\r\n      }\r\n\r\n      // handle deferred onattribute events\r\n      // Note: do not apply default ns to attributes:\r\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\r\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\r\n        var nv = parser.attribList[i]\r\n        var name = nv[0]\r\n        var value = nv[1]\r\n        var qualName = qname(name, true)\r\n        var prefix = qualName.prefix\r\n        var local = qualName.local\r\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\r\n        var a = {\r\n          name: name,\r\n          value: value,\r\n          prefix: prefix,\r\n          local: local,\r\n          uri: uri\r\n        }\r\n\r\n        // if there's any attributes with an undefined namespace,\r\n        // then fail on them now.\r\n        if (prefix && prefix !== 'xmlns' && !uri) {\r\n          strictFail(parser, 'Unbound namespace prefix: ' +\r\n            JSON.stringify(prefix))\r\n          a.uri = prefix\r\n        }\r\n        parser.tag.attributes[name] = a\r\n        emitNode(parser, 'onattribute', a)\r\n      }\r\n      parser.attribList.length = 0\r\n    }\r\n\r\n    parser.tag.isSelfClosing = !!selfClosing\r\n\r\n    // process the tag\r\n    parser.sawRoot = true\r\n    parser.tags.push(parser.tag)\r\n    emitNode(parser, 'onopentag', parser.tag)\r\n    if (!selfClosing) {\r\n      // special case for <script> in non-strict mode.\r\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\r\n        parser.state = S.SCRIPT\r\n      } else {\r\n        parser.state = S.TEXT\r\n      }\r\n      parser.tag = null\r\n      parser.tagName = ''\r\n    }\r\n    parser.attribName = parser.attribValue = ''\r\n    parser.attribList.length = 0\r\n  }\r\n\r\n  function closeTag (parser) {\r\n    if (!parser.tagName) {\r\n      strictFail(parser, 'Weird empty close tag.')\r\n      parser.textNode += '</>'\r\n      parser.state = S.TEXT\r\n      return\r\n    }\r\n\r\n    if (parser.script) {\r\n      if (parser.tagName !== 'script') {\r\n        parser.script += '</' + parser.tagName + '>'\r\n        parser.tagName = ''\r\n        parser.state = S.SCRIPT\r\n        return\r\n      }\r\n      emitNode(parser, 'onscript', parser.script)\r\n      parser.script = ''\r\n    }\r\n\r\n    // first make sure that the closing tag actually exists.\r\n    // <a><b></c></b></a> will close everything, otherwise.\r\n    var t = parser.tags.length\r\n    var tagName = parser.tagName\r\n    if (!parser.strict) {\r\n      tagName = tagName[parser.looseCase]()\r\n    }\r\n    var closeTo = tagName\r\n    while (t--) {\r\n      var close = parser.tags[t]\r\n      if (close.name !== closeTo) {\r\n        // fail the first time in strict mode\r\n        strictFail(parser, 'Unexpected close tag')\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    // didn't find it.  we already failed for strict, so just abort.\r\n    if (t < 0) {\r\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\r\n      parser.textNode += '</' + parser.tagName + '>'\r\n      parser.state = S.TEXT\r\n      return\r\n    }\r\n    parser.tagName = tagName\r\n    var s = parser.tags.length\r\n    while (s-- > t) {\r\n      var tag = parser.tag = parser.tags.pop()\r\n      parser.tagName = parser.tag.name\r\n      emitNode(parser, 'onclosetag', parser.tagName)\r\n\r\n      var x = {}\r\n      for (var i in tag.ns) {\r\n        x[i] = tag.ns[i]\r\n      }\r\n\r\n      var parent = parser.tags[parser.tags.length - 1] || parser\r\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\r\n        // remove namespace bindings introduced by tag\r\n        Object.keys(tag.ns).forEach(function (p) {\r\n          var n = tag.ns[p]\r\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\r\n        })\r\n      }\r\n    }\r\n    if (t === 0) parser.closedRoot = true\r\n    parser.tagName = parser.attribValue = parser.attribName = ''\r\n    parser.attribList.length = 0\r\n    parser.state = S.TEXT\r\n  }\r\n\r\n  function parseEntity (parser) {\r\n    var entity = parser.entity\r\n    var entityLC = entity.toLowerCase()\r\n    var num\r\n    var numStr = ''\r\n\r\n    if (parser.ENTITIES[entity]) {\r\n      return parser.ENTITIES[entity]\r\n    }\r\n    if (parser.ENTITIES[entityLC]) {\r\n      return parser.ENTITIES[entityLC]\r\n    }\r\n    entity = entityLC\r\n    if (entity.charAt(0) === '#') {\r\n      if (entity.charAt(1) === 'x') {\r\n        entity = entity.slice(2)\r\n        num = parseInt(entity, 16)\r\n        numStr = num.toString(16)\r\n      } else {\r\n        entity = entity.slice(1)\r\n        num = parseInt(entity, 10)\r\n        numStr = num.toString(10)\r\n      }\r\n    }\r\n    entity = entity.replace(/^0+/, '')\r\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\r\n      strictFail(parser, 'Invalid character entity')\r\n      return '&' + parser.entity + ';'\r\n    }\r\n\r\n    return String.fromCodePoint(num)\r\n  }\r\n\r\n  function beginWhiteSpace (parser, c) {\r\n    if (c === '<') {\r\n      parser.state = S.OPEN_WAKA\r\n      parser.startTagPosition = parser.position\r\n    } else if (!isWhitespace(c)) {\r\n      // have to process this as a text node.\r\n      // weird, but happens.\r\n      strictFail(parser, 'Non-whitespace before first tag.')\r\n      parser.textNode = c\r\n      parser.state = S.TEXT\r\n    }\r\n  }\r\n\r\n  function charAt (chunk, i) {\r\n    var result = ''\r\n    if (i < chunk.length) {\r\n      result = chunk.charAt(i)\r\n    }\r\n    return result\r\n  }\r\n\r\n  function write (chunk) {\r\n    var parser = this\r\n    if (this.error) {\r\n      throw this.error\r\n    }\r\n    if (parser.closed) {\r\n      return error(parser,\r\n        'Cannot write after close. Assign an onready handler.')\r\n    }\r\n    if (chunk === null) {\r\n      return end(parser)\r\n    }\r\n    if (typeof chunk === 'object') {\r\n      chunk = chunk.toString()\r\n    }\r\n    var i = 0\r\n    var c = ''\r\n    while (true) {\r\n      c = charAt(chunk, i++)\r\n      parser.c = c\r\n\r\n      if (!c) {\r\n        break\r\n      }\r\n\r\n      if (parser.trackPosition) {\r\n        parser.position++\r\n        if (c === '\\n') {\r\n          parser.line++\r\n          parser.column = 0\r\n        } else {\r\n          parser.column++\r\n        }\r\n      }\r\n\r\n      switch (parser.state) {\r\n        case S.BEGIN:\r\n          parser.state = S.BEGIN_WHITESPACE\r\n          if (c === '\\uFEFF') {\r\n            continue\r\n          }\r\n          beginWhiteSpace(parser, c)\r\n          continue\r\n\r\n        case S.BEGIN_WHITESPACE:\r\n          beginWhiteSpace(parser, c)\r\n          continue\r\n\r\n        case S.TEXT:\r\n          if (parser.sawRoot && !parser.closedRoot) {\r\n            var starti = i - 1\r\n            while (c && c !== '<' && c !== '&') {\r\n              c = charAt(chunk, i++)\r\n              if (c && parser.trackPosition) {\r\n                parser.position++\r\n                if (c === '\\n') {\r\n                  parser.line++\r\n                  parser.column = 0\r\n                } else {\r\n                  parser.column++\r\n                }\r\n              }\r\n            }\r\n            parser.textNode += chunk.substring(starti, i - 1)\r\n          }\r\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\r\n            parser.state = S.OPEN_WAKA\r\n            parser.startTagPosition = parser.position\r\n          } else {\r\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\r\n              strictFail(parser, 'Text data outside of root node.')\r\n            }\r\n            if (c === '&') {\r\n              parser.state = S.TEXT_ENTITY\r\n            } else {\r\n              parser.textNode += c\r\n            }\r\n          }\r\n          continue\r\n\r\n        case S.SCRIPT:\r\n          // only non-strict\r\n          if (c === '<') {\r\n            parser.state = S.SCRIPT_ENDING\r\n          } else {\r\n            parser.script += c\r\n          }\r\n          continue\r\n\r\n        case S.SCRIPT_ENDING:\r\n          if (c === '/') {\r\n            parser.state = S.CLOSE_TAG\r\n          } else {\r\n            parser.script += '<' + c\r\n            parser.state = S.SCRIPT\r\n          }\r\n          continue\r\n\r\n        case S.OPEN_WAKA:\r\n          // either a /, ?, !, or text is coming next.\r\n          if (c === '!') {\r\n            parser.state = S.SGML_DECL\r\n            parser.sgmlDecl = ''\r\n          } else if (isWhitespace(c)) {\r\n            // wait for it...\r\n          } else if (isMatch(nameStart, c)) {\r\n            parser.state = S.OPEN_TAG\r\n            parser.tagName = c\r\n          } else if (c === '/') {\r\n            parser.state = S.CLOSE_TAG\r\n            parser.tagName = ''\r\n          } else if (c === '?') {\r\n            parser.state = S.PROC_INST\r\n            parser.procInstName = parser.procInstBody = ''\r\n          } else {\r\n            strictFail(parser, 'Unencoded <')\r\n            // if there was some whitespace, then add that in.\r\n            if (parser.startTagPosition + 1 < parser.position) {\r\n              var pad = parser.position - parser.startTagPosition\r\n              c = new Array(pad).join(' ') + c\r\n            }\r\n            parser.textNode += '<' + c\r\n            parser.state = S.TEXT\r\n          }\r\n          continue\r\n\r\n        case S.SGML_DECL:\r\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\r\n            emitNode(parser, 'onopencdata')\r\n            parser.state = S.CDATA\r\n            parser.sgmlDecl = ''\r\n            parser.cdata = ''\r\n          } else if (parser.sgmlDecl + c === '--') {\r\n            parser.state = S.COMMENT\r\n            parser.comment = ''\r\n            parser.sgmlDecl = ''\r\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\r\n            parser.state = S.DOCTYPE\r\n            if (parser.doctype || parser.sawRoot) {\r\n              strictFail(parser,\r\n                'Inappropriately located doctype declaration')\r\n            }\r\n            parser.doctype = ''\r\n            parser.sgmlDecl = ''\r\n          } else if (c === '>') {\r\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\r\n            parser.sgmlDecl = ''\r\n            parser.state = S.TEXT\r\n          } else if (isQuote(c)) {\r\n            parser.state = S.SGML_DECL_QUOTED\r\n            parser.sgmlDecl += c\r\n          } else {\r\n            parser.sgmlDecl += c\r\n          }\r\n          continue\r\n\r\n        case S.SGML_DECL_QUOTED:\r\n          if (c === parser.q) {\r\n            parser.state = S.SGML_DECL\r\n            parser.q = ''\r\n          }\r\n          parser.sgmlDecl += c\r\n          continue\r\n\r\n        case S.DOCTYPE:\r\n          if (c === '>') {\r\n            parser.state = S.TEXT\r\n            emitNode(parser, 'ondoctype', parser.doctype)\r\n            parser.doctype = true // just remember that we saw it.\r\n          } else {\r\n            parser.doctype += c\r\n            if (c === '[') {\r\n              parser.state = S.DOCTYPE_DTD\r\n            } else if (isQuote(c)) {\r\n              parser.state = S.DOCTYPE_QUOTED\r\n              parser.q = c\r\n            }\r\n          }\r\n          continue\r\n\r\n        case S.DOCTYPE_QUOTED:\r\n          parser.doctype += c\r\n          if (c === parser.q) {\r\n            parser.q = ''\r\n            parser.state = S.DOCTYPE\r\n          }\r\n          continue\r\n\r\n        case S.DOCTYPE_DTD:\r\n          parser.doctype += c\r\n          if (c === ']') {\r\n            parser.state = S.DOCTYPE\r\n          } else if (isQuote(c)) {\r\n            parser.state = S.DOCTYPE_DTD_QUOTED\r\n            parser.q = c\r\n          }\r\n          continue\r\n\r\n        case S.DOCTYPE_DTD_QUOTED:\r\n          parser.doctype += c\r\n          if (c === parser.q) {\r\n            parser.state = S.DOCTYPE_DTD\r\n            parser.q = ''\r\n          }\r\n          continue\r\n\r\n        case S.COMMENT:\r\n          if (c === '-') {\r\n            parser.state = S.COMMENT_ENDING\r\n          } else {\r\n            parser.comment += c\r\n          }\r\n          continue\r\n\r\n        case S.COMMENT_ENDING:\r\n          if (c === '-') {\r\n            parser.state = S.COMMENT_ENDED\r\n            parser.comment = textopts(parser.opt, parser.comment)\r\n            if (parser.comment) {\r\n              emitNode(parser, 'oncomment', parser.comment)\r\n            }\r\n            parser.comment = ''\r\n          } else {\r\n            parser.comment += '-' + c\r\n            parser.state = S.COMMENT\r\n          }\r\n          continue\r\n\r\n        case S.COMMENT_ENDED:\r\n          if (c !== '>') {\r\n            strictFail(parser, 'Malformed comment')\r\n            // allow <!-- blah -- bloo --> in non-strict mode,\r\n            // which is a comment of \" blah -- bloo \"\r\n            parser.comment += '--' + c\r\n            parser.state = S.COMMENT\r\n          } else {\r\n            parser.state = S.TEXT\r\n          }\r\n          continue\r\n\r\n        case S.CDATA:\r\n          if (c === ']') {\r\n            parser.state = S.CDATA_ENDING\r\n          } else {\r\n            parser.cdata += c\r\n          }\r\n          continue\r\n\r\n        case S.CDATA_ENDING:\r\n          if (c === ']') {\r\n            parser.state = S.CDATA_ENDING_2\r\n          } else {\r\n            parser.cdata += ']' + c\r\n            parser.state = S.CDATA\r\n          }\r\n          continue\r\n\r\n        case S.CDATA_ENDING_2:\r\n          if (c === '>') {\r\n            if (parser.cdata) {\r\n              emitNode(parser, 'oncdata', parser.cdata)\r\n            }\r\n            emitNode(parser, 'onclosecdata')\r\n            parser.cdata = ''\r\n            parser.state = S.TEXT\r\n          } else if (c === ']') {\r\n            parser.cdata += ']'\r\n          } else {\r\n            parser.cdata += ']]' + c\r\n            parser.state = S.CDATA\r\n          }\r\n          continue\r\n\r\n        case S.PROC_INST:\r\n          if (c === '?') {\r\n            parser.state = S.PROC_INST_ENDING\r\n          } else if (isWhitespace(c)) {\r\n            parser.state = S.PROC_INST_BODY\r\n          } else {\r\n            parser.procInstName += c\r\n          }\r\n          continue\r\n\r\n        case S.PROC_INST_BODY:\r\n          if (!parser.procInstBody && isWhitespace(c)) {\r\n            continue\r\n          } else if (c === '?') {\r\n            parser.state = S.PROC_INST_ENDING\r\n          } else {\r\n            parser.procInstBody += c\r\n          }\r\n          continue\r\n\r\n        case S.PROC_INST_ENDING:\r\n          if (c === '>') {\r\n            emitNode(parser, 'onprocessinginstruction', {\r\n              name: parser.procInstName,\r\n              body: parser.procInstBody\r\n            })\r\n            parser.procInstName = parser.procInstBody = ''\r\n            parser.state = S.TEXT\r\n          } else {\r\n            parser.procInstBody += '?' + c\r\n            parser.state = S.PROC_INST_BODY\r\n          }\r\n          continue\r\n\r\n        case S.OPEN_TAG:\r\n          if (isMatch(nameBody, c)) {\r\n            parser.tagName += c\r\n          } else {\r\n            newTag(parser)\r\n            if (c === '>') {\r\n              openTag(parser)\r\n            } else if (c === '/') {\r\n              parser.state = S.OPEN_TAG_SLASH\r\n            } else {\r\n              if (!isWhitespace(c)) {\r\n                strictFail(parser, 'Invalid character in tag name')\r\n              }\r\n              parser.state = S.ATTRIB\r\n            }\r\n          }\r\n          continue\r\n\r\n        case S.OPEN_TAG_SLASH:\r\n          if (c === '>') {\r\n            openTag(parser, true)\r\n            closeTag(parser)\r\n          } else {\r\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\r\n            parser.state = S.ATTRIB\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB:\r\n          // haven't read the attribute name yet.\r\n          if (isWhitespace(c)) {\r\n            continue\r\n          } else if (c === '>') {\r\n            openTag(parser)\r\n          } else if (c === '/') {\r\n            parser.state = S.OPEN_TAG_SLASH\r\n          } else if (isMatch(nameStart, c)) {\r\n            parser.attribName = c\r\n            parser.attribValue = ''\r\n            parser.state = S.ATTRIB_NAME\r\n          } else {\r\n            strictFail(parser, 'Invalid attribute name')\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB_NAME:\r\n          if (c === '=') {\r\n            parser.state = S.ATTRIB_VALUE\r\n          } else if (c === '>') {\r\n            strictFail(parser, 'Attribute without value')\r\n            parser.attribValue = parser.attribName\r\n            attrib(parser)\r\n            openTag(parser)\r\n          } else if (isWhitespace(c)) {\r\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\r\n          } else if (isMatch(nameBody, c)) {\r\n            parser.attribName += c\r\n          } else {\r\n            strictFail(parser, 'Invalid attribute name')\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB_NAME_SAW_WHITE:\r\n          if (c === '=') {\r\n            parser.state = S.ATTRIB_VALUE\r\n          } else if (isWhitespace(c)) {\r\n            continue\r\n          } else {\r\n            strictFail(parser, 'Attribute without value')\r\n            parser.tag.attributes[parser.attribName] = ''\r\n            parser.attribValue = ''\r\n            emitNode(parser, 'onattribute', {\r\n              name: parser.attribName,\r\n              value: ''\r\n            })\r\n            parser.attribName = ''\r\n            if (c === '>') {\r\n              openTag(parser)\r\n            } else if (isMatch(nameStart, c)) {\r\n              parser.attribName = c\r\n              parser.state = S.ATTRIB_NAME\r\n            } else {\r\n              strictFail(parser, 'Invalid attribute name')\r\n              parser.state = S.ATTRIB\r\n            }\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB_VALUE:\r\n          if (isWhitespace(c)) {\r\n            continue\r\n          } else if (isQuote(c)) {\r\n            parser.q = c\r\n            parser.state = S.ATTRIB_VALUE_QUOTED\r\n          } else {\r\n            strictFail(parser, 'Unquoted attribute value')\r\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\r\n            parser.attribValue = c\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB_VALUE_QUOTED:\r\n          if (c !== parser.q) {\r\n            if (c === '&') {\r\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\r\n            } else {\r\n              parser.attribValue += c\r\n            }\r\n            continue\r\n          }\r\n          attrib(parser)\r\n          parser.q = ''\r\n          parser.state = S.ATTRIB_VALUE_CLOSED\r\n          continue\r\n\r\n        case S.ATTRIB_VALUE_CLOSED:\r\n          if (isWhitespace(c)) {\r\n            parser.state = S.ATTRIB\r\n          } else if (c === '>') {\r\n            openTag(parser)\r\n          } else if (c === '/') {\r\n            parser.state = S.OPEN_TAG_SLASH\r\n          } else if (isMatch(nameStart, c)) {\r\n            strictFail(parser, 'No whitespace between attributes')\r\n            parser.attribName = c\r\n            parser.attribValue = ''\r\n            parser.state = S.ATTRIB_NAME\r\n          } else {\r\n            strictFail(parser, 'Invalid attribute name')\r\n          }\r\n          continue\r\n\r\n        case S.ATTRIB_VALUE_UNQUOTED:\r\n          if (!isAttribEnd(c)) {\r\n            if (c === '&') {\r\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\r\n            } else {\r\n              parser.attribValue += c\r\n            }\r\n            continue\r\n          }\r\n          attrib(parser)\r\n          if (c === '>') {\r\n            openTag(parser)\r\n          } else {\r\n            parser.state = S.ATTRIB\r\n          }\r\n          continue\r\n\r\n        case S.CLOSE_TAG:\r\n          if (!parser.tagName) {\r\n            if (isWhitespace(c)) {\r\n              continue\r\n            } else if (notMatch(nameStart, c)) {\r\n              if (parser.script) {\r\n                parser.script += '</' + c\r\n                parser.state = S.SCRIPT\r\n              } else {\r\n                strictFail(parser, 'Invalid tagname in closing tag.')\r\n              }\r\n            } else {\r\n              parser.tagName = c\r\n            }\r\n          } else if (c === '>') {\r\n            closeTag(parser)\r\n          } else if (isMatch(nameBody, c)) {\r\n            parser.tagName += c\r\n          } else if (parser.script) {\r\n            parser.script += '</' + parser.tagName\r\n            parser.tagName = ''\r\n            parser.state = S.SCRIPT\r\n          } else {\r\n            if (!isWhitespace(c)) {\r\n              strictFail(parser, 'Invalid tagname in closing tag')\r\n            }\r\n            parser.state = S.CLOSE_TAG_SAW_WHITE\r\n          }\r\n          continue\r\n\r\n        case S.CLOSE_TAG_SAW_WHITE:\r\n          if (isWhitespace(c)) {\r\n            continue\r\n          }\r\n          if (c === '>') {\r\n            closeTag(parser)\r\n          } else {\r\n            strictFail(parser, 'Invalid characters in closing tag')\r\n          }\r\n          continue\r\n\r\n        case S.TEXT_ENTITY:\r\n        case S.ATTRIB_VALUE_ENTITY_Q:\r\n        case S.ATTRIB_VALUE_ENTITY_U:\r\n          var returnState\r\n          var buffer\r\n          switch (parser.state) {\r\n            case S.TEXT_ENTITY:\r\n              returnState = S.TEXT\r\n              buffer = 'textNode'\r\n              break\r\n\r\n            case S.ATTRIB_VALUE_ENTITY_Q:\r\n              returnState = S.ATTRIB_VALUE_QUOTED\r\n              buffer = 'attribValue'\r\n              break\r\n\r\n            case S.ATTRIB_VALUE_ENTITY_U:\r\n              returnState = S.ATTRIB_VALUE_UNQUOTED\r\n              buffer = 'attribValue'\r\n              break\r\n          }\r\n\r\n          if (c === ';') {\r\n            parser[buffer] += parseEntity(parser)\r\n            parser.entity = ''\r\n            parser.state = returnState\r\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\r\n            parser.entity += c\r\n          } else {\r\n            strictFail(parser, 'Invalid character in entity name')\r\n            parser[buffer] += '&' + parser.entity + c\r\n            parser.entity = ''\r\n            parser.state = returnState\r\n          }\r\n\r\n          continue\r\n\r\n        default:\r\n          throw new Error(parser, 'Unknown state: ' + parser.state)\r\n      }\r\n    } // while\r\n\r\n    if (parser.position >= parser.bufferCheckPosition) {\r\n      checkBufferLength(parser)\r\n    }\r\n    return parser\r\n  }\r\n\r\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\r\n  /* istanbul ignore next */\r\n  if (!String.fromCodePoint) {\r\n    (function () {\r\n      var stringFromCharCode = String.fromCharCode\r\n      var floor = Math.floor\r\n      var fromCodePoint = function () {\r\n        var MAX_SIZE = 0x4000\r\n        var codeUnits = []\r\n        var highSurrogate\r\n        var lowSurrogate\r\n        var index = -1\r\n        var length = arguments.length\r\n        if (!length) {\r\n          return ''\r\n        }\r\n        var result = ''\r\n        while (++index < length) {\r\n          var codePoint = Number(arguments[index])\r\n          if (\r\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\r\n            codePoint < 0 || // not a valid Unicode code point\r\n            codePoint > 0x10FFFF || // not a valid Unicode code point\r\n            floor(codePoint) !== codePoint // not an integer\r\n          ) {\r\n            throw RangeError('Invalid code point: ' + codePoint)\r\n          }\r\n          if (codePoint <= 0xFFFF) { // BMP code point\r\n            codeUnits.push(codePoint)\r\n          } else { // Astral code point; split in surrogate halves\r\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n            codePoint -= 0x10000\r\n            highSurrogate = (codePoint >> 10) + 0xD800\r\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\r\n            codeUnits.push(highSurrogate, lowSurrogate)\r\n          }\r\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\r\n            result += stringFromCharCode.apply(null, codeUnits)\r\n            codeUnits.length = 0\r\n          }\r\n        }\r\n        return result\r\n      }\r\n      /* istanbul ignore next */\r\n      if (Object.defineProperty) {\r\n        Object.defineProperty(String, 'fromCodePoint', {\r\n          value: fromCodePoint,\r\n          configurable: true,\r\n          writable: true\r\n        })\r\n      } else {\r\n        String.fromCodePoint = fromCodePoint\r\n      }\r\n    }())\r\n  }\r\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\r\n","type":"application/javascript","title":"$:/plugins/tiddlywiki/sax/sax.js","module-type":"library"},"$:/plugins/tiddlywiki/sax/license":{"text":"The ISC License\r\n\r\nCopyright (c) Isaac Z. Schlueter and Contributors\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted, provided that the above\r\ncopyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\r\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n\r\n====\r\n\r\n`String.fromCodePoint` by Mathias Bynens used according to terms of MIT\r\nLicense, as follows:\r\n\r\n    Copyright Mathias Bynens <https://mathiasbynens.be/>\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining\r\n    a copy of this software and associated documentation files (the\r\n    \"Software\"), to deal in the Software without restriction, including\r\n    without limitation the rights to use, copy, modify, merge, publish,\r\n    distribute, sublicense, and/or sell copies of the Software, and to\r\n    permit persons to whom the Software is furnished to do so, subject to\r\n    the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be\r\n    included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","type":"text/plain","title":"$:/plugins/tiddlywiki/sax/license"},"$:/plugins/tiddlywiki/sax/readme":{"title":"$:/plugins/tiddlywiki/sax/readme","text":"This plugin packages [[sax.js|https://github.com/isaacs/sax-js]] for use by other plugins. It does not provide any end-user visible features.\r\n"}}}