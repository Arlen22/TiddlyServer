{"title":"$:/plugins/tiddlywiki/tiddlyweb","description":"TiddlyWeb and TiddlySpace components","author":"JeremyRuston","core-version":">=5.0.0","list":"readme","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"GettingStarted":{"title":"GettingStarted","tags":"$:/tags/GettingStarted","caption":"Step 1<br>Syncing","text":"Welcome to ~TiddlyWiki and the ~TiddlyWiki community\n\nVisit https://tiddlywiki.com/ to find out more about ~TiddlyWiki and what it can do.\n\n! Syncing Changes to the Server\n\nBefore you can start storing important information in ~TiddlyWiki it is important to make sure that your changes are being reliably saved by the server.\n\n# Create a new tiddler using the {{$:/core/images/new-button}} button in the sidebar on the right\r\n# Click the {{$:/core/images/done-button}} button at the top right of the new tiddler\r\n# Check the ~TiddlyWiki command line for a message confirming the tiddler has been saved\r\n# Refresh the page in the browser to and verify that the new tiddler has been correctly saved\r\n"},"$:/core/templates/html-div-tiddler":{"title":"$:/core/templates/html-div-tiddler","text":"<!--\n\nThis template is used for saving tiddlers as an HTML DIV tag with attributes representing the tiddler fields. This version includes the tiddler changecount as the field `revision`.\n\n-->`<div`<$fields exclude='text revision bag' template=' $name$=\"$encoded_value$\"'></$fields>` revision=\"`<<changecount>>`\" bag=\"default\">\r\n<pre>`<$view field=\"text\" format=\"htmlencoded\" />`</pre>\r\n</div>`\r\n"},"$:/plugins/tiddlywiki/tiddlyweb/readme":{"title":"$:/plugins/tiddlywiki/tiddlyweb/readme","text":"This plugin runs in the browser to synchronise tiddler changes to and from a TiddlyWeb-compatible server (including TiddlyWiki 5 itself, running on Node.js). It is inert when run under Node.js. Disabling this plugin via the browser can not be undone via the browser since this plugin provides the mechanism to synchronize settings with the server.\n\n[[Source code|https://github.com/Jermolene/TiddlyWiki5/blob/master/plugins/tiddlywiki/tiddlyweb]]\r\n"},"$:/plugins/tiddlywiki/tiddlyweb/readonly":{"title":"$:/plugins/tiddlywiki/tiddlyweb/readonly","tags":"[[$:/tags/Stylesheet]]","text":"\\define button-selector(title)\r\nbutton.$title$, .tc-drop-down button.$title$, div.$title$\r\n\\end\n\n\\define hide-edit-controls()\r\n<$reveal state=\"$:/status/IsReadOnly\" type=\"match\" text=\"yes\" default=\"yes\">\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fclone>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fdelete>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fedit>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fnew-here>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fnew-journal-here>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fimport>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fmanager>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fnew-image>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fnew-journal>>`,`\r\n<<button-selector tc-btn-\\%24\\%3A\\%2Fcore\\%2Fui\\%2FButtons\\%2Fnew-tiddler>> `{\r\n\tdisplay: none;\r\n}`\r\n</$reveal>\r\n\\end\n\n\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline macrocallblock\n\n<<hide-edit-controls>>\r\n"},"$:/plugins/tiddlywiki/tiddlyweb/save/offline":{"title":"$:/plugins/tiddlywiki/tiddlyweb/save/offline","text":"\\define saveTiddlerFilter()\r\n[is[tiddler]] -[[$:/boot/boot.css]] -[[$:/HistoryList]] -[type[application/javascript]library[yes]] -[[$:/boot/boot.js]] -[[$:/boot/bootprefix.js]] -[[$:/plugins/tiddlywiki/filesystem]] -[[$:/plugins/tiddlywiki/tiddlyweb]] +[sort[title]] $(publishFilter)$\r\n\\end\r\n{{$:/core/templates/tiddlywiki5.html}}\r\n"},"$:/config/SaveWikiButton/Template":{"title":"$:/config/SaveWikiButton/Template","text":"$:/plugins/tiddlywiki/tiddlyweb/save/offline"},"$:/plugins/tiddlywiki/tiddlyweb/ServerControlPanel":{"title":"$:/plugins/tiddlywiki/tiddlyweb/ServerControlPanel","caption":"Server","tags":"$:/tags/ControlPanel","text":"<$reveal state=\"$:/status/IsLoggedIn\" type=\"nomatch\" text=\"yes\">\r\nLog in to ~TiddlyWeb: <$button message=\"tm-login\">Login</$button>\r\n</$reveal>\r\n<$reveal state=\"$:/status/IsLoggedIn\" type=\"match\" text=\"yes\">\r\nLogged in as {{$:/status/UserName}} <$button message=\"tm-logout\">Logout</$button>\r\n</$reveal>\n\n----\n\nHost configuration: <$edit-text tiddler=\"$:/config/tiddlyweb/host\" tag=\"input\" default=\"\"/>\n\n<blockquote>//for example, `$protocol$//$host$/folder`, where `$protocol$` is replaced by the protocol (typically `http` or `https`), and `$host$` by the host name//</blockquote>\n\n----\n\n<$button message=\"tm-server-refresh\">Refresh</$button> to fetch changes from the server immediately\r\n"},"$:/plugins/tiddlywiki/tiddlyweb/tiddlywebadaptor.js":{"title":"$:/plugins/tiddlywiki/tiddlyweb/tiddlywebadaptor.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/tiddlyweb/tiddlywebadaptor.js\r\ntype: application/javascript\r\nmodule-type: syncadaptor\r\n\r\nA sync adaptor module for synchronising with TiddlyWeb compatible servers\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar CONFIG_HOST_TIDDLER = \"$:/config/tiddlyweb/host\",\r\n\tDEFAULT_HOST_TIDDLER = \"$protocol$//$host$/\";\r\n\r\nfunction TiddlyWebAdaptor(options) {\r\n\tthis.wiki = options.wiki;\r\n\tthis.host = this.getHost();\r\n\tthis.recipe = undefined;\r\n\tthis.hasStatus = false;\r\n\tthis.logger = new $tw.utils.Logger(\"TiddlyWebAdaptor\");\r\n\tthis.isLoggedIn = false;\r\n\tthis.isReadOnly = false;\r\n}\r\n\r\nTiddlyWebAdaptor.prototype.name = \"tiddlyweb\";\r\n\r\nTiddlyWebAdaptor.prototype.isReady = function() {\r\n\treturn this.hasStatus;\r\n};\r\n\r\nTiddlyWebAdaptor.prototype.getHost = function() {\r\n\tvar text = this.wiki.getTiddlerText(CONFIG_HOST_TIDDLER,DEFAULT_HOST_TIDDLER),\r\n\t\tsubstitutions = [\r\n\t\t\t{name: \"protocol\", value: document.location.protocol},\r\n\t\t\t{name: \"host\", value: document.location.host}\r\n\t\t];\r\n\tfor(var t=0; t<substitutions.length; t++) {\r\n\t\tvar s = substitutions[t];\r\n\t\ttext = $tw.utils.replaceString(text,new RegExp(\"\\\\$\" + s.name + \"\\\\$\",\"mg\"),s.value);\r\n\t}\r\n\treturn text;\r\n};\r\n\r\nTiddlyWebAdaptor.prototype.getTiddlerInfo = function(tiddler) {\r\n\treturn {\r\n\t\tbag: tiddler.fields.bag\r\n\t};\r\n};\r\n\r\n/*\r\nGet the current status of the TiddlyWeb connection\r\n*/\r\nTiddlyWebAdaptor.prototype.getStatus = function(callback) {\r\n\t// Get status\r\n\tvar self = this;\r\n\tthis.logger.log(\"Getting status\");\r\n\t$tw.utils.httpRequest({\r\n\t\turl: this.host + \"status\",\r\n\t\tcallback: function(err,data) {\r\n\t\t\tself.hasStatus = true;\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Decode the status JSON\r\n\t\t\tvar json = null;\r\n\t\t\ttry {\r\n\t\t\t\tjson = JSON.parse(data);\r\n\t\t\t} catch (e) {\r\n\t\t\t}\r\n\t\t\tif(json) {\r\n\t\t\t\tself.logger.log(\"Status:\",data);\r\n\t\t\t\t// Record the recipe\r\n\t\t\t\tif(json.space) {\r\n\t\t\t\t\tself.recipe = json.space.recipe;\r\n\t\t\t\t}\r\n\t\t\t\t// Check if we're logged in\r\n\t\t\t\tself.isLoggedIn = json.username !== \"GUEST\";\r\n\t\t\t\tself.isReadOnly = !!json[\"read_only\"];\r\n\t\t\t\tself.isAnonymous = !!json.anonymous;\r\n\t\t\t}\r\n\t\t\t// Invoke the callback if present\r\n\t\t\tif(callback) {\r\n\t\t\t\tcallback(null,self.isLoggedIn,json.username,self.isReadOnly,self.isAnonymous);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nAttempt to login and invoke the callback(err)\r\n*/\r\nTiddlyWebAdaptor.prototype.login = function(username,password,callback) {\r\n\tvar options = {\r\n\t\turl: this.host + \"challenge/tiddlywebplugins.tiddlyspace.cookie_form\",\r\n\t\ttype: \"POST\",\r\n\t\tdata: {\r\n\t\t\tuser: username,\r\n\t\t\tpassword: password,\r\n\t\t\ttiddlyweb_redirect: \"/status\" // workaround to marginalize automatic subsequent GET\r\n\t\t},\r\n\t\tcallback: function(err) {\r\n\t\t\tcallback(err);\r\n\t\t}\r\n\t};\r\n\tthis.logger.log(\"Logging in:\",options);\r\n\t$tw.utils.httpRequest(options);\r\n};\r\n\r\n/*\r\n*/\r\nTiddlyWebAdaptor.prototype.logout = function(callback) {\r\n\tvar options = {\r\n\t\turl: this.host + \"logout\",\r\n\t\ttype: \"POST\",\r\n\t\tdata: {\r\n\t\t\tcsrf_token: this.getCsrfToken(),\r\n\t\t\ttiddlyweb_redirect: \"/status\" // workaround to marginalize automatic subsequent GET\r\n\t\t},\r\n\t\tcallback: function(err,data) {\r\n\t\t\tcallback(err);\r\n\t\t}\r\n\t};\r\n\tthis.logger.log(\"Logging out:\",options);\r\n\t$tw.utils.httpRequest(options);\r\n};\r\n\r\n/*\r\nRetrieve the CSRF token from its cookie\r\n*/\r\nTiddlyWebAdaptor.prototype.getCsrfToken = function() {\r\n\tvar regex = /^(?:.*; )?csrf_token=([^(;|$)]*)(?:;|$)/,\r\n\t\tmatch = regex.exec(document.cookie),\r\n\t\tcsrf = null;\r\n\tif (match && (match.length === 2)) {\r\n\t\tcsrf = match[1];\r\n\t}\r\n\treturn csrf;\r\n};\r\n\r\n/*\r\nGet an array of skinny tiddler fields from the server\r\n*/\r\nTiddlyWebAdaptor.prototype.getSkinnyTiddlers = function(callback) {\r\n\tvar self = this;\r\n\t$tw.utils.httpRequest({\r\n\t\turl: this.host + \"recipes/\" + this.recipe + \"/tiddlers.json\",\r\n\t\tcallback: function(err,data) {\r\n\t\t\t// Check for errors\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Process the tiddlers to make sure the revision is a string\r\n\t\t\tvar tiddlers = JSON.parse(data);\r\n\t\t\tfor(var t=0; t<tiddlers.length; t++) {\r\n\t\t\t\ttiddlers[t] = self.convertTiddlerFromTiddlyWebFormat(tiddlers[t]);\r\n\t\t\t}\r\n\t\t\t// Invoke the callback with the skinny tiddlers\r\n\t\t\tcallback(null,tiddlers);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nSave a tiddler and invoke the callback with (err,adaptorInfo,revision)\r\n*/\r\nTiddlyWebAdaptor.prototype.saveTiddler = function(tiddler,callback) {\r\n\tvar self = this;\r\n\tif(this.isReadOnly) {\r\n\t\treturn callback(null);\r\n\t}\r\n\t$tw.utils.httpRequest({\r\n\t\turl: this.host + \"recipes/\" + encodeURIComponent(this.recipe) + \"/tiddlers/\" + encodeURIComponent(tiddler.fields.title),\r\n\t\ttype: \"PUT\",\r\n\t\theaders: {\r\n\t\t\t\"Content-type\": \"application/json\"\r\n\t\t},\r\n\t\tdata: this.convertTiddlerToTiddlyWebFormat(tiddler),\r\n\t\tcallback: function(err,data,request) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Save the details of the new revision of the tiddler\r\n\t\t\tvar etagInfo = self.parseEtag(request.getResponseHeader(\"Etag\"));\r\n\t\t\t// Invoke the callback\r\n\t\t\tcallback(null,{\r\n\t\t\t\tbag: etagInfo.bag\r\n\t\t\t}, etagInfo.revision);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nLoad a tiddler and invoke the callback with (err,tiddlerFields)\r\n*/\r\nTiddlyWebAdaptor.prototype.loadTiddler = function(title,callback) {\r\n\tvar self = this;\r\n\t$tw.utils.httpRequest({\r\n\t\turl: this.host + \"recipes/\" + encodeURIComponent(this.recipe) + \"/tiddlers/\" + encodeURIComponent(title),\r\n\t\tcallback: function(err,data,request) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Invoke the callback\r\n\t\t\tcallback(null,self.convertTiddlerFromTiddlyWebFormat(JSON.parse(data)));\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nDelete a tiddler and invoke the callback with (err)\r\noptions include:\r\ntiddlerInfo: the syncer's tiddlerInfo for this tiddler\r\n*/\r\nTiddlyWebAdaptor.prototype.deleteTiddler = function(title,callback,options) {\r\n\tvar self = this;\r\n\tif(this.isReadOnly) {\r\n\t\treturn callback(null);\r\n\t}\r\n\t// If we don't have a bag it means that the tiddler hasn't been seen by the server, so we don't need to delete it\r\n\tvar bag = options.tiddlerInfo.adaptorInfo.bag;\r\n\tif(!bag) {\r\n\t\treturn callback(null);\r\n\t}\r\n\t// Issue HTTP request to delete the tiddler\r\n\t$tw.utils.httpRequest({\r\n\t\turl: this.host + \"bags/\" + encodeURIComponent(bag) + \"/tiddlers/\" + encodeURIComponent(title),\r\n\t\ttype: \"DELETE\",\r\n\t\tcallback: function(err,data,request) {\r\n\t\t\tif(err) {\r\n\t\t\t\treturn callback(err);\r\n\t\t\t}\r\n\t\t\t// Invoke the callback\r\n\t\t\tcallback(null);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nConvert a tiddler to a field set suitable for PUTting to TiddlyWeb\r\n*/\r\nTiddlyWebAdaptor.prototype.convertTiddlerToTiddlyWebFormat = function(tiddler) {\r\n\tvar result = {},\r\n\t\tknownFields = [\r\n\t\t\t\"bag\", \"created\", \"creator\", \"modified\", \"modifier\", \"permissions\", \"recipe\", \"revision\", \"tags\", \"text\", \"title\", \"type\", \"uri\"\r\n\t\t];\r\n\tif(tiddler) {\r\n\t\t$tw.utils.each(tiddler.fields,function(fieldValue,fieldName) {\r\n\t\t\tvar fieldString = fieldName === \"tags\" ?\r\n\t\t\t\t\t\t\t\ttiddler.fields.tags :\r\n\t\t\t\t\t\t\t\ttiddler.getFieldString(fieldName); // Tags must be passed as an array, not a string\r\n\r\n\t\t\tif(knownFields.indexOf(fieldName) !== -1) {\r\n\t\t\t\t// If it's a known field, just copy it across\r\n\t\t\t\tresult[fieldName] = fieldString;\r\n\t\t\t} else {\r\n\t\t\t\t// If it's unknown, put it in the \"fields\" field\r\n\t\t\t\tresult.fields = result.fields || {};\r\n\t\t\t\tresult.fields[fieldName] = fieldString;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t// Default the content type\r\n\tresult.type = result.type || \"text/vnd.tiddlywiki\";\r\n\treturn JSON.stringify(result,null,$tw.config.preferences.jsonSpaces);\r\n};\r\n\r\n/*\r\nConvert a field set in TiddlyWeb format into ordinary TiddlyWiki5 format\r\n*/\r\nTiddlyWebAdaptor.prototype.convertTiddlerFromTiddlyWebFormat = function(tiddlerFields) {\r\n\tvar self = this,\r\n\t\tresult = {};\r\n\t// Transfer the fields, pulling down the `fields` hashmap\r\n\t$tw.utils.each(tiddlerFields,function(element,title,object) {\r\n\t\tif(title === \"fields\") {\r\n\t\t\t$tw.utils.each(element,function(element,subTitle,object) {\r\n\t\t\t\tresult[subTitle] = element;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tresult[title] = tiddlerFields[title];\r\n\t\t}\r\n\t});\r\n\t// Make sure the revision is expressed as a string\r\n\tif(typeof result.revision === \"number\") {\r\n\t\tresult.revision = result.revision.toString();\r\n\t}\r\n\t// Some unholy freaking of content types\r\n\tif(result.type === \"text/javascript\") {\r\n\t\tresult.type = \"application/javascript\";\r\n\t} else if(!result.type || result.type === \"None\") {\r\n\t\tresult.type = \"text/x-tiddlywiki\";\r\n\t}\r\n\treturn result;\r\n};\r\n\r\n/*\r\nSplit a TiddlyWeb Etag into its constituent parts. For example:\r\n\r\n```\r\n\"system-images_public/unsyncedIcon/946151:9f11c278ccde3a3149f339f4a1db80dd4369fc04\"\r\n```\r\n\r\nNote that the value includes the opening and closing double quotes.\r\n\r\nThe parts are:\r\n\r\n```\r\n<bag>/<title>/<revision>:<hash>\r\n```\r\n*/\r\nTiddlyWebAdaptor.prototype.parseEtag = function(etag) {\r\n\tvar firstSlash = etag.indexOf(\"/\"),\r\n\t\tlastSlash = etag.lastIndexOf(\"/\"),\r\n\t\tcolon = etag.lastIndexOf(\":\");\r\n\tif(firstSlash === -1 || lastSlash === -1 || colon === -1) {\r\n\t\treturn null;\r\n\t} else {\r\n\t\treturn {\r\n\t\t\tbag: decodeURIComponent(etag.substring(1,firstSlash)),\r\n\t\t\ttitle: decodeURIComponent(etag.substring(firstSlash + 1,lastSlash)),\r\n\t\t\trevision: etag.substring(lastSlash + 1,colon)\r\n\t\t};\r\n\t}\r\n};\r\n\r\nif($tw.browser && document.location.protocol.substr(0,4) === \"http\" ) {\r\n\texports.adaptorClass = TiddlyWebAdaptor;\r\n}\r\n\r\n})();\r\n","type":"application/javascript","module-type":"syncadaptor"}}}