{"title":"$:/plugins/tiddlywiki/markdown","description":"Markdown parser","author":"JeremyRuston","core-version":">=5.0.0","list":"readme usage","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/config/markdown/dialect":{"title":"$:/config/markdown/dialect","text":"Gruber"},"$:/language/Docs/Types/text/x-markdown":{"title":"$:/language/Docs/Types/text/x-markdown","description":"Markdown","name":"text/x-markdown","group":"Text"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/bold":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/bold","list-after":"$:/core/ui/EditorToolbar/bold","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/bold","caption":"{{$:/language/Buttons/Bold/Caption}} (Markdown)","description":"{{$:/language/Buttons/Bold/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((bold))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"wrap-selection\"\r\n\tprefix=\"**\"\r\n\tsuffix=\"**\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-1":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-1","list-after":"$:/core/ui/EditorToolbar/heading-1","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-1","caption":"{{$:/language/Buttons/Heading1/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading1/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-1))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"1\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-2":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-2","list-after":"$:/core/ui/EditorToolbar/heading-2","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-2","caption":"{{$:/language/Buttons/Heading2/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading2/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-2))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"2\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-3":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-3","list-after":"$:/core/ui/EditorToolbar/heading-3","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-3","caption":"{{$:/language/Buttons/Heading3/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading3/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-3))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"3\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-4":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-4","list-after":"$:/core/ui/EditorToolbar/heading-4","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-4","caption":"{{$:/language/Buttons/Heading4/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading4/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-4))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"4\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-5":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-5","list-after":"$:/core/ui/EditorToolbar/heading-5","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-5","caption":"{{$:/language/Buttons/Heading5/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading5/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-5))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"5\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-6":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/heading-6","list-after":"$:/core/ui/EditorToolbar/heading-6","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/heading-6","caption":"{{$:/language/Buttons/Heading6/Caption}} (Markdown)","description":"{{$:/language/Buttons/Heading6/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((heading-6))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"#\"\r\n\tcount=\"6\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/italic":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/italic","list-after":"$:/core/ui/EditorToolbar/italic","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/italic","caption":"{{$:/language/Buttons/Italic/Caption}} (Markdown)","description":"{{$:/language/Buttons/Italic/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((italic))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"wrap-selection\"\r\n\tprefix=\"*\"\r\n\tsuffix=\"*\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/list-bullet":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/list-bullet","list-after":"$:/core/ui/EditorToolbar/list-bullet","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/list-bullet","caption":"{{$:/language/Buttons/ListBullet/Caption}} (Markdown)","description":"{{$:/language/Buttons/ListBullet/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((list-bullet))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"*\"\r\n\tcount=\"1\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/list-number":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/list-number","list-after":"$:/core/ui/EditorToolbar/list-number","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/list-number","caption":"{{$:/language/Buttons/ListNumber/Caption}} (Markdown)","description":"{{$:/language/Buttons/ListNumber/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((list-number))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\"1.\"\r\n\tcount=\"1\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/mono-line":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/mono-line","list-after":"$:/core/ui/EditorToolbar/mono-line","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/mono-line","caption":"{{$:/language/Buttons/MonoLine/Caption}} (Markdown)","description":"{{$:/language/Buttons/MonoLine/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((mono-line))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"wrap-selection\"\r\n\tprefix=\"`\"\r\n\tsuffix=\"`\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/EditorToolbar/quote":{"title":"$:/plugins/tiddlywiki/markdown/EditorToolbar/quote","list-after":"$:/core/ui/EditorToolbar/quote","tags":"$:/tags/EditorToolbar","icon":"$:/core/images/quote","caption":"{{$:/language/Buttons/Quote/Caption}} (Markdown)","description":"{{$:/language/Buttons/Quote/Hint}}","condition":"[<targetTiddler>type[text/x-markdown]]","shortcuts":"((quote))","text":"<$action-sendmessage\r\n\t$message=\"tm-edit-text-operation\"\r\n\t$param=\"prefix-lines\"\r\n\tcharacter=\">\"\r\n\tcount=\"1\"\r\n/>\r\n"},"$:/plugins/tiddlywiki/markdown/markdown.js":{"text":"// Released under MIT license\r\n// Copyright (c) 2009-2010 Dominic Baggott\r\n// Copyright (c) 2009-2010 Ash Berlin\r\n// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)\r\n\r\n/*jshint browser:true, devel:true */\r\n\r\n(function( expose ) {\r\n\r\n/**\r\n *  class Markdown\r\n *\r\n *  Markdown processing in Javascript done right. We have very particular views\r\n *  on what constitutes 'right' which include:\r\n *\r\n *  - produces well-formed HTML (this means that em and strong nesting is\r\n *    important)\r\n *\r\n *  - has an intermediate representation to allow processing of parsed data (We\r\n *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).\r\n *\r\n *  - is easily extensible to add new dialects without having to rewrite the\r\n *    entire parsing mechanics\r\n *\r\n *  - has a good test suite\r\n *\r\n *  This implementation fulfills all of these (except that the test suite could\r\n *  do with expanding to automatically run all the fixtures from other Markdown\r\n *  implementations.)\r\n *\r\n *  ##### Intermediate Representation\r\n *\r\n *  *TODO* Talk about this :) Its JsonML, but document the node names we use.\r\n *\r\n *  [JsonML]: http://jsonml.org/ \"JSON Markup Language\"\r\n **/\r\nvar Markdown = expose.Markdown = function(dialect) {\r\n  switch (typeof dialect) {\r\n    case \"undefined\":\r\n      this.dialect = Markdown.dialects.Gruber;\r\n      break;\r\n    case \"object\":\r\n      this.dialect = dialect;\r\n      break;\r\n    default:\r\n      if ( dialect in Markdown.dialects ) {\r\n        this.dialect = Markdown.dialects[dialect];\r\n      }\r\n      else {\r\n        throw new Error(\"Unknown Markdown dialect '\" + String(dialect) + \"'\");\r\n      }\r\n      break;\r\n  }\r\n  this.em_state = [];\r\n  this.strong_state = [];\r\n  this.debug_indent = \"\";\r\n};\r\n\r\n/**\r\n *  parse( markdown, [dialect] ) -> JsonML\r\n *  - markdown (String): markdown string to parse\r\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\r\n *\r\n *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.\r\n **/\r\nexpose.parse = function( source, dialect ) {\r\n  // dialect will default if undefined\r\n  var md = new Markdown( dialect );\r\n  return md.toTree( source );\r\n};\r\n\r\n/**\r\n *  toHTML( markdown, [dialect]  ) -> String\r\n *  toHTML( md_tree ) -> String\r\n *  - markdown (String): markdown string to parse\r\n *  - md_tree (Markdown.JsonML): parsed markdown tree\r\n *\r\n *  Take markdown (either as a string or as a JsonML tree) and run it through\r\n *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.\r\n **/\r\nexpose.toHTML = function toHTML( source , dialect , options ) {\r\n  var input = expose.toHTMLTree( source , dialect , options );\r\n\r\n  return expose.renderJsonML( input );\r\n};\r\n\r\n/**\r\n *  toHTMLTree( markdown, [dialect] ) -> JsonML\r\n *  toHTMLTree( md_tree ) -> JsonML\r\n *  - markdown (String): markdown string to parse\r\n *  - dialect (String | Dialect): the dialect to use, defaults to gruber\r\n *  - md_tree (Markdown.JsonML): parsed markdown tree\r\n *\r\n *  Turn markdown into HTML, represented as a JsonML tree. If a string is given\r\n *  to this function, it is first parsed into a markdown tree by calling\r\n *  [[parse]].\r\n **/\r\nexpose.toHTMLTree = function toHTMLTree( input, dialect , options ) {\r\n  // convert string input to an MD tree\r\n  if ( typeof input ===\"string\" ) input = this.parse( input, dialect );\r\n\r\n  // Now convert the MD tree to an HTML tree\r\n\r\n  // remove references from the tree\r\n  var attrs = extract_attr( input ),\r\n      refs = {};\r\n\r\n  if ( attrs && attrs.references ) {\r\n    refs = attrs.references;\r\n  }\r\n\r\n  var html = convert_tree_to_html( input, refs , options );\r\n  merge_text_nodes( html );\r\n  return html;\r\n};\r\n\r\n// For Spidermonkey based engines\r\nfunction mk_block_toSource() {\r\n  return \"Markdown.mk_block( \" +\r\n          uneval(this.toString()) +\r\n          \", \" +\r\n          uneval(this.trailing) +\r\n          \", \" +\r\n          uneval(this.lineNumber) +\r\n          \" )\";\r\n}\r\n\r\n// node\r\nfunction mk_block_inspect() {\r\n  var util = require(\"util\");\r\n  return \"Markdown.mk_block( \" +\r\n          util.inspect(this.toString()) +\r\n          \", \" +\r\n          util.inspect(this.trailing) +\r\n          \", \" +\r\n          util.inspect(this.lineNumber) +\r\n          \" )\";\r\n\r\n}\r\n\r\nvar mk_block = Markdown.mk_block = function(block, trail, line) {\r\n  // Be helpful for default case in tests.\r\n  if ( arguments.length == 1 ) trail = \"\\n\\n\";\r\n\r\n  var s = new String(block);\r\n  s.trailing = trail;\r\n  // To make it clear its not just a string\r\n  s.inspect = mk_block_inspect;\r\n  s.toSource = mk_block_toSource;\r\n\r\n  if ( line != undefined )\r\n    s.lineNumber = line;\r\n\r\n  return s;\r\n};\r\n\r\nfunction count_lines( str ) {\r\n  var n = 0, i = -1;\r\n  while ( ( i = str.indexOf(\"\\n\", i + 1) ) !== -1 ) n++;\r\n  return n;\r\n}\r\n\r\n// Internal - split source into rough blocks\r\nMarkdown.prototype.split_blocks = function splitBlocks( input, startLine ) {\r\n  input = input.replace(/(\\r\\n|\\n|\\r)/g, \"\\n\");\r\n  // [\\s\\S] matches _anything_ (newline or space)\r\n  // [^] is equivalent but doesn't work in IEs.\r\n  var re = /([\\s\\S]+?)($|\\n#|\\n(?:\\s*\\n|$)+)/g,\r\n      blocks = [],\r\n      m;\r\n\r\n  var line_no = 1;\r\n\r\n  if ( ( m = /^(\\s*\\n)/.exec(input) ) != null ) {\r\n    // skip (but count) leading blank lines\r\n    line_no += count_lines( m[0] );\r\n    re.lastIndex = m[0].length;\r\n  }\r\n\r\n  while ( ( m = re.exec(input) ) !== null ) {\r\n    if (m[2] == \"\\n#\") {\r\n      m[2] = \"\\n\";\r\n      re.lastIndex--;\r\n    }\r\n    blocks.push( mk_block( m[1], m[2], line_no ) );\r\n    line_no += count_lines( m[0] );\r\n  }\r\n\r\n  return blocks;\r\n};\r\n\r\n/**\r\n *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]\r\n *  - block (String): the block to process\r\n *  - next (Array): the following blocks\r\n *\r\n * Process `block` and return an array of JsonML nodes representing `block`.\r\n *\r\n * It does this by asking each block level function in the dialect to process\r\n * the block until one can. Succesful handling is indicated by returning an\r\n * array (with zero or more JsonML nodes), failure by a false value.\r\n *\r\n * Blocks handlers are responsible for calling [[Markdown#processInline]]\r\n * themselves as appropriate.\r\n *\r\n * If the blocks were split incorrectly or adjacent blocks need collapsing you\r\n * can adjust `next` in place using shift/splice etc.\r\n *\r\n * If any of this default behaviour is not right for the dialect, you can\r\n * define a `__call__` method on the dialect that will get invoked to handle\r\n * the block processing.\r\n */\r\nMarkdown.prototype.processBlock = function processBlock( block, next ) {\r\n  var cbs = this.dialect.block,\r\n      ord = cbs.__order__;\r\n\r\n  if ( \"__call__\" in cbs ) {\r\n    return cbs.__call__.call(this, block, next);\r\n  }\r\n\r\n  for ( var i = 0; i < ord.length; i++ ) {\r\n    //D:this.debug( \"Testing\", ord[i] );\r\n    var res = cbs[ ord[i] ].call( this, block, next );\r\n    if ( res ) {\r\n      //D:this.debug(\"  matched\");\r\n      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )\r\n        this.debug(ord[i], \"didn't return a proper array\");\r\n      //D:this.debug( \"\" );\r\n      return res;\r\n    }\r\n  }\r\n\r\n  // Uhoh! no match! Should we throw an error?\r\n  return [];\r\n};\r\n\r\nMarkdown.prototype.processInline = function processInline( block ) {\r\n  return this.dialect.inline.__call__.call( this, String( block ) );\r\n};\r\n\r\n/**\r\n *  Markdown#toTree( source ) -> JsonML\r\n *  - source (String): markdown source to parse\r\n *\r\n *  Parse `source` into a JsonML tree representing the markdown document.\r\n **/\r\n// custom_tree means set this.tree to `custom_tree` and restore old value on return\r\nMarkdown.prototype.toTree = function toTree( source, custom_root ) {\r\n  var blocks = source instanceof Array ? source : this.split_blocks( source );\r\n\r\n  // Make tree a member variable so its easier to mess with in extensions\r\n  var old_tree = this.tree;\r\n  try {\r\n    this.tree = custom_root || this.tree || [ \"markdown\" ];\r\n\r\n    blocks:\r\n    while ( blocks.length ) {\r\n      var b = this.processBlock( blocks.shift(), blocks );\r\n\r\n      // Reference blocks and the like won't return any content\r\n      if ( !b.length ) continue blocks;\r\n\r\n      this.tree.push.apply( this.tree, b );\r\n    }\r\n    return this.tree;\r\n  }\r\n  finally {\r\n    if ( custom_root ) {\r\n      this.tree = old_tree;\r\n    }\r\n  }\r\n};\r\n\r\n// Noop by default\r\nMarkdown.prototype.debug = function () {\r\n  var args = Array.prototype.slice.call( arguments);\r\n  args.unshift(this.debug_indent);\r\n  if ( typeof print !== \"undefined\" )\r\n      print.apply( print, args );\r\n  if ( typeof console !== \"undefined\" && typeof console.log !== \"undefined\" )\r\n      console.log.apply( null, args );\r\n}\r\n\r\nMarkdown.prototype.loop_re_over_block = function( re, block, cb ) {\r\n  // Dont use /g regexps with this\r\n  var m,\r\n      b = block.valueOf();\r\n\r\n  while ( b.length && (m = re.exec(b) ) != null ) {\r\n    b = b.substr( m[0].length );\r\n    cb.call(this, m);\r\n  }\r\n  return b;\r\n};\r\n\r\n/**\r\n * Markdown.dialects\r\n *\r\n * Namespace of built-in dialects.\r\n **/\r\nMarkdown.dialects = {};\r\n\r\n/**\r\n * Markdown.dialects.Gruber\r\n *\r\n * The default dialect that follows the rules set out by John Gruber's\r\n * markdown.pl as closely as possible. Well actually we follow the behaviour of\r\n * that script which in some places is not exactly what the syntax web page\r\n * says.\r\n **/\r\nMarkdown.dialects.Gruber = {\r\n  block: {\r\n    atxHeader: function atxHeader( block, next ) {\r\n      var m = block.match( /^(#{1,6})\\s*(.*?)\\s*#*\\s*(?:\\n|$)/ );\r\n\r\n      if ( !m ) return undefined;\r\n\r\n      var header = [ \"header\", { level: m[ 1 ].length } ];\r\n      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));\r\n\r\n      if ( m[0].length < block.length )\r\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\r\n\r\n      return [ header ];\r\n    },\r\n\r\n    setextHeader: function setextHeader( block, next ) {\r\n      var m = block.match( /^(.*)\\n([-=])\\2\\2+(?:\\n|$)/ );\r\n\r\n      if ( !m ) return undefined;\r\n\r\n      var level = ( m[ 2 ] === \"=\" ) ? 1 : 2;\r\n      var header = [ \"header\", { level : level }, m[ 1 ] ];\r\n\r\n      if ( m[0].length < block.length )\r\n        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );\r\n\r\n      return [ header ];\r\n    },\r\n\r\n    code: function code( block, next ) {\r\n      // |    Foo\r\n      // |bar\r\n      // should be a code block followed by a paragraph. Fun\r\n      //\r\n      // There might also be adjacent code block to merge.\r\n\r\n      var ret = [],\r\n          re = /^(?: {0,3}\\t| {4})(.*)\\n?/,\r\n          lines;\r\n\r\n      // 4 spaces + content\r\n      if ( !block.match( re ) ) return undefined;\r\n\r\n      block_search:\r\n      do {\r\n        // Now pull out the rest of the lines\r\n        var b = this.loop_re_over_block(\r\n                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );\r\n\r\n        if ( b.length ) {\r\n          // Case alluded to in first comment. push it back on as a new block\r\n          next.unshift( mk_block(b, block.trailing) );\r\n          break block_search;\r\n        }\r\n        else if ( next.length ) {\r\n          // Check the next block - it might be code too\r\n          if ( !next[0].match( re ) ) break block_search;\r\n\r\n          // Pull how how many blanks lines follow - minus two to account for .join\r\n          ret.push ( block.trailing.replace(/[^\\n]/g, \"\").substring(2) );\r\n\r\n          block = next.shift();\r\n        }\r\n        else {\r\n          break block_search;\r\n        }\r\n      } while ( true );\r\n\r\n      return [ [ \"code_block\", ret.join(\"\\n\") ] ];\r\n    },\r\n\r\n    horizRule: function horizRule( block, next ) {\r\n      // this needs to find any hr in the block to handle abutting blocks\r\n      var m = block.match( /^(?:([\\s\\S]*?)\\n)?[ \\t]*([-_*])(?:[ \\t]*\\2){2,}[ \\t]*(?:\\n([\\s\\S]*))?$/ );\r\n\r\n      if ( !m ) {\r\n        return undefined;\r\n      }\r\n\r\n      var jsonml = [ [ \"hr\" ] ];\r\n\r\n      // if there's a leading abutting block, process it\r\n      if ( m[ 1 ] ) {\r\n        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );\r\n      }\r\n\r\n      // if there's a trailing abutting block, stick it into next\r\n      if ( m[ 3 ] ) {\r\n        next.unshift( mk_block( m[ 3 ] ) );\r\n      }\r\n\r\n      return jsonml;\r\n    },\r\n\r\n    // There are two types of lists. Tight and loose. Tight lists have no whitespace\r\n    // between the items (and result in text just in the <li>) and loose lists,\r\n    // which have an empty line between list items, resulting in (one or more)\r\n    // paragraphs inside the <li>.\r\n    //\r\n    // There are all sorts weird edge cases about the original markdown.pl's\r\n    // handling of lists:\r\n    //\r\n    // * Nested lists are supposed to be indented by four chars per level. But\r\n    //   if they aren't, you can get a nested list by indenting by less than\r\n    //   four so long as the indent doesn't match an indent of an existing list\r\n    //   item in the 'nest stack'.\r\n    //\r\n    // * The type of the list (bullet or number) is controlled just by the\r\n    //    first item at the indent. Subsequent changes are ignored unless they\r\n    //    are for nested lists\r\n    //\r\n    lists: (function( ) {\r\n      // Use a closure to hide a few variables.\r\n      var any_list = \"[*+-]|\\\\d+\\\\.\",\r\n          bullet_list = /[*+-]/,\r\n          number_list = /\\d+\\./,\r\n          // Capture leading indent as it matters for determining nested lists.\r\n          is_list_re = new RegExp( \"^( {0,3})(\" + any_list + \")[ \\t]+\" ),\r\n          indent_re = \"(?: {0,3}\\\\t| {4})\";\r\n\r\n      // TODO: Cache this regexp for certain depths.\r\n      // Create a regexp suitable for matching an li for a given stack depth\r\n      function regex_for_depth( depth ) {\r\n\r\n        return new RegExp(\r\n          // m[1] = indent, m[2] = list_type\r\n          \"(?:^(\" + indent_re + \"{0,\" + depth + \"} {0,3})(\" + any_list + \")\\\\s+)|\" +\r\n          // m[3] = cont\r\n          \"(^\" + indent_re + \"{0,\" + (depth-1) + \"}[ ]{0,4})\"\r\n        );\r\n      }\r\n      function expand_tab( input ) {\r\n        return input.replace( / {0,3}\\t/g, \"    \" );\r\n      }\r\n\r\n      // Add inline content `inline` to `li`. inline comes from processInline\r\n      // so is an array of content\r\n      function add(li, loose, inline, nl) {\r\n        if ( loose ) {\r\n          li.push( [ \"para\" ].concat(inline) );\r\n          return;\r\n        }\r\n        // Hmmm, should this be any block level element or just paras?\r\n        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == \"para\"\r\n                   ? li[li.length -1]\r\n                   : li;\r\n\r\n        // If there is already some content in this list, add the new line in\r\n        if ( nl && li.length > 1 ) inline.unshift(nl);\r\n\r\n        for ( var i = 0; i < inline.length; i++ ) {\r\n          var what = inline[i],\r\n              is_str = typeof what == \"string\";\r\n          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == \"string\" ) {\r\n            add_to[ add_to.length-1 ] += what;\r\n          }\r\n          else {\r\n            add_to.push( what );\r\n          }\r\n        }\r\n      }\r\n\r\n      // contained means have an indent greater than the current one. On\r\n      // *every* line in the block\r\n      function get_contained_blocks( depth, blocks ) {\r\n\r\n        var re = new RegExp( \"^(\" + indent_re + \"{\" + depth + \"}.*?\\\\n?)*$\" ),\r\n            replace = new RegExp(\"^\" + indent_re + \"{\" + depth + \"}\", \"gm\"),\r\n            ret = [];\r\n\r\n        while ( blocks.length > 0 ) {\r\n          if ( re.exec( blocks[0] ) ) {\r\n            var b = blocks.shift(),\r\n                // Now remove that indent\r\n                x = b.replace( replace, \"\");\r\n\r\n            ret.push( mk_block( x, b.trailing, b.lineNumber ) );\r\n          }\r\n          else {\r\n            break;\r\n          }\r\n        }\r\n        return ret;\r\n      }\r\n\r\n      // passed to stack.forEach to turn list items up the stack into paras\r\n      function paragraphify(s, i, stack) {\r\n        var list = s.list;\r\n        var last_li = list[list.length-1];\r\n\r\n        if ( last_li[1] instanceof Array && last_li[1][0] == \"para\" ) {\r\n          return;\r\n        }\r\n        if ( i + 1 == stack.length ) {\r\n          // Last stack frame\r\n          // Keep the same array, but replace the contents\r\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ) );\r\n        }\r\n        else {\r\n          var sublist = last_li.pop();\r\n          last_li.push( [\"para\"].concat( last_li.splice(1, last_li.length - 1) ), sublist );\r\n        }\r\n      }\r\n\r\n      // The matcher function\r\n      return function( block, next ) {\r\n        var m = block.match( is_list_re );\r\n        if ( !m ) return undefined;\r\n\r\n        function make_list( m ) {\r\n          var list = bullet_list.exec( m[2] )\r\n                   ? [\"bulletlist\"]\r\n                   : [\"numberlist\"];\r\n\r\n          stack.push( { list: list, indent: m[1] } );\r\n          return list;\r\n        }\r\n\r\n\r\n        var stack = [], // Stack of lists for nesting.\r\n            list = make_list( m ),\r\n            last_li,\r\n            loose = false,\r\n            ret = [ stack[0].list ],\r\n            i;\r\n\r\n        // Loop to search over block looking for inner block elements and loose lists\r\n        loose_search:\r\n        while ( true ) {\r\n          // Split into lines preserving new lines at end of line\r\n          var lines = block.split( /(?=\\n)/ );\r\n\r\n          // We have to grab all lines for a li and call processInline on them\r\n          // once as there are some inline things that can span lines.\r\n          var li_accumulate = \"\";\r\n\r\n          // Loop over the lines in this block looking for tight lists.\r\n          tight_search:\r\n          for ( var line_no = 0; line_no < lines.length; line_no++ ) {\r\n            var nl = \"\",\r\n                l = lines[line_no].replace(/^\\n/, function(n) { nl = n; return \"\"; });\r\n\r\n            // TODO: really should cache this\r\n            var line_re = regex_for_depth( stack.length );\r\n\r\n            m = l.match( line_re );\r\n            //print( \"line:\", uneval(l), \"\\nline match:\", uneval(m) );\r\n\r\n            // We have a list item\r\n            if ( m[1] !== undefined ) {\r\n              // Process the previous list item, if any\r\n              if ( li_accumulate.length ) {\r\n                add( last_li, loose, this.processInline( li_accumulate ), nl );\r\n                // Loose mode will have been dealt with. Reset it\r\n                loose = false;\r\n                li_accumulate = \"\";\r\n              }\r\n\r\n              m[1] = expand_tab( m[1] );\r\n              var wanted_depth = Math.floor(m[1].length/4)+1;\r\n              //print( \"want:\", wanted_depth, \"stack:\", stack.length);\r\n              if ( wanted_depth > stack.length ) {\r\n                // Deep enough for a nested list outright\r\n                //print ( \"new nested list\" );\r\n                list = make_list( m );\r\n                last_li.push( list );\r\n                last_li = list[1] = [ \"listitem\" ];\r\n              }\r\n              else {\r\n                // We aren't deep enough to be strictly a new level. This is\r\n                // where Md.pl goes nuts. If the indent matches a level in the\r\n                // stack, put it there, else put it one deeper then the\r\n                // wanted_depth deserves.\r\n                var found = false;\r\n                for ( i = 0; i < stack.length; i++ ) {\r\n                  if ( stack[ i ].indent != m[1] ) continue;\r\n                  list = stack[ i ].list;\r\n                  stack.splice( i+1, stack.length - (i+1) );\r\n                  found = true;\r\n                  break;\r\n                }\r\n\r\n                if (!found) {\r\n                  //print(\"not found. l:\", uneval(l));\r\n                  wanted_depth++;\r\n                  if ( wanted_depth <= stack.length ) {\r\n                    stack.splice(wanted_depth, stack.length - wanted_depth);\r\n                    //print(\"Desired depth now\", wanted_depth, \"stack:\", stack.length);\r\n                    list = stack[wanted_depth-1].list;\r\n                    //print(\"list:\", uneval(list) );\r\n                  }\r\n                  else {\r\n                    //print (\"made new stack for messy indent\");\r\n                    list = make_list(m);\r\n                    last_li.push(list);\r\n                  }\r\n                }\r\n\r\n                //print( uneval(list), \"last\", list === stack[stack.length-1].list );\r\n                last_li = [ \"listitem\" ];\r\n                list.push(last_li);\r\n              } // end depth of shenegains\r\n              nl = \"\";\r\n            }\r\n\r\n            // Add content\r\n            if ( l.length > m[0].length ) {\r\n              li_accumulate += nl + l.substr( m[0].length );\r\n            }\r\n          } // tight_search\r\n\r\n          if ( li_accumulate.length ) {\r\n            add( last_li, loose, this.processInline( li_accumulate ), nl );\r\n            // Loose mode will have been dealt with. Reset it\r\n            loose = false;\r\n            li_accumulate = \"\";\r\n          }\r\n\r\n          // Look at the next block - we might have a loose list. Or an extra\r\n          // paragraph for the current li\r\n          var contained = get_contained_blocks( stack.length, next );\r\n\r\n          // Deal with code blocks or properly nested lists\r\n          if ( contained.length > 0 ) {\r\n            // Make sure all listitems up the stack are paragraphs\r\n            forEach( stack, paragraphify, this);\r\n\r\n            last_li.push.apply( last_li, this.toTree( contained, [] ) );\r\n          }\r\n\r\n          var next_block = next[0] && next[0].valueOf() || \"\";\r\n\r\n          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {\r\n            block = next.shift();\r\n\r\n            // Check for an HR following a list: features/lists/hr_abutting\r\n            var hr = this.dialect.block.horizRule( block, next );\r\n\r\n            if ( hr ) {\r\n              ret.push.apply(ret, hr);\r\n              break;\r\n            }\r\n\r\n            // Make sure all listitems up the stack are paragraphs\r\n            forEach( stack, paragraphify, this);\r\n\r\n            loose = true;\r\n            continue loose_search;\r\n          }\r\n          break;\r\n        } // loose_search\r\n\r\n        return ret;\r\n      };\r\n    })(),\r\n\r\n    blockquote: function blockquote( block, next ) {\r\n      if ( !block.match( /^>/m ) )\r\n        return undefined;\r\n\r\n      var jsonml = [];\r\n\r\n      // separate out the leading abutting block, if any. I.e. in this case:\r\n      //\r\n      //  a\r\n      //  > b\r\n      //\r\n      if ( block[ 0 ] != \">\" ) {\r\n        var lines = block.split( /\\n/ ),\r\n            prev = [],\r\n            line_no = block.lineNumber;\r\n\r\n        // keep shifting lines until you find a crotchet\r\n        while ( lines.length && lines[ 0 ][ 0 ] != \">\" ) {\r\n            prev.push( lines.shift() );\r\n            line_no++;\r\n        }\r\n\r\n        var abutting = mk_block( prev.join( \"\\n\" ), \"\\n\", block.lineNumber );\r\n        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );\r\n        // reassemble new block of just block quotes!\r\n        block = mk_block( lines.join( \"\\n\" ), block.trailing, line_no );\r\n      }\r\n\r\n\r\n      // if the next block is also a blockquote merge it in\r\n      while ( next.length && next[ 0 ][ 0 ] == \">\" ) {\r\n        var b = next.shift();\r\n        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );\r\n      }\r\n\r\n      // Strip off the leading \"> \" and re-process as a block.\r\n      var input = block.replace( /^> ?/gm, \"\" ),\r\n          old_tree = this.tree,\r\n          processedBlock = this.toTree( input, [ \"blockquote\" ] ),\r\n          attr = extract_attr( processedBlock );\r\n\r\n      // If any link references were found get rid of them\r\n      if ( attr && attr.references ) {\r\n        delete attr.references;\r\n        // And then remove the attribute object if it's empty\r\n        if ( isEmpty( attr ) ) {\r\n          processedBlock.splice( 1, 1 );\r\n        }\r\n      }\r\n\r\n      jsonml.push( processedBlock );\r\n      return jsonml;\r\n    },\r\n\r\n    referenceDefn: function referenceDefn( block, next) {\r\n      var re = /^\\s*\\[(.*?)\\]:\\s*(\\S+)(?:\\s+(?:(['\"])(.*?)\\3|\\((.*?)\\)))?\\n?/;\r\n      // interesting matches are [ , ref_id, url, , title, title ]\r\n\r\n      if ( !block.match(re) )\r\n        return undefined;\r\n\r\n      // make an attribute node if it doesn't exist\r\n      if ( !extract_attr( this.tree ) ) {\r\n        this.tree.splice( 1, 0, {} );\r\n      }\r\n\r\n      var attrs = extract_attr( this.tree );\r\n\r\n      // make a references hash if it doesn't exist\r\n      if ( attrs.references === undefined ) {\r\n        attrs.references = {};\r\n      }\r\n\r\n      var b = this.loop_re_over_block(re, block, function( m ) {\r\n\r\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\r\n          m[2] = m[2].substring( 1, m[2].length - 1 );\r\n\r\n        var ref = attrs.references[ m[1].toLowerCase() ] = {\r\n          href: m[2]\r\n        };\r\n\r\n        if ( m[4] !== undefined )\r\n          ref.title = m[4];\r\n        else if ( m[5] !== undefined )\r\n          ref.title = m[5];\r\n\r\n      } );\r\n\r\n      if ( b.length )\r\n        next.unshift( mk_block( b, block.trailing ) );\r\n\r\n      return [];\r\n    },\r\n\r\n    para: function para( block, next ) {\r\n      // everything's a para!\r\n      return [ [\"para\"].concat( this.processInline( block ) ) ];\r\n    }\r\n  }\r\n};\r\n\r\nMarkdown.dialects.Gruber.inline = {\r\n\r\n    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {\r\n      var m,\r\n          res,\r\n          lastIndex = 0;\r\n\r\n      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;\r\n      var re = new RegExp( \"([\\\\s\\\\S]*?)(\" + (patterns_or_re.source || patterns_or_re) + \")\" );\r\n\r\n      m = re.exec( text );\r\n      if (!m) {\r\n        // Just boring text\r\n        return [ text.length, text ];\r\n      }\r\n      else if ( m[1] ) {\r\n        // Some un-interesting text matched. Return that first\r\n        return [ m[1].length, m[1] ];\r\n      }\r\n\r\n      var res;\r\n      if ( m[2] in this.dialect.inline ) {\r\n        res = this.dialect.inline[ m[2] ].call(\r\n                  this,\r\n                  text.substr( m.index ), m, previous_nodes || [] );\r\n      }\r\n      // Default for now to make dev easier. just slurp special and output it.\r\n      res = res || [ m[2].length, m[2] ];\r\n      return res;\r\n    },\r\n\r\n    __call__: function inline( text, patterns ) {\r\n\r\n      var out = [],\r\n          res;\r\n\r\n      function add(x) {\r\n        //D:self.debug(\"  adding output\", uneval(x));\r\n        if ( typeof x == \"string\" && typeof out[out.length-1] == \"string\" )\r\n          out[ out.length-1 ] += x;\r\n        else\r\n          out.push(x);\r\n      }\r\n\r\n      while ( text.length > 0 ) {\r\n        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );\r\n        text = text.substr( res.shift() );\r\n        forEach(res, add )\r\n      }\r\n\r\n      return out;\r\n    },\r\n\r\n    // These characters are intersting elsewhere, so have rules for them so that\r\n    // chunks of plain text blocks don't include them\r\n    \"]\": function () {},\r\n    \"}\": function () {},\r\n\r\n    __escape__ : /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-]/,\r\n\r\n    \"\\\\\": function escaped( text ) {\r\n      // [ length of input processed, node/children to add... ]\r\n      // Only esacape: \\ ` * _ { } [ ] ( ) # * + - . !\r\n      if ( this.dialect.inline.__escape__.exec( text ) )\r\n        return [ 2, text.charAt( 1 ) ];\r\n      else\r\n        // Not an esacpe\r\n        return [ 1, \"\\\\\" ];\r\n    },\r\n\r\n    \"![\": function image( text ) {\r\n\r\n      // Unlike images, alt text is plain text only. no other elements are\r\n      // allowed in there\r\n\r\n      // ![Alt text](/path/to/img.jpg \"Optional title\")\r\n      //      1          2            3       4         <--- captures\r\n      var m = text.match( /^!\\[(.*?)\\][ \\t]*\\([ \\t]*([^\")]*?)(?:[ \\t]+([\"'])(.*?)\\3)?[ \\t]*\\)/ );\r\n\r\n      if ( m ) {\r\n        if ( m[2] && m[2][0] == \"<\" && m[2][m[2].length-1] == \">\" )\r\n          m[2] = m[2].substring( 1, m[2].length - 1 );\r\n\r\n        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\\\/ )[0];\r\n\r\n        var attrs = { alt: m[1], href: m[2] || \"\" };\r\n        if ( m[4] !== undefined)\r\n          attrs.title = m[4];\r\n\r\n        return [ m[0].length, [ \"img\", attrs ] ];\r\n      }\r\n\r\n      // ![Alt text][id]\r\n      m = text.match( /^!\\[(.*?)\\][ \\t]*\\[(.*?)\\]/ );\r\n\r\n      if ( m ) {\r\n        // We can't check if the reference is known here as it likely wont be\r\n        // found till after. Check it in md tree->hmtl tree conversion\r\n        return [ m[0].length, [ \"img_ref\", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];\r\n      }\r\n\r\n      // Just consume the '!['\r\n      return [ 2, \"![\" ];\r\n    },\r\n\r\n    \"[\": function link( text ) {\r\n\r\n      var orig = String(text);\r\n      // Inline content is possible inside `link text`\r\n      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), \"]\" );\r\n\r\n      // No closing ']' found. Just consume the [\r\n      if ( !res ) return [ 1, \"[\" ];\r\n\r\n      var consumed = 1 + res[ 0 ],\r\n          children = res[ 1 ],\r\n          link,\r\n          attrs;\r\n\r\n      // At this point the first [...] has been parsed. See what follows to find\r\n      // out which kind of link we are (reference or direct url)\r\n      text = text.substr( consumed );\r\n\r\n      // [link text](/path/to/img.jpg \"Optional title\")\r\n      //                 1            2       3         <--- captures\r\n      // This will capture up to the last paren in the block. We then pull\r\n      // back based on if there a matching ones in the url\r\n      //    ([here](/url/(test))\r\n      // The parens have to be balanced\r\n      var m = text.match( /^\\s*\\([ \\t]*([^\"']*)(?:[ \\t]+([\"'])(.*?)\\2)?[ \\t]*\\)/ );\r\n      if ( m ) {\r\n        var url = m[1];\r\n        consumed += m[0].length;\r\n\r\n        if ( url && url[0] == \"<\" && url[url.length-1] == \">\" )\r\n          url = url.substring( 1, url.length - 1 );\r\n\r\n        // If there is a title we don't have to worry about parens in the url\r\n        if ( !m[3] ) {\r\n          var open_parens = 1; // One open that isn't in the capture\r\n          for ( var len = 0; len < url.length; len++ ) {\r\n            switch ( url[len] ) {\r\n            case \"(\":\r\n              open_parens++;\r\n              break;\r\n            case \")\":\r\n              if ( --open_parens == 0) {\r\n                consumed -= url.length - len;\r\n                url = url.substring(0, len);\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Process escapes only\r\n        url = this.dialect.inline.__call__.call( this, url, /\\\\/ )[0];\r\n\r\n        attrs = { href: url || \"\" };\r\n        if ( m[3] !== undefined)\r\n          attrs.title = m[3];\r\n\r\n        link = [ \"link\", attrs ].concat( children );\r\n        return [ consumed, link ];\r\n      }\r\n\r\n      // [Alt text][id]\r\n      // [Alt text] [id]\r\n      m = text.match( /^\\s*\\[(.*?)\\]/ );\r\n\r\n      if ( m ) {\r\n\r\n        consumed += m[ 0 ].length;\r\n\r\n        // [links][] uses links as its reference\r\n        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };\r\n\r\n        link = [ \"link_ref\", attrs ].concat( children );\r\n\r\n        // We can't check if the reference is known here as it likely wont be\r\n        // found till after. Check it in md tree->hmtl tree conversion.\r\n        // Store the original so that conversion can revert if the ref isn't found.\r\n        return [ consumed, link ];\r\n      }\r\n\r\n      // [id]\r\n      // Only if id is plain (no formatting.)\r\n      if ( children.length == 1 && typeof children[0] == \"string\" ) {\r\n\r\n        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };\r\n        link = [ \"link_ref\", attrs, children[0] ];\r\n        return [ consumed, link ];\r\n      }\r\n\r\n      // Just consume the \"[\"\r\n      return [ 1, \"[\" ];\r\n    },\r\n\r\n\r\n    \"<\": function autoLink( text ) {\r\n      var m;\r\n\r\n      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\\.[a-zA-Z]+))>/ ) ) != null ) {\r\n        if ( m[3] ) {\r\n          return [ m[0].length, [ \"link\", { href: \"mailto:\" + m[3] }, m[3] ] ];\r\n\r\n        }\r\n        else if ( m[2] == \"mailto\" ) {\r\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1].substr(\"mailto:\".length ) ] ];\r\n        }\r\n        else\r\n          return [ m[0].length, [ \"link\", { href: m[1] }, m[1] ] ];\r\n      }\r\n\r\n      return [ 1, \"<\" ];\r\n    },\r\n\r\n    \"`\": function inlineCode( text ) {\r\n      // Inline code block. as many backticks as you like to start it\r\n      // Always skip over the opening ticks.\r\n      var m = text.match( /(`+)(([\\s\\S]*?)\\1)/ );\r\n\r\n      if ( m && m[2] )\r\n        return [ m[1].length + m[2].length, [ \"inlinecode\", m[3] ] ];\r\n      else {\r\n        // TODO: No matching end code found - warn!\r\n        return [ 1, \"`\" ];\r\n      }\r\n    },\r\n\r\n    \"  \\n\": function lineBreak( text ) {\r\n      return [ 3, [ \"linebreak\" ] ];\r\n    }\r\n\r\n};\r\n\r\n// Meta Helper/generator method for em and strong handling\r\nfunction strong_em( tag, md ) {\r\n\r\n  var state_slot = tag + \"_state\",\r\n      other_slot = tag == \"strong\" ? \"em_state\" : \"strong_state\";\r\n\r\n  function CloseTag(len) {\r\n    this.len_after = len;\r\n    this.name = \"close_\" + md;\r\n  }\r\n\r\n  return function ( text, orig_match ) {\r\n\r\n    if ( this[state_slot][0] == md ) {\r\n      // Most recent em is of this type\r\n      //D:this.debug(\"closing\", md);\r\n      this[state_slot].shift();\r\n\r\n      // \"Consume\" everything to go back to the recrusion in the else-block below\r\n      return[ text.length, new CloseTag(text.length-md.length) ];\r\n    }\r\n    else {\r\n      // Store a clone of the em/strong states\r\n      var other = this[other_slot].slice(),\r\n          state = this[state_slot].slice();\r\n\r\n      this[state_slot].unshift(md);\r\n\r\n      //D:this.debug_indent += \"  \";\r\n\r\n      // Recurse\r\n      var res = this.processInline( text.substr( md.length ) );\r\n      //D:this.debug_indent = this.debug_indent.substr(2);\r\n\r\n      var last = res[res.length - 1];\r\n\r\n      //D:this.debug(\"processInline from\", tag + \": \", uneval( res ) );\r\n\r\n      var check = this[state_slot].shift();\r\n      if ( last instanceof CloseTag ) {\r\n        res.pop();\r\n        // We matched! Huzzah.\r\n        var consumed = text.length - last.len_after;\r\n        return [ consumed, [ tag ].concat(res) ];\r\n      }\r\n      else {\r\n        // Restore the state of the other kind. We might have mistakenly closed it.\r\n        this[other_slot] = other;\r\n        this[state_slot] = state;\r\n\r\n        // We can't reuse the processed result as it could have wrong parsing contexts in it.\r\n        return [ md.length, md ];\r\n      }\r\n    }\r\n  }; // End returned function\r\n}\r\n\r\nMarkdown.dialects.Gruber.inline[\"**\"] = strong_em(\"strong\", \"**\");\r\nMarkdown.dialects.Gruber.inline[\"__\"] = strong_em(\"strong\", \"__\");\r\nMarkdown.dialects.Gruber.inline[\"*\"]  = strong_em(\"em\", \"*\");\r\nMarkdown.dialects.Gruber.inline[\"_\"]  = strong_em(\"em\", \"_\");\r\n\r\n\r\n// Build default order from insertion order.\r\nMarkdown.buildBlockOrder = function(d) {\r\n  var ord = [];\r\n  for ( var i in d ) {\r\n    if ( i == \"__order__\" || i == \"__call__\" ) continue;\r\n    ord.push( i );\r\n  }\r\n  d.__order__ = ord;\r\n};\r\n\r\n// Build patterns for inline matcher\r\nMarkdown.buildInlinePatterns = function(d) {\r\n  var patterns = [];\r\n\r\n  for ( var i in d ) {\r\n    // __foo__ is reserved and not a pattern\r\n    if ( i.match( /^__.*__$/) ) continue;\r\n    var l = i.replace( /([\\\\.*+?|()\\[\\]{}])/g, \"\\\\$1\" )\r\n             .replace( /\\n/, \"\\\\n\" );\r\n    patterns.push( i.length == 1 ? l : \"(?:\" + l + \")\" );\r\n  }\r\n\r\n  patterns = patterns.join(\"|\");\r\n  d.__patterns__ = patterns;\r\n  //print(\"patterns:\", uneval( patterns ) );\r\n\r\n  var fn = d.__call__;\r\n  d.__call__ = function(text, pattern) {\r\n    if ( pattern != undefined ) {\r\n      return fn.call(this, text, pattern);\r\n    }\r\n    else\r\n    {\r\n      return fn.call(this, text, patterns);\r\n    }\r\n  };\r\n};\r\n\r\nMarkdown.DialectHelpers = {};\r\nMarkdown.DialectHelpers.inline_until_char = function( text, want ) {\r\n  var consumed = 0,\r\n      nodes = [];\r\n\r\n  while ( true ) {\r\n    if ( text.charAt( consumed ) == want ) {\r\n      // Found the character we were looking for\r\n      consumed++;\r\n      return [ consumed, nodes ];\r\n    }\r\n\r\n    if ( consumed >= text.length ) {\r\n      // No closing char found. Abort.\r\n      return null;\r\n    }\r\n\r\n    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );\r\n    consumed += res[ 0 ];\r\n    // Add any returned nodes.\r\n    nodes.push.apply( nodes, res.slice( 1 ) );\r\n  }\r\n}\r\n\r\n// Helper function to make sub-classing a dialect easier\r\nMarkdown.subclassDialect = function( d ) {\r\n  function Block() {}\r\n  Block.prototype = d.block;\r\n  function Inline() {}\r\n  Inline.prototype = d.inline;\r\n\r\n  return { block: new Block(), inline: new Inline() };\r\n};\r\n\r\nMarkdown.buildBlockOrder ( Markdown.dialects.Gruber.block );\r\nMarkdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );\r\n\r\nMarkdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );\r\n\r\nMarkdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {\r\n  var meta = split_meta_hash( meta_string ),\r\n      attr = {};\r\n\r\n  for ( var i = 0; i < meta.length; ++i ) {\r\n    // id: #foo\r\n    if ( /^#/.test( meta[ i ] ) ) {\r\n      attr.id = meta[ i ].substring( 1 );\r\n    }\r\n    // class: .foo\r\n    else if ( /^\\./.test( meta[ i ] ) ) {\r\n      // if class already exists, append the new one\r\n      if ( attr[\"class\"] ) {\r\n        attr[\"class\"] = attr[\"class\"] + meta[ i ].replace( /./, \" \" );\r\n      }\r\n      else {\r\n        attr[\"class\"] = meta[ i ].substring( 1 );\r\n      }\r\n    }\r\n    // attribute: foo=bar\r\n    else if ( /\\=/.test( meta[ i ] ) ) {\r\n      var s = meta[ i ].split( /\\=/ );\r\n      attr[ s[ 0 ] ] = s[ 1 ];\r\n    }\r\n  }\r\n\r\n  return attr;\r\n}\r\n\r\nfunction split_meta_hash( meta_string ) {\r\n  var meta = meta_string.split( \"\" ),\r\n      parts = [ \"\" ],\r\n      in_quotes = false;\r\n\r\n  while ( meta.length ) {\r\n    var letter = meta.shift();\r\n    switch ( letter ) {\r\n      case \" \" :\r\n        // if we're in a quoted section, keep it\r\n        if ( in_quotes ) {\r\n          parts[ parts.length - 1 ] += letter;\r\n        }\r\n        // otherwise make a new part\r\n        else {\r\n          parts.push( \"\" );\r\n        }\r\n        break;\r\n      case \"'\" :\r\n      case '\"' :\r\n        // reverse the quotes and move straight on\r\n        in_quotes = !in_quotes;\r\n        break;\r\n      case \"\\\\\" :\r\n        // shift off the next letter to be used straight away.\r\n        // it was escaped so we'll keep it whatever it is\r\n        letter = meta.shift();\r\n      default :\r\n        parts[ parts.length - 1 ] += letter;\r\n        break;\r\n    }\r\n  }\r\n\r\n  return parts;\r\n}\r\n\r\nMarkdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {\r\n  // we're only interested in the first block\r\n  if ( block.lineNumber > 1 ) return undefined;\r\n\r\n  // document_meta blocks consist of one or more lines of `Key: Value\\n`\r\n  if ( ! block.match( /^(?:\\w+:.*\\n)*\\w+:.*$/ ) ) return undefined;\r\n\r\n  // make an attribute node if it doesn't exist\r\n  if ( !extract_attr( this.tree ) ) {\r\n    this.tree.splice( 1, 0, {} );\r\n  }\r\n\r\n  var pairs = block.split( /\\n/ );\r\n  for ( p in pairs ) {\r\n    var m = pairs[ p ].match( /(\\w+):\\s*(.*)$/ ),\r\n        key = m[ 1 ].toLowerCase(),\r\n        value = m[ 2 ];\r\n\r\n    this.tree[ 1 ][ key ] = value;\r\n  }\r\n\r\n  // document_meta produces no content!\r\n  return [];\r\n};\r\n\r\nMarkdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {\r\n  // check if the last line of the block is an meta hash\r\n  var m = block.match( /(^|\\n) {0,3}\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}$/ );\r\n  if ( !m ) return undefined;\r\n\r\n  // process the meta hash\r\n  var attr = this.dialect.processMetaHash( m[ 2 ] );\r\n\r\n  var hash;\r\n\r\n  // if we matched ^ then we need to apply meta to the previous block\r\n  if ( m[ 1 ] === \"\" ) {\r\n    var node = this.tree[ this.tree.length - 1 ];\r\n    hash = extract_attr( node );\r\n\r\n    // if the node is a string (rather than JsonML), bail\r\n    if ( typeof node === \"string\" ) return undefined;\r\n\r\n    // create the attribute hash if it doesn't exist\r\n    if ( !hash ) {\r\n      hash = {};\r\n      node.splice( 1, 0, hash );\r\n    }\r\n\r\n    // add the attributes in\r\n    for ( a in attr ) {\r\n      hash[ a ] = attr[ a ];\r\n    }\r\n\r\n    // return nothing so the meta hash is removed\r\n    return [];\r\n  }\r\n\r\n  // pull the meta hash off the block and process what's left\r\n  var b = block.replace( /\\n.*$/, \"\" ),\r\n      result = this.processBlock( b, [] );\r\n\r\n  // get or make the attributes hash\r\n  hash = extract_attr( result[ 0 ] );\r\n  if ( !hash ) {\r\n    hash = {};\r\n    result[ 0 ].splice( 1, 0, hash );\r\n  }\r\n\r\n  // attach the attributes to the block\r\n  for ( a in attr ) {\r\n    hash[ a ] = attr[ a ];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nMarkdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {\r\n  // one or more terms followed by one or more definitions, in a single block\r\n  var tight = /^((?:[^\\s:].*\\n)+):\\s+([\\s\\S]+)$/,\r\n      list = [ \"dl\" ],\r\n      i, m;\r\n\r\n  // see if we're dealing with a tight or loose block\r\n  if ( ( m = block.match( tight ) ) ) {\r\n    // pull subsequent tight DL blocks out of `next`\r\n    var blocks = [ block ];\r\n    while ( next.length && tight.exec( next[ 0 ] ) ) {\r\n      blocks.push( next.shift() );\r\n    }\r\n\r\n    for ( var b = 0; b < blocks.length; ++b ) {\r\n      var m = blocks[ b ].match( tight ),\r\n          terms = m[ 1 ].replace( /\\n$/, \"\" ).split( /\\n/ ),\r\n          defns = m[ 2 ].split( /\\n:\\s+/ );\r\n\r\n      // print( uneval( m ) );\r\n\r\n      for ( i = 0; i < terms.length; ++i ) {\r\n        list.push( [ \"dt\", terms[ i ] ] );\r\n      }\r\n\r\n      for ( i = 0; i < defns.length; ++i ) {\r\n        // run inline processing over the definition\r\n        list.push( [ \"dd\" ].concat( this.processInline( defns[ i ].replace( /(\\n)\\s+/, \"$1\" ) ) ) );\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n\r\n  return [ list ];\r\n};\r\n\r\n// splits on unescaped instances of @ch. If @ch is not a character the result\r\n// can be unpredictable\r\n\r\nMarkdown.dialects.Maruku.block.table = function table (block, next) {\r\n\r\n    var _split_on_unescaped = function(s, ch) {\r\n        ch = ch || '\\\\s';\r\n        if (ch.match(/^[\\\\|\\[\\]{}?*.+^$]$/)) { ch = '\\\\' + ch; }\r\n        var res = [ ],\r\n            r = new RegExp('^((?:\\\\\\\\.|[^\\\\\\\\' + ch + '])*)' + ch + '(.*)'),\r\n            m;\r\n        while(m = s.match(r)) {\r\n            res.push(m[1]);\r\n            s = m[2];\r\n        }\r\n        res.push(s);\r\n        return res;\r\n    }\r\n\r\n    var leading_pipe = /^ {0,3}\\|(.+)\\n {0,3}\\|\\s*([\\-:]+[\\-| :]*)\\n((?:\\s*\\|.*(?:\\n|$))*)(?=\\n|$)/,\r\n        // find at least an unescaped pipe in each line\r\n        no_leading_pipe = /^ {0,3}(\\S(?:\\\\.|[^\\\\|])*\\|.*)\\n {0,3}([\\-:]+\\s*\\|[\\-| :]*)\\n((?:(?:\\\\.|[^\\\\|])*\\|.*(?:\\n|$))*)(?=\\n|$)/,\r\n        i, m;\r\n    if (m = block.match(leading_pipe)) {\r\n        // remove leading pipes in contents\r\n        // (header and horizontal rule already have the leading pipe left out)\r\n        m[3] = m[3].replace(/^\\s*\\|/gm, '');\r\n    } else if (! ( m = block.match(no_leading_pipe))) {\r\n        return undefined;\r\n    }\r\n\r\n    var table = [ \"table\", [ \"thead\", [ \"tr\" ] ], [ \"tbody\" ] ];\r\n\r\n    // remove trailing pipes, then split on pipes\r\n    // (no escaped pipes are allowed in horizontal rule)\r\n    m[2] = m[2].replace(/\\|\\s*$/, '').split('|');\r\n\r\n    // process alignment\r\n    var html_attrs = [ ];\r\n    forEach (m[2], function (s) {\r\n        if (s.match(/^\\s*-+:\\s*$/))       html_attrs.push({align: \"right\"});\r\n        else if (s.match(/^\\s*:-+\\s*$/))  html_attrs.push({align: \"left\"});\r\n        else if (s.match(/^\\s*:-+:\\s*$/)) html_attrs.push({align: \"center\"});\r\n        else                              html_attrs.push({});\r\n    });\r\n\r\n    // now for the header, avoid escaped pipes\r\n    m[1] = _split_on_unescaped(m[1].replace(/\\|\\s*$/, ''), '|');\r\n    for (i = 0; i < m[1].length; i++) {\r\n        table[1][1].push(['th', html_attrs[i] || {}].concat(\r\n            this.processInline(m[1][i].trim())));\r\n    }\r\n\r\n    // now for body contents\r\n    forEach (m[3].replace(/\\|\\s*$/mg, '').split('\\n'), function (row) {\r\n        var html_row = ['tr'];\r\n        row = _split_on_unescaped(row, '|');\r\n        for (i = 0; i < row.length; i++) {\r\n            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));\r\n        }\r\n        table[2].push(html_row);\r\n    }, this);\r\n\r\n    return [table];\r\n}\r\n\r\nMarkdown.dialects.Maruku.inline[ \"{:\" ] = function inline_meta( text, matches, out ) {\r\n  if ( !out.length ) {\r\n    return [ 2, \"{:\" ];\r\n  }\r\n\r\n  // get the preceeding element\r\n  var before = out[ out.length - 1 ];\r\n\r\n  if ( typeof before === \"string\" ) {\r\n    return [ 2, \"{:\" ];\r\n  }\r\n\r\n  // match a meta hash\r\n  var m = text.match( /^\\{:\\s*((?:\\\\\\}|[^\\}])*)\\s*\\}/ );\r\n\r\n  // no match, false alarm\r\n  if ( !m ) {\r\n    return [ 2, \"{:\" ];\r\n  }\r\n\r\n  // attach the attributes to the preceeding element\r\n  var meta = this.dialect.processMetaHash( m[ 1 ] ),\r\n      attr = extract_attr( before );\r\n\r\n  if ( !attr ) {\r\n    attr = {};\r\n    before.splice( 1, 0, attr );\r\n  }\r\n\r\n  for ( var k in meta ) {\r\n    attr[ k ] = meta[ k ];\r\n  }\r\n\r\n  // cut out the string and replace it with nothing\r\n  return [ m[ 0 ].length, \"\" ];\r\n};\r\n\r\nMarkdown.dialects.Maruku.inline.__escape__ = /^\\\\[\\\\`\\*_{}\\[\\]()#\\+.!\\-|:]/;\r\n\r\nMarkdown.buildBlockOrder ( Markdown.dialects.Maruku.block );\r\nMarkdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );\r\n\r\nvar isArray = Array.isArray || function(obj) {\r\n  return Object.prototype.toString.call(obj) == \"[object Array]\";\r\n};\r\n\r\nvar forEach;\r\n// Don't mess with Array.prototype. Its not friendly\r\nif ( Array.prototype.forEach ) {\r\n  forEach = function( arr, cb, thisp ) {\r\n    return arr.forEach( cb, thisp );\r\n  };\r\n}\r\nelse {\r\n  forEach = function(arr, cb, thisp) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      cb.call(thisp || arr, arr[i], i, arr);\r\n    }\r\n  }\r\n}\r\n\r\nvar isEmpty = function( obj ) {\r\n  for ( var key in obj ) {\r\n    if ( hasOwnProperty.call( obj, key ) ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction extract_attr( jsonml ) {\r\n  return isArray(jsonml)\r\n      && jsonml.length > 1\r\n      && typeof jsonml[ 1 ] === \"object\"\r\n      && !( isArray(jsonml[ 1 ]) )\r\n      ? jsonml[ 1 ]\r\n      : undefined;\r\n}\r\n\r\n\r\n\r\n/**\r\n *  renderJsonML( jsonml[, options] ) -> String\r\n *  - jsonml (Array): JsonML array to render to XML\r\n *  - options (Object): options\r\n *\r\n *  Converts the given JsonML into well-formed XML.\r\n *\r\n *  The options currently understood are:\r\n *\r\n *  - root (Boolean): wether or not the root node should be included in the\r\n *    output, or just its children. The default `false` is to not include the\r\n *    root itself.\r\n */\r\nexpose.renderJsonML = function( jsonml, options ) {\r\n  options = options || {};\r\n  // include the root element in the rendered output?\r\n  options.root = options.root || false;\r\n\r\n  var content = [];\r\n\r\n  if ( options.root ) {\r\n    content.push( render_tree( jsonml ) );\r\n  }\r\n  else {\r\n    jsonml.shift(); // get rid of the tag\r\n    if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\r\n      jsonml.shift(); // get rid of the attributes\r\n    }\r\n\r\n    while ( jsonml.length ) {\r\n      content.push( render_tree( jsonml.shift() ) );\r\n    }\r\n  }\r\n\r\n  return content.join( \"\\n\\n\" );\r\n};\r\n\r\nfunction escapeHTML( text ) {\r\n  return text.replace( /&/g, \"&amp;\" )\r\n             .replace( /</g, \"&lt;\" )\r\n             .replace( />/g, \"&gt;\" )\r\n             .replace( /\"/g, \"&quot;\" )\r\n             .replace( /'/g, \"&#39;\" );\r\n}\r\n\r\nfunction render_tree( jsonml ) {\r\n  // basic case\r\n  if ( typeof jsonml === \"string\" ) {\r\n    return escapeHTML( jsonml );\r\n  }\r\n\r\n  var tag = jsonml.shift(),\r\n      attributes = {},\r\n      content = [];\r\n\r\n  if ( jsonml.length && typeof jsonml[ 0 ] === \"object\" && !( jsonml[ 0 ] instanceof Array ) ) {\r\n    attributes = jsonml.shift();\r\n  }\r\n\r\n  while ( jsonml.length ) {\r\n    content.push( render_tree( jsonml.shift() ) );\r\n  }\r\n\r\n  var tag_attrs = \"\";\r\n  for ( var a in attributes ) {\r\n    tag_attrs += \" \" + a + '=\"' + escapeHTML( attributes[ a ] ) + '\"';\r\n  }\r\n\r\n  // be careful about adding whitespace here for inline elements\r\n  if ( tag == \"img\" || tag == \"br\" || tag == \"hr\" ) {\r\n    return \"<\"+ tag + tag_attrs + \"/>\";\r\n  }\r\n  else {\r\n    return \"<\"+ tag + tag_attrs + \">\" + content.join( \"\" ) + \"</\" + tag + \">\";\r\n  }\r\n}\r\n\r\nfunction convert_tree_to_html( tree, references, options ) {\r\n  var i;\r\n  options = options || {};\r\n\r\n  // shallow clone\r\n  var jsonml = tree.slice( 0 );\r\n\r\n  if ( typeof options.preprocessTreeNode === \"function\" ) {\r\n      jsonml = options.preprocessTreeNode(jsonml, references);\r\n  }\r\n\r\n  // Clone attributes if they exist\r\n  var attrs = extract_attr( jsonml );\r\n  if ( attrs ) {\r\n    jsonml[ 1 ] = {};\r\n    for ( i in attrs ) {\r\n      jsonml[ 1 ][ i ] = attrs[ i ];\r\n    }\r\n    attrs = jsonml[ 1 ];\r\n  }\r\n\r\n  // basic case\r\n  if ( typeof jsonml === \"string\" ) {\r\n    return jsonml;\r\n  }\r\n\r\n  // convert this node\r\n  switch ( jsonml[ 0 ] ) {\r\n    case \"header\":\r\n      jsonml[ 0 ] = \"h\" + jsonml[ 1 ].level;\r\n      delete jsonml[ 1 ].level;\r\n      break;\r\n    case \"bulletlist\":\r\n      jsonml[ 0 ] = \"ul\";\r\n      break;\r\n    case \"numberlist\":\r\n      jsonml[ 0 ] = \"ol\";\r\n      break;\r\n    case \"listitem\":\r\n      jsonml[ 0 ] = \"li\";\r\n      break;\r\n    case \"para\":\r\n      jsonml[ 0 ] = \"p\";\r\n      break;\r\n    case \"markdown\":\r\n      jsonml[ 0 ] = \"html\";\r\n      if ( attrs ) delete attrs.references;\r\n      break;\r\n    case \"code_block\":\r\n      jsonml[ 0 ] = \"pre\";\r\n      i = attrs ? 2 : 1;\r\n      var code = [ \"code\" ];\r\n      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );\r\n      jsonml[ i ] = code;\r\n      break;\r\n    case \"inlinecode\":\r\n      jsonml[ 0 ] = \"code\";\r\n      break;\r\n    case \"img\":\r\n      jsonml[ 1 ].src = jsonml[ 1 ].href;\r\n      delete jsonml[ 1 ].href;\r\n      break;\r\n    case \"linebreak\":\r\n      jsonml[ 0 ] = \"br\";\r\n    break;\r\n    case \"link\":\r\n      jsonml[ 0 ] = \"a\";\r\n      break;\r\n    case \"link_ref\":\r\n      jsonml[ 0 ] = \"a\";\r\n\r\n      // grab this ref and clean up the attribute node\r\n      var ref = references[ attrs.ref ];\r\n\r\n      // if the reference exists, make the link\r\n      if ( ref ) {\r\n        delete attrs.ref;\r\n\r\n        // add in the href and title, if present\r\n        attrs.href = ref.href;\r\n        if ( ref.title ) {\r\n          attrs.title = ref.title;\r\n        }\r\n\r\n        // get rid of the unneeded original text\r\n        delete attrs.original;\r\n      }\r\n      // the reference doesn't exist, so revert to plain text\r\n      else {\r\n        return attrs.original;\r\n      }\r\n      break;\r\n    case \"img_ref\":\r\n      jsonml[ 0 ] = \"img\";\r\n\r\n      // grab this ref and clean up the attribute node\r\n      var ref = references[ attrs.ref ];\r\n\r\n      // if the reference exists, make the link\r\n      if ( ref ) {\r\n        delete attrs.ref;\r\n\r\n        // add in the href and title, if present\r\n        attrs.src = ref.href;\r\n        if ( ref.title ) {\r\n          attrs.title = ref.title;\r\n        }\r\n\r\n        // get rid of the unneeded original text\r\n        delete attrs.original;\r\n      }\r\n      // the reference doesn't exist, so revert to plain text\r\n      else {\r\n        return attrs.original;\r\n      }\r\n      break;\r\n  }\r\n\r\n  // convert all the children\r\n  i = 1;\r\n\r\n  // deal with the attribute node, if it exists\r\n  if ( attrs ) {\r\n    // if there are keys, skip over it\r\n    for ( var key in jsonml[ 1 ] ) {\r\n        i = 2;\r\n        break;\r\n    }\r\n    // if there aren't, remove it\r\n    if ( i === 1 ) {\r\n      jsonml.splice( i, 1 );\r\n    }\r\n  }\r\n\r\n  for ( ; i < jsonml.length; ++i ) {\r\n    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );\r\n  }\r\n\r\n  return jsonml;\r\n}\r\n\r\n\r\n// merges adjacent text nodes into a single node\r\nfunction merge_text_nodes( jsonml ) {\r\n  // skip the tag name and attribute hash\r\n  var i = extract_attr( jsonml ) ? 2 : 1;\r\n\r\n  while ( i < jsonml.length ) {\r\n    // if it's a string check the next item too\r\n    if ( typeof jsonml[ i ] === \"string\" ) {\r\n      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === \"string\" ) {\r\n        // merge the second string into the first and remove it\r\n        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];\r\n      }\r\n      else {\r\n        ++i;\r\n      }\r\n    }\r\n    // if it's not a string recurse\r\n    else {\r\n      merge_text_nodes( jsonml[ i ] );\r\n      ++i;\r\n    }\r\n  }\r\n}\r\n\r\n} )( (function() {\r\n  if ( typeof exports === \"undefined\" ) {\r\n    window.markdown = {};\r\n    return window.markdown;\r\n  }\r\n  else {\r\n    return exports;\r\n  }\r\n} )() );\r\n","type":"application/javascript","title":"$:/plugins/tiddlywiki/markdown/markdown.js","module-type":"library"},"$:/plugins/tiddlywiki/markdown/images/new-markdown-button":{"title":"$:/plugins/tiddlywiki/markdown/images/new-markdown-button","tags":"$:/tags/Image","text":"<svg class=\"tc-image-new-markdown-button tc-image-button\" viewBox=\"0 0 128 128\" width=\"22pt\" height=\"22pt\">\r\n    <g fill-rule=\"evenodd\">\r\n        <rect x=\"80\" y=\"96\" width=\"48\" height=\"16\" rx=\"8\"></rect>\r\n        <rect x=\"96\" y=\"80\" width=\"16\" height=\"48\" rx=\"8\"></rect>\r\n        <path d=\"M3.23876972,39.5396716 C3.23876972,35.9653274 6.13586353,33.0691646 9.7141757,33.0691646 L98.1283744,33.0691646 C101.706101,33.0691646 104.60378,35.9646626 104.60378,39.5396716 L104.60378,84.8296213 C104.60378,88.4039654 101.706687,91.3001282 98.1283744,91.3001282 L9.7141757,91.3001282 C6.13644944,91.3001282 3.23876972,88.4046302 3.23876972,84.8296213 L3.23876972,39.5396716 L3.23876972,39.5396716 Z M-2.15298617,39.5396716 L-2.15298617,84.8296213 C-2.15298617,91.3833243 3.15957363,96.6918841 9.7141757,96.6918841 L98.1283744,96.6918841 C104.684083,96.6918841 109.995536,91.382138 109.995536,84.8296213 L109.995536,39.5396716 C109.995536,32.9859686 104.682977,27.6774087 98.1283744,27.6774087 L9.7141757,27.6774087 C3.15846686,27.6774087 -2.15298617,32.9871549 -2.15298617,39.5396716 Z M14.0222815,80.5166164 L14.0222815,43.8526764 L24.8057933,43.8526764 L35.589305,57.3320661 L46.3728168,43.8526764 L57.1563286,43.8526764 L57.1563286,80.5166164 L46.3728168,80.5166164 L46.3728168,59.4887685 L35.589305,72.9681582 L24.8057933,59.4887685 L24.8057933,80.5166164 L14.0222815,80.5166164 Z M81.4192301,80.5166164 L65.2439624,62.723822 L76.0274742,62.723822 L76.0274742,43.8526764 L86.810986,43.8526764 L86.810986,62.723822 L97.5944978,62.723822 L81.4192301,80.5166164 Z\"transform=\"translate(53.921275, 62.184646) rotate(-60.000000) translate(-53.921275, -62.184646) \"></path>\r\n    </g>\r\n</svg>"},"$:/plugins/tiddlywiki/markdown/new-markdown-button":{"title":"$:/plugins/tiddlywiki/markdown/new-markdown-button","tags":"$:/tags/PageControls","caption":"{{$:/plugins/tiddlywiki/markdown/images/new-markdown-button}} {{$:/language/Buttons/NewMarkdown/Caption}}","description":"{{$:/language/Buttons/NewMarkdown/Hint}}","list-after":"$:/core/ui/Buttons/new-tiddler","text":"<$button tooltip={{$:/language/Buttons/NewMarkdown/Hint}} aria-label={{$:/language/Buttons/NewMarkdown/Caption}} class=<<tv-config-toolbar-class>>>\r\n<$action-sendmessage $message=\"tm-new-tiddler\" type=\"text/x-markdown\"/>\r\n<$list filter=\"[<tv-config-toolbar-icons>prefix[yes]]\">\r\n{{$:/plugins/tiddlywiki/markdown/images/new-markdown-button}}\r\n</$list>\r\n<$list filter=\"[<tv-config-toolbar-text>prefix[yes]]\">\r\n<span class=\"tc-btn-text\"><$text text={{$:/language/Buttons/NewMarkdown/Caption}}/></span>\r\n</$list>\r\n</$button>\r\n"},"$:/plugins/tiddlywiki/markdown/readme":{"title":"$:/plugins/tiddlywiki/markdown/readme","text":"This is a TiddlyWiki plugin for parsing Markdown text, based on the [[markdown-js|https://github.com/evilstreak/markdown-js]] project from Dominic Baggott. \n\nIt is completely self-contained, and doesn't need an Internet connection in order to work. It works both in the browser and under Node.js.\n\n[[Source code|https://github.com/Jermolene/TiddlyWiki5/blob/master/plugins/tiddlywiki/markdown]]\r\n"},"$:/plugins/tiddlywiki/markdown/usage":{"title":"$:/plugins/tiddlywiki/markdown/usage","text":"! Markdown Dialects\n\nBy default the markdown parser recognises the original dialect of Markdown [[as described by John Gruber|http://daringfireball.net/projects/markdown/]]. An extended dialect called \"Maruku\" is also included that provides table support and other advanced features. The syntax extensions are modelled on those of [[PHP Markdown Extra|https://michelf.ca/projects/php-markdown/extra/]].\n\nThe configuration tiddler [[$:/config/markdown/dialect]] determines which dialect is used:\n\n|!Dialect |!Description |\r\n|Gruber |Standard Markdown |\r\n|Maruku |Extended Maruku Markdown |\n\n\r\n! Creating ~WikiLinks\n\nCreate wiki links with the usual Markdown link syntax targeting `#` and the target tiddler title:\n\n```\r\n[link text](#TiddlerTitle)\r\n```\n\n! Images\n\nMarkdown image syntax can be used to reference images by tiddler title or an external URI. For example:\n\n```\r\n![alt text](/path/to/img.jpg \"Title\")\n\n![alt text](Motovun Jack.jpg \"Title\")\r\n```\r\n"},"$:/plugins/tiddlywiki/markdown/wrapper.js":{"title":"$:/plugins/tiddlywiki/markdown/wrapper.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/markdown/wrapper.js\r\ntype: application/javascript\r\nmodule-type: parser\r\n\r\nWraps up the markdown-js parser for use in TiddlyWiki5\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar markdown = require(\"$:/plugins/tiddlywiki/markdown/markdown.js\");\r\n\r\nvar CONFIG_DIALECT_TIDDLER = \"$:/config/markdown/dialect\",\r\n\tDEFAULT_DIALECT = \"Gruber\";\r\n\r\nfunction transformNodes(nodes) {\r\n\tvar results = [];\r\n\tfor(var index=0; index<nodes.length; index++) {\r\n\t\tresults.push(transformNode(nodes[index]));\r\n\t}\r\n\treturn results;\r\n}\r\n\r\nfunction transformNode(node) {\r\n\tif($tw.utils.isArray(node)) {\r\n\t\tvar p = 0,\r\n\t\t\twidget = {type: \"element\", tag: node[p++]};\r\n\t\tif(!$tw.utils.isArray(node[p]) && typeof(node[p]) === \"object\") {\r\n\t\t\twidget.attributes = {};\r\n\t\t\t$tw.utils.each(node[p++],function(value,name) {\r\n\t\t\t\twidget.attributes[name] = {type: \"string\", value: value};\r\n\t\t\t});\r\n\t\t}\r\n\t\twidget.children = transformNodes(node.slice(p++));\r\n\t\t// Massage images into the image widget\r\n\t\tif(widget.tag === \"img\") {\r\n\t\t\twidget.type = \"image\";\r\n\t\t\tif(widget.attributes.alt) {\r\n\t\t\t\twidget.attributes.tooltip = widget.attributes.alt;\r\n\t\t\t\tdelete widget.attributes.alt;\r\n\t\t\t}\r\n\t\t\tif(widget.attributes.src) {\r\n\t\t\t\twidget.attributes.source = widget.attributes.src;\r\n\t\t\t\tdelete widget.attributes.src;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert internal links to proper wikilinks\r\n\t\tif (widget.tag === \"a\" && widget.attributes.href.value[0] === \"#\") {\r\n\t\t\twidget.type = \"link\";\r\n\t\t\twidget.attributes.to = widget.attributes.href;\r\n\t\t\tif (widget.attributes.to.type === \"string\") {\r\n\t\t\t\t//Remove '#' before conversion to wikilink\r\n\t\t\t\twidget.attributes.to.value = widget.attributes.to.value.substr(1);\r\n\t\t\t}\r\n\t\t\t//Children is fine\r\n\t\t\tdelete widget.tag;\r\n\t\t\tdelete widget.attributes.href;\r\n\t\t}\r\n\t\treturn widget;\r\n\t} else {\r\n\t\treturn {type: \"text\", text: node};\r\n\t}\r\n}\r\n\r\nvar MarkdownParser = function(type,text,options) {\r\n\tvar dialect = options.wiki.getTiddlerText(CONFIG_DIALECT_TIDDLER,DEFAULT_DIALECT),\r\n\t\tmarkdownTree = markdown.toHTMLTree(text,dialect),\r\n\t\tnode = $tw.utils.isArray(markdownTree[1]) ? markdownTree.slice(1) : markdownTree.slice(2);\r\n\tthis.tree = transformNodes(node);\r\n};\r\n\r\n/*\r\n\r\n[ 'html',\r\n  [ 'p', 'something' ],\r\n  [ 'h1',\r\n    'heading and ',\r\n    [ 'strong', 'other' ] ] ]\r\n\r\n*/\r\n\r\nexports[\"text/x-markdown\"] = MarkdownParser;\r\n\r\n})();\r\n\r\n","type":"application/javascript","module-type":"parser"}}}