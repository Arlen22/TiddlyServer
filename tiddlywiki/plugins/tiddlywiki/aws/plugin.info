{"title":"$:/plugins/tiddlywiki/aws","description":"Tools for working with Amazon Web Services","author":"JeremyRuston","core-version":">=5.0.0","list":"readme setup commands lambda","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/aws/commands":{"title":"$:/plugins/tiddlywiki/aws/commands","text":"{{$:/language/Help/aws}}\r\n"},"$:/language/Help/aws":{"title":"$:/language/Help/aws","description":"Operations for working with Amazon Web Services","text":"! Commands\n\nPerform operation on Amazon Web Services\n\n```\r\n--aws <sub-command> [<parameter> ...]\r\n```\n\n! \"s3-load\" subcommand\n\nLoad tiddlers from files in an S3 bucket.\n\n```\r\n--aws s3-load <region> <bucket> <filename>...\r\n```\n\n* ''region'': AWS region\r\n* ''bucket'': name of the bucket containing the files\r\n* ''filename'': one or more filenames of the files to load\n\nThe content in the files is deserialized according to the content type reported by S3.\n\n! \"s3-savetiddler\" subcommand\n\nSave a raw tiddler to a file in an S3 bucket.\n\n```\r\n--aws s3-savetiddler <title> <region> <bucket> <filename> <zipfilename> <savetype>\r\n```\n\n* ''title'': title of the tiddler to save\r\n* ''region'': AWS region\r\n* ''bucket'': name of the bucket to save the saved file\r\n* ''filename'': filename of the saved file\r\n* ''zipfilename'': optional; the file will be packed into a ZIP file with the specified name\r\n* ''savetype'': optional; the MIME type for the saved file (defaults to ''type'' or \"text/html\")\n\n! \"s3-savetiddlers\" subcommand\n\nSave raw tiddlers matching a filter to an S3 bucket.\n\n```\r\n--aws s3-savetiddlers <filter> <region> <bucket> <filenamefilter> <savetypefilter>\r\n```\n\n* ''filter'': filter identifying tiddlers to render\r\n* ''region'': AWS region\r\n* ''bucket'': name of the bucket to save the files\r\n* ''filenamefilter'': filter for converting tiddler titles to filepaths (eg `[encodeuricomponent[]addprefix[files/]addsuffix[.html]]`)\r\n* ''savetypefilter'': optional; a filter that is passed the title of the tiddler being saved and should yield the MIME type for the saved file (defaults to a filter that yields the value of the ''type'' field)\n\n! \"s3-rendertiddler\" subcommand\n\nSave the results of rendering a tiddler to a file in an S3 bucket.\n\n```\r\n--aws s3-rendertiddler <title> <region> <bucket> <filename> <type> <template> <zipfilename> <savetype>\r\n```\n\n* ''title'': title of the tiddler to render\r\n* ''region'': AWS region\r\n* ''bucket'': name of the bucket to save the rendered file\r\n* ''filename'': filename of the rendered file\r\n* ''type'': optional render type (defaults to \"text/html\")\r\n* ''template'': optional template (defaults to directly rendering the tiddler without using a template)\r\n* ''zipfilename'': optional; the file will be packed into a ZIP file with the specified name\r\n* ''savetype'': optional; the MIME type for the saved file (defaults to ''type'' or \"text/html\")\n\n! \"s3-rendertiddlers\" subcommand\n\nSave the results of rendering tiddlers identified by a filter to files in an S3 bucket.\n\n```\r\n--aws s3-rendertiddlers <filter> <template> <region> <bucket> <filenamefilter> <type> <savetypefilter>\r\n```\n\n* ''filter'': filter identifying tiddlers to render\r\n* ''template'': template for rendering each tiddler\r\n* ''region'': AWS region\r\n* ''bucket'': name of the bucket to save the rendered file\r\n* ''filenamefilter'': filter for converting tiddler titles to filepaths (eg `[encodeuricomponent[]addprefix[files/]addsuffix[.html]]`)\r\n* ''type'': optional render type (defaults to \"text/html\")\r\n* ''savetypefilter'': optional; a filter that is passed the title of the tiddler being rendered and should yield the MIME type for the saved file (defaults to the value of the ''type'' field via `[is[tiddler]get[type]]`)\r\n"},"$:/plugins/tiddlywiki/aws/lambda":{"title":"$:/plugins/tiddlywiki/aws/lambda","text":"! Template\n\nThe template [[$:/plugins/tiddlywiki/aws/lambdas/main]] transcludes everything required to render a TiddlyWiki as an AWS Lambda function.\n\nThe Lambda is build with this command:\n\n```\r\ntiddlywiki editions/aws --rendertiddler $:/plugins/tiddlywiki/aws/lambdas/main index.js text/plain\r\n```\n\nOr:\n\n```\r\ntiddlywiki editions/aws --build lambda\r\n```\n\n! Execution\n\nThe Lambda boot code looks for an array of tiddlers to load in `event.tiddlers`, and an array of commands to execute in `event.commands`. For example:\n\n```\r\n{\r\n\t\"commands\": [\r\n\t\t\"--aws\",\"s3-rendertiddler\",\"HelloThere\",\"eu-west-2\",\"my-bucket-name\",\"rendered.html\"\r\n\t],\r\n\t\"tiddlers\": [\r\n\t\t{\r\n\t\t\t\"title\": \"HelloThere\",\r\n\t\t\t\"text\": \"Hello from {{Platform}}.\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"title\": \"Platform\",\r\n\t\t\t\"text\": \"TiddlyWiki\"\r\n\t\t}\r\n\t]\r\n}\n\n```\n\n! Return data\n\nIf the Lambda function successfully executes it returns an object with the following fields:\n\n* ''lambda-result'': An array of `{bucketname,key}` pairs for each file written to S3 within the lambda function\r\n"},"$:/plugins/tiddlywiki/aws/readme":{"title":"$:/plugins/tiddlywiki/aws/readme","text":"This plugin provides several tools for working with Amazon Web Services:\n\n* Templates for saving a TiddlyWiki as a single JavaScript file in a ZIP file that can be executed as an AWS Lambda function. In this form, TiddlyWiki is a self contained single file containing both code and data, just like the standalone HTML file configuration\r\n* Commands that can be used to interact with AWS services, under both the Node.js and Lambda configurations of TiddlyWiki\r\n"},"$:/plugins/tiddlywiki/aws/setup":{"title":"$:/plugins/tiddlywiki/aws/setup","text":"! Introduction\n\n!! About Amazon Web Services\n\nAmazon Web Services is a collection of online APIs to services that allow cloud-based applications to be built. It is a commercial service that charges usage fees, but there is a free tier that is sufficient for most personal use.\n\nAn ordinary Amazon account can be used to sign into the AWS console at https://aws.amazon.com/console/. Here you can see a menu of the available services and use interactive dashboards to inspect and configure resources.\n\n! Getting Started\n\n!! Setup Amazon Credentials\n\nThe main root account has super-user privileges across all the resources owned by the account. The Identity and Access Management (IAM) service allows subsidiary user accounts to be created for specific tasks. Here we create a new user account for running TiddlyWiki code:\n\n# Visit the AWS console at https://aws.amazon.com/console/\r\n# Choose ''IAM'' from the ''Services'' dropdown menu\r\n# Choose ''Users'' from the left hand menu\r\n# Click the ''Create New Users'' button\r\n# Enter ''tiddlywiki'' as the first user name\r\n# Check the box labelled //Generate an access key for each user//\r\n# Click the ''Create'' button\r\n# Click the ''Download Credentials'' button to download a file called \"credentials.csv\"\r\n#* The file contains three values:\r\n#*# ''User Name'': Username for\r\n#*# ''Password'': \r\n#*# ''Direct Signin Link'': \r\n# Create a text file with the following content:\r\n#> <div><pre><code>[default]\r\naws_access_key_id = &lt;your access key>\r\naws_secret_access_key = &lt;your secret access key>\r\n</code></pre></div>\r\n# Save the file as `~/.aws/credentials` (Mac/Linux) or `?` (Windows)\n\n!! Download or Clone TiddlyWiki Repository\n\nEven if you have already installed TiddlyWiki, you should create a new installation for working with the AWS plugin.\n\nVisit the TiddlyWiki5 repository at https://github.com/Jermolene/TiddlyWiki5. You can either download or clone a copy:\n\n* Download to get up and running quickly\r\n* Clone to make it easier to upgrade in the future\n\n!! Install `aws-sdk`\n\nOpen a command terminal, switch to the directory where TiddlyWiki is installed and run the following command:\n\n```\r\nnpm install aws-sdk\r\n```\r\n"},"$:/plugins/tiddlywiki/aws/command.js":{"title":"$:/plugins/tiddlywiki/aws/command.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/aws/command.js\r\ntype: application/javascript\r\nmodule-type: command\r\n\r\n--aws command\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar async,\r\n\tawsUtils;\r\n\r\nexports.info = {\r\n\tname: \"aws\",\r\n\tsynchronous: false\r\n};\r\n\r\nvar Command = function(params,commander,callback) {\r\n\tasync = require(\"$:/plugins/tiddlywiki/async/async.js\");\r\n\tawsUtils = require(\"$:/plugins/tiddlywiki/aws/utils.js\");\r\n\tthis.params = params;\r\n\tthis.commander = commander;\r\n\tthis.callback = callback;\r\n};\r\n\r\nCommand.prototype.execute = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\tsubCommand = this.params[0],\r\n\t\tfn = this.subCommands[subCommand];\r\n\tif(!fn) {\r\n\t\treturn this.callback(\"AWS: Unknown subcommand\")\r\n\t}\r\n\tfn.bind(this)();\r\n\treturn null;\r\n};\r\n\r\nCommand.prototype.subCommands = {};\r\n\r\n// Load tiddlers from files in an S3 bucket\r\nCommand.prototype.subCommands[\"s3-load\"] = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\tregion = this.params[1],\r\n\t\tbucket = this.params[2],\r\n\t\tfilepaths = this.params.slice(3);\r\n\t// Check parameters\r\n\tif(!region || !bucket || filepaths.length < 1) {\r\n\t\tthrow \"Missing parameters\";\r\n\t}\r\n\tasync.eachLimit(\r\n\t\tfilepaths,\r\n\t\t20,\r\n\t\tfunction(filepath,callback) {\r\n\t\t\tawsUtils.getFile(region,bucket,filepath,function(err,data) {\r\n\t\t\t\tif(err) {\r\n\t\t\t\t\treturn callback(err);\r\n\t\t\t\t}\r\n\t\t\t\tvar tiddlers = self.commander.wiki.deserializeTiddlers(data.type,data.body,{});\r\n\t\t\t\t$tw.utils.each(tiddlers,function(tiddler) {\r\n\t\t\t\t\tself.commander.wiki.importTiddler(new $tw.Tiddler(tiddler));\r\n\t\t\t\t});\r\n\t\t\t\tcallback(null);\r\n\t\t\t});\r\n\t\t},\r\n\t\tfunction(err,results) {\r\n\t\t\tself.callback(err,results);\r\n\t\t}\r\n\t);\r\n\treturn null;\r\n};\r\n\r\n// Render a tiddler to an S3 bucket\r\nCommand.prototype.subCommands[\"s3-rendertiddler\"] = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\ttitle = this.params[1],\r\n\t\tregion = this.params[2],\r\n\t\tbucket = this.params[3],\r\n\t\tfilename = this.params[4],\r\n\t\ttype = this.params[5] || \"text/html\",\r\n\t\ttemplate = this.params[6],\r\n\t\tzipfilename = this.params[7],\r\n\t\tsaveType = this.params[8] || type,\r\n\t\tvariables = {};\r\n\t// Check parameters\r\n\tif(!title || !region || !bucket || !filename) {\r\n\t\tthrow \"Missing parameters\";\r\n\t}\r\n\t// Process the template if present\r\n\tif(template) {\r\n\t\tvariables.currentTiddler = title;\r\n\t\ttitle = template;\r\n\t}\r\n\t// Render the tiddler\r\n\tvar text = this.commander.wiki.renderTiddler(type,title,{variables: variables}),\r\n\t\ttype = \"text/plain\",\r\n\t\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \"utf8\"}).encoding;\r\n\t// Zip it if needed\r\n\tif(zipfilename) {\r\n\t\tvar JSZip = require(\"$:/plugins/tiddlywiki/jszip/jszip.js\"),\r\n\t\t\tzip = new JSZip();\r\n\t\tzip.file(filename,new Buffer(text,encoding));\r\n\t\ttext = zip.generate({type: \"base64\"});\r\n\t\ttype = \"application/zip\";\r\n\t\tfilename = zipfilename;\r\n\t}\r\n\t// Save the file\r\n\tasync.series([\r\n\t\tawsUtils.putFile.bind(null,region,bucket,filename,text,saveType)\r\n\t],\r\n\tfunction(err,results){\r\n\t\tself.callback(err,results);\r\n\t});\r\n\treturn null;\r\n};\r\n\r\nCommand.prototype.subCommands[\"s3-rendertiddlers\"] = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\tfilter = this.params[1],\r\n\t\ttemplate = this.params[2],\r\n\t\tregion = this.params[3],\r\n\t\tbucket = this.params[4],\r\n\t\tfilenameFilter = this.params[5],\r\n\t\ttype = this.params[6] || \"text/html\",\r\n\t\tsaveTypeFilter = this.params[7] || \"[[\" + type + \"]]\",\r\n\t\ttiddlers = wiki.filterTiddlers(filter);\r\n\t// Check parameters\r\n\tif(!filter || !region || !bucket || !filenameFilter) {\r\n\t\tthrow \"Missing parameters\";\r\n\t}\r\n\tasync.eachLimit(\r\n\t\ttiddlers,\r\n\t\t20,\r\n\t\tfunction(title,callback) {\r\n\t\t\tvar parser = wiki.parseTiddler(template || title),\r\n\t\t\t\twidgetNode = wiki.makeWidget(parser,{variables: {currentTiddler: title}}),\r\n\t\t\t\tcontainer = $tw.fakeDocument.createElement(\"div\");\r\n\t\t\twidgetNode.render(container,null);\r\n\t\t\tvar text = type === \"text/html\" ? container.innerHTML : container.textContent,\r\n\t\t\t\tfilename = wiki.filterTiddlers(filenameFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0],\r\n\t\t\t\tsaveType = wiki.filterTiddlers(saveTypeFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0];\r\n\t\t\tawsUtils.putFile(region,bucket,filename,text,saveType,callback);\r\n\t\t},\r\n\t\tfunction(err,results) {\r\n\t\t\tself.callback(err,results);\r\n\t\t}\r\n\t);\r\n\treturn null;\r\n};\r\n\r\n// Save a tiddler to an S3 bucket\r\nCommand.prototype.subCommands[\"s3-savetiddler\"] = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\ttitle = this.params[1],\r\n\t\tregion = this.params[2],\r\n\t\tbucket = this.params[3],\r\n\t\tfilename = this.params[4],\r\n\t\tzipfilename = this.params[5],\r\n\t\tsaveType = this.params[6],\r\n\t\ttiddler = wiki.getTiddler(title),\r\n\t\ttext = tiddler.fields.text,\r\n\t\ttype = tiddler.fields.type,\r\n\t\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \"utf8\"}).encoding;\r\n\t// Check parameters\r\n\tif(!title || !region || !bucket || !filename) {\r\n\t\tthrow \"Missing parameters\";\r\n\t}\r\n\t// Zip it if needed\r\n\tif(zipfilename) {\r\n\t\tvar JSZip = require(\"$:/plugins/tiddlywiki/jszip/jszip.js\"),\r\n\t\t\tzip = new JSZip();\r\n\t\tzip.file(filename,new Buffer(text,encoding));\r\n\t\ttext = zip.generate({type: \"base64\"});\r\n\t\ttype = \"application/zip\";\r\n\t\tfilename = zipfilename;\r\n\t}\r\n\t// Save the file\r\n\tasync.series([\r\n\t\tawsUtils.putFile.bind(null,region,bucket,filename,text,saveType || type)\r\n\t],\r\n\tfunction(err,results){\r\n\t\tself.callback(err,results);\r\n\t});\r\n\treturn null;\r\n};\r\n\r\n// Save a tiddler to an S3 bucket\r\nCommand.prototype.subCommands[\"s3-savetiddlers\"] = function() {\r\n\tvar self = this,\r\n\t\twiki = this.commander.wiki,\r\n\t\tfilter = this.params[1],\r\n\t\tregion = this.params[2],\r\n\t\tbucket = this.params[3],\r\n\t\tfilenameFilter = this.params[4],\r\n\t\tsaveTypeFilter = this.params[5] || \"[is[tiddler]get[type]]\",\r\n\t\ttiddlers = wiki.filterTiddlers(filter);\r\n\t// Check parameters\r\n\tif(!filter || !region || !bucket || !filenameFilter) {\r\n\t\tthrow \"Missing parameters\";\r\n\t}\r\n\tasync.eachLimit(\r\n\t\ttiddlers,\r\n\t\t20,\r\n\t\tfunction(title,callback) {\r\n\t\t\tvar tiddler = wiki.getTiddler(title);\r\n\t\t\tif(tiddler) {\r\n\t\t\t\tvar text = tiddler.fields.text || \"\",\r\n\t\t\t\t\ttype = tiddler.fields.type || \"text/vnd.tiddlywiki\",\r\n\t\t\t\t\tfilename = wiki.filterTiddlers(filenameFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0],\r\n\t\t\t\t\tsaveType = wiki.filterTiddlers(saveTypeFilter,$tw.rootWidget,wiki.makeTiddlerIterator([title]))[0];\r\n\t\t\t\tawsUtils.putFile(region,bucket,filename,text,saveType || type,callback);\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tprocess.nextTick(callback,null);\r\n\t\t\t}\r\n\t\t},\r\n\t\tfunction(err,results) {\r\n\t\t\tself.callback(err,results);\r\n\t\t}\r\n\t);\r\n\treturn null;\r\n};\r\n\r\nexports.Command = Command;\r\n\r\n})();\r\n\r\n","type":"application/javascript","module-type":"command"},"$:/plugins/tiddlywiki/aws/init.js":{"title":"$:/plugins/tiddlywiki/aws/init.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/aws/init.js\r\ntype: application/javascript\r\nmodule-type: startup\r\n\r\nAWS initialisation\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n// Export name and synchronous status\r\nexports.name = \"aws-init\";\r\nexports.before = [\"startup\"];\r\nexports.synchronous = true;\r\n\r\nexports.startup = function() {\r\n\tvar logger = new $tw.utils.Logger(\"aws\");\r\n\t\tif($tw.node) {\r\n\t\ttry {\r\n\t\t\trequire(\"aws-sdk\");\r\n\t\t} catch(e) {\r\n\t\t\tlogger.alert(\"The plugin 'tiddlywiki/aws' requires the aws-sdk to be installed. Run 'npm install aws-sdk' in the root of the TiddlyWiki repository\");\r\n\t\t}\r\n\t}\r\n\tif(!$tw.modules.titles[\"$:/plugins/tiddlywiki/async/async.js\"]) {\r\n\t\tlogger.alert(\"The plugin 'tiddlywiki/aws' requires the 'tiddlywiki/async' plugin to be installed\");\r\n\t}\r\n\tif(!$tw.modules.titles[\"$:/plugins/tiddlywiki/jszip/jszip.js\"]) {\r\n\t\tlogger.alert(\"The plugin 'tiddlywiki/aws' requires the 'tiddlywiki/jszip' plugin to be installed\");\r\n\t}\r\n};\r\n\r\n})();\r\n","type":"application/javascript","module-type":"startup"},"$:/plugins/tiddlywiki/aws/utils.js":{"title":"$:/plugins/tiddlywiki/aws/utils.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/aws/utils.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\r\nAWS utility functions\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n/*\r\nGet a file from an S3 bucket\r\nregion:\r\nbucketName:\r\ntitle:\r\ncallback: invoked with (err,{body:,type:}\r\n*/\r\nfunction getFile(region,bucketName,title,callback) {\r\n\t// console.log(\"Reading file from S3\",bucketName,title);\r\n\tvar AWS = require(\"aws-sdk\"),\r\n\t\ts3bucket = new AWS.S3({\r\n\t\t\tregion: region\r\n\t\t}),\r\n\t\tparams = {\r\n\t\t\tBucket: bucketName,\r\n\t\t\tKey: title\r\n\t\t};\r\n\ts3bucket.getObject(params,function(err,data) {\r\n\t\tif(err) {\r\n\t\t\treturn callback(err);\r\n\t\t}\r\n\t\tcallback(null,{\r\n\t\t\tetag: data.ETag,\r\n\t\t\tversion: data.VersionId,\r\n\t\t\ttype: data.ContentType,\r\n\t\t\tbody: data.Body.toString()\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/*\r\nPut a file to an S3 bucket\r\n*/\r\nfunction putFile(region,bucketName,title,text,type,callback) {\r\n\t// Log the write\r\n\tif($tw[\"lambda-result\"]) {\r\n\t\t$tw[\"lambda-result\"][\"files-written\"].push({bucket: bucketName,key: title});\t\t\r\n\t}\r\n\t// console.log(\"Writing file to S3\",bucketName,title,type);\r\n\tvar AWS = require(\"aws-sdk\"),\r\n\t\ts3bucket = new AWS.S3({\r\n\t\t\tregion: region\r\n\t\t}),\r\n\t\tencoding = ($tw.config.contentTypeInfo[type] || {encoding: \"utf8\"}).encoding,\r\n\t\tparams = {\r\n\t\t\tBucket: bucketName,\r\n\t\t\tKey: title,\r\n\t\t\tBody: new Buffer(text,encoding),\r\n\t\t\tContentType: type || \"text/plain\"\r\n\t\t};\r\n\ts3bucket.upload(params,function(err,data) {\r\n\t\tif(err) {\r\n\t\t\treturn callback(err + \" (writing \" + title + \" to \" + bucketName + \", type \" + type + \")\");\r\n\t\t}\r\n\t\tcallback(null,data);\r\n\t});\r\n}\r\n\r\nexports.putFile = putFile;\r\nexports.getFile = getFile;\r\n\r\n})();\r\n","type":"application/javascript","module-type":"library"},"$:/plugins/tiddlywiki/aws/lambda/handler":{"title":"$:/plugins/tiddlywiki/aws/lambda/handler","type":"text/plain","text":"/*\r\nTiddlyWiki for AWS\r\n*/\n\nexports.handler = function(event,context,callback) {\r\n\t// Initialise the boot prefix\r\n\tglobal.$tw = _bootprefix();\r\n\t// Initialise the returned results\r\n\t$tw[\"lambda-result\"] = {\r\n\t\t\"files-written\": []\r\n\t};\r\n\t// Some default package info\r\n\t$tw.packageInfo = lambdaPackageInfo;\r\n\t// Load any tiddlers from the package\r\n\t$tw.preloadTiddlerArray(lambdaTiddlers);\r\n\t// Load any tiddlers from the event\r\n\tif(event.tiddlers) {\r\n\t\t$tw.preloadTiddlerArray(event.tiddlers);\t\r\n\t}\r\n\t// Load the commands from the event\r\n\t$tw.boot.argv = (event.commands || []).slice(0);\r\n\t// Boot the TW5 app\r\n\t_boot($tw);\r\n\t$tw.boot.boot(function() {\r\n\t\tcallback(null,$tw[\"lambda-result\"]);\r\n\t});\r\n}\r\n"},"$:/plugins/tiddlywiki/aws/lambdas/main":{"title":"$:/plugins/tiddlywiki/aws/lambdas/main","text":"\\rules only filteredtranscludeinline transcludeinline\n\n/*\r\n{{ $:/core/copyright.txt }}\r\n*/\n\n{{$:/plugins/tiddlywiki/aws/lambda/tiddlers}}\n\n{{$:/plugins/tiddlywiki/aws/lambda/sjcl}}\n\n{{ $:/boot/bootprefix.js ||$:/core/templates/plain-text-tiddler}}\n\n{{ $:/boot/boot.js ||$:/core/templates/plain-text-tiddler}}\n\n{{$:/plugins/tiddlywiki/aws/lambda/package-info}}\n\n{{ $:/plugins/tiddlywiki/aws/lambda/handler ||$:/core/templates/plain-text-tiddler}}\r\n"},"$:/plugins/tiddlywiki/aws/lambda/package-info":{"title":"$:/plugins/tiddlywiki/aws/lambda/package-info","text":"\\rules only filteredtranscludeinline transcludeinline codeinline macrocallinline\r\n`\r\nvar lambdaPackageInfo = {\r\n\t\"version\": \"`<<version>>`\",\r\n\t\"engines\": {\r\n\t\t\"node\": \">=0.8.2\"\r\n\t}\r\n};\r\n`\r\n"},"$:/plugins/tiddlywiki/aws/lambda/sjcl":{"title":"$:/plugins/tiddlywiki/aws/lambda/sjcl","text":"\\rules only filteredtranscludeinline transcludeinline\n\n(function() {\n\nvar module;\n\nglobal.sjcl = (function() {\n\n{{ $:/library/sjcl.js ||$:/core/templates/plain-text-tiddler}}\n\nreturn sjcl;\n\n})();\n\n})();\r\n"},"$:/plugins/tiddlywiki/aws/lambda/tiddlers":{"title":"$:/plugins/tiddlywiki/aws/lambda/tiddlers","text":"`\r\nvar lambdaTiddlers = `<$text text=<<jsontiddlers \"[all[tiddlers]]\">>/>`;\r\n`\r\n"}}}