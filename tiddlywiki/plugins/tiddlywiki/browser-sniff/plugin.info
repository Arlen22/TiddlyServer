{"title":"$:/plugins/tiddlywiki/browser-sniff","description":"Browser sniffing","author":"JeremyRuston","core-version":">=5.0.0","list":"readme usage","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/browser-sniff/sniff.js":{"title":"$:/plugins/tiddlywiki/browser-sniff/sniff.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/browser-sniff/sniff.js\r\ntype: application/javascript\r\nmodule-type: info\r\n\r\nInitialise $:/info/browser tiddlers\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nexports.getInfoTiddlerFields = function() {\r\n\tvar mapBoolean = function(value) {return value ? \"yes\" : \"no\";},\r\n\t\tinfoTiddlerFields = [];\r\n\t// Basics\r\n\tif($tw.browser) {\r\n\t\t// Mappings from tiddler titles (prefixed with \"$:/info/browser/\") to bowser.browser property name\r\n\t\tvar bowser = require(\"$:/plugins/tiddlywiki/browser-sniff/bowser/bowser.js\"),\r\n\t\t\tmappings = [\r\n\t\t\t\t[\"name\",\"name\",\"unknown\"],\r\n\t\t\t\t[\"version\",\"version\"],\r\n\t\t\t\t[\"is/webkit\",\"webkit\"],\r\n\t\t\t\t[\"is/gecko\",\"gecko\"],\r\n\t\t\t\t[\"is/chrome\",\"chrome\"],\r\n\t\t\t\t[\"is/firefox\",\"firefox\"],\r\n\t\t\t\t[\"is/ios\",\"ios\"],\r\n\t\t\t\t[\"is/iphone\",\"iphone\"],\r\n\t\t\t\t[\"is/ipad\",\"ipad\"],\r\n\t\t\t\t[\"is/ipod\",\"ios\"],\r\n\t\t\t\t[\"is/opera\",\"opera\"],\r\n\t\t\t\t[\"is/phantomjs\",\"phantomjs\"],\r\n\t\t\t\t[\"is/safari\",\"safari\"],\r\n\t\t\t\t[\"is/seamonkey\",\"seamonkey\"],\r\n\t\t\t\t[\"is/blackberry\",\"blackberry\"],\r\n\t\t\t\t[\"is/webos\",\"webos\"],\r\n\t\t\t\t[\"is/silk\",\"silk\"],\r\n\t\t\t\t[\"is/bada\",\"bada\"],\r\n\t\t\t\t[\"is/tizen\",\"tizen\"],\r\n\t\t\t\t[\"is/sailfish\",\"sailfish\"],\r\n\t\t\t\t[\"is/android\",\"android\"],\r\n\t\t\t\t[\"is/windowsphone\",\"windowsphone\"],\r\n\t\t\t\t[\"is/firefoxos\",\"firefoxos\"]\r\n\t\t\t];\r\n\t\t$tw.utils.each(mappings,function(mapping) {\r\n\t\t\tvar value = bowser.browser[mapping[1]];\r\n\t\t\tif(value === undefined) {\r\n\t\t\t\tvalue = mapping[2];\r\n\t\t\t}\r\n\t\t\tif(value === undefined) {\r\n\t\t\t\tvalue = false;\r\n\t\t\t}\r\n\t\t\tif(typeof value === \"boolean\") {\r\n\t\t\t\tvalue = mapBoolean(value);\r\n\t\t\t}\r\n\t\t\tinfoTiddlerFields.push({title: \"$:/info/browser/\" + mapping[0], text: value});\r\n\t\t});\r\n\t\t// Set $:/info/browser/name to the platform with some changes from Bowser\r\n\t\tvar platform = bowser.browser.name;\r\n\t\tif(\"iPad iPhone iPod\".split(\" \").indexOf(platform) !== -1) {\r\n\t\t\tplatform = \"iOS\";\r\n\t\t}\r\n\t\tinfoTiddlerFields.push({title: \"$:/info/browser/name\", text: platform});\r\n\t\t// Non-bowser settings for TiddlyFox and TiddlyDesktop\r\n\t\tvar hasTiddlyFox = !!document.getElementById(\"tiddlyfox-message-box\"), // Fails because message box is added after page load\r\n\t\t\tisTiddlyDesktop = false; // Can't detect it until we update TiddlyDesktop to have a distinct useragent string\r\n\t\t//infoTiddlerFields.push({title: \"$:/info/browser/has/tiddlyfox\", text: mapBoolean(hasTiddlyFox)});\r\n\t\t//infoTiddlerFields.push({title: \"$:/info/browser/is/tiddlydesktop\", text: mapBoolean(isTiddlyDesktop)});\r\n\t\tif(isTiddlyDesktop) {\r\n\t\t\tinfoTiddlerFields.push({title: \"$:/info/browser/name\", text: \"TiddlyDesktop\"});\r\n\t\t}\r\n\t}\r\n\treturn infoTiddlerFields;\r\n};\r\n\r\n})();\r\n","type":"application/javascript","module-type":"info"},"$:/plugins/tiddlywiki/browser-sniff/bowser/bowser.js":{"text":"/*!\r\n  * Bowser - a browser detector\r\n  * https://github.com/ded/bowser\r\n  * MIT License | (c) Dustin Diaz 2014\r\n  */\r\n\r\n!function (name, definition) {\r\n  if (typeof module != 'undefined' && module.exports) module.exports['browser'] = definition()\r\n  else if (typeof define == 'function') define(definition)\r\n  else this[name] = definition()\r\n}('bowser', function () {\r\n  /**\r\n    * See useragents.js for examples of navigator.userAgent\r\n    */\r\n\r\n  var t = true\r\n\r\n  function detect(ua) {\r\n\r\n    function getFirstMatch(regex) {\r\n      var match = ua.match(regex);\r\n      return (match && match.length > 1 && match[1]) || '';\r\n    }\r\n\r\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\r\n      , likeAndroid = /like android/i.test(ua)\r\n      , android = !likeAndroid && /android/i.test(ua)\r\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\r\n      , tablet = /tablet/i.test(ua)\r\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\r\n      , result\r\n\r\n    if (/opera|opr/i.test(ua)) {\r\n      result = {\r\n        name: 'Opera'\r\n      , opera: t\r\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr)[\\s\\/](\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/windows phone/i.test(ua)) {\r\n      result = {\r\n        name: 'Windows Phone'\r\n      , windowsphone: t\r\n      , msie: t\r\n      , version: getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/msie|trident/i.test(ua)) {\r\n      result = {\r\n        name: 'Internet Explorer'\r\n      , msie: t\r\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/chrome|crios|crmo/i.test(ua)) {\r\n      result = {\r\n        name: 'Chrome'\r\n      , chrome: t\r\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (iosdevice) {\r\n      result = {\r\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\r\n      }\r\n      // WTF: version is not part of user agent in web apps\r\n      if (versionIdentifier) {\r\n        result.version = versionIdentifier\r\n      }\r\n    }\r\n    else if (/sailfish/i.test(ua)) {\r\n      result = {\r\n        name: 'Sailfish'\r\n      , sailfish: t\r\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/seamonkey\\//i.test(ua)) {\r\n      result = {\r\n        name: 'SeaMonkey'\r\n      , seamonkey: t\r\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/firefox|iceweasel/i.test(ua)) {\r\n      result = {\r\n        name: 'Firefox'\r\n      , firefox: t\r\n      , version: getFirstMatch(/(?:firefox|iceweasel)[ \\/](\\d+(\\.\\d+)?)/i)\r\n      }\r\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\r\n        result.firefoxos = t\r\n      }\r\n    }\r\n    else if (/silk/i.test(ua)) {\r\n      result =  {\r\n        name: 'Amazon Silk'\r\n      , silk: t\r\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (android) {\r\n      result = {\r\n        name: 'Android'\r\n      , version: versionIdentifier\r\n      }\r\n    }\r\n    else if (/phantom/i.test(ua)) {\r\n      result = {\r\n        name: 'PhantomJS'\r\n      , phantom: t\r\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\r\n      result = {\r\n        name: 'BlackBerry'\r\n      , blackberry: t\r\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\r\n      }\r\n    }\r\n    else if (/(web|hpw)os/i.test(ua)) {\r\n      result = {\r\n        name: 'WebOS'\r\n      , webos: t\r\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\r\n      };\r\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\r\n    }\r\n    else if (/bada/i.test(ua)) {\r\n      result = {\r\n        name: 'Bada'\r\n      , bada: t\r\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\r\n      };\r\n    }\r\n    else if (/tizen/i.test(ua)) {\r\n      result = {\r\n        name: 'Tizen'\r\n      , tizen: t\r\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\r\n      };\r\n    }\r\n    else if (/safari/i.test(ua)) {\r\n      result = {\r\n        name: 'Safari'\r\n      , safari: t\r\n      , version: versionIdentifier\r\n      }\r\n    }\r\n    else result = {}\r\n\r\n    // set webkit or gecko flag for browsers based on these engines\r\n    if (/(apple)?webkit/i.test(ua)) {\r\n      result.name = result.name || \"Webkit\"\r\n      result.webkit = t\r\n      if (!result.version && versionIdentifier) {\r\n        result.version = versionIdentifier\r\n      }\r\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\r\n      result.name = result.name || \"Gecko\"\r\n      result.gecko = t\r\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\r\n    }\r\n\r\n    // set OS flags for platforms that have multiple browsers\r\n    if (android || result.silk) {\r\n      result.android = t\r\n    } else if (iosdevice) {\r\n      result[iosdevice] = t\r\n      result.ios = t\r\n    }\r\n\r\n    // OS version extraction\r\n    var osVersion = '';\r\n    if (iosdevice) {\r\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\r\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\r\n    } else if (android) {\r\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\r\n    } else if (result.windowsphone) {\r\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\r\n    } else if (result.webos) {\r\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\r\n    } else if (result.blackberry) {\r\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\r\n    } else if (result.bada) {\r\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\r\n    } else if (result.tizen) {\r\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\r\n    }\r\n    if (osVersion) {\r\n      result.osversion = osVersion;\r\n    }\r\n\r\n    // device type extraction\r\n    var osMajorVersion = osVersion.split('.')[0];\r\n    if (tablet || iosdevice == 'ipad' || (android && (osMajorVersion == 3 || (osMajorVersion == 4 && !mobile))) || result.silk) {\r\n      result.tablet = t\r\n    } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || result.blackberry || result.webos || result.bada) {\r\n      result.mobile = t\r\n    }\r\n\r\n    // Graded Browser Support\r\n    // http://developer.yahoo.com/yui/articles/gbs\r\n    if ((result.msie && result.version >= 10) ||\r\n        (result.chrome && result.version >= 20) ||\r\n        (result.firefox && result.version >= 20.0) ||\r\n        (result.safari && result.version >= 6) ||\r\n        (result.opera && result.version >= 10.0) ||\r\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6)\r\n        ) {\r\n      result.a = t;\r\n    }\r\n    else if ((result.msie && result.version < 10) ||\r\n        (result.chrome && result.version < 20) ||\r\n        (result.firefox && result.version < 20.0) ||\r\n        (result.safari && result.version < 6) ||\r\n        (result.opera && result.version < 10.0) ||\r\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\r\n        ) {\r\n      result.c = t\r\n    } else result.x = t\r\n\r\n    return result\r\n  }\r\n\r\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent : '')\r\n\r\n\r\n  /*\r\n   * Set our detect method to the main bowser object so we can\r\n   * reuse it to test other user agents.\r\n   * This is needed to implement future tests.\r\n   */\r\n  bowser._detect = detect;\r\n\r\n  return bowser\r\n});\r\n","type":"application/javascript","title":"$:/plugins/tiddlywiki/browser-sniff/bowser/bowser.js","module-type":"library"},"$:/plugins/tiddlywiki/browser-sniff/readme":{"title":"$:/plugins/tiddlywiki/browser-sniff/readme","text":"This plugin adds a number of `$:/info/` tiddlers containing information about the current browser.\n\nIt allows you to create content that is presented in a way that is responsive to different browsers.\n\nFor example, https://tiddlywiki.com uses this plugin to present the user with the best options for getting started depending on their browser.\n\n[[Source code|https://github.com/Jermolene/TiddlyWiki5/blob/master/plugins/tiddlywiki/browser-sniff]]\r\n"},"$:/plugins/tiddlywiki/browser-sniff/usage":{"title":"$:/plugins/tiddlywiki/browser-sniff/usage","text":"! Information Tiddlers\n\nThe following informational tiddlers are created at startup:\n\n|!Title |!Description |\r\n|[[$:/info/browser/is/android]] |Running on Android? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/bada]] |Running on Bada? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/blackberry]] |Running on ~BlackBerry? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/chrome]] |Running on Chrome? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/firefox]] |Running on Firefox? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/firefoxos]] |Running on Firefox OS? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/gecko]] |Running on Gecko? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/ios]] |Running on iOS (ie an iPhone, iPad or iPod)? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/ipad]] |Running on iPad? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/iphone]] |Running on iPhone? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/ipod]] |Running on iPod? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/opera]] |Running on Opera? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/phantomjs]] |Running on ~PhantomJS? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/safari]] |Running on Safari? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/sailfish]] |Running on Sailfish? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/seamonkey]] |Running on Sea Monkey? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/silk]] |Running on Amazon's Silk? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/tizen]] |Running on Tizen? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/webkit]] |Running on ~WebKit? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/webos]] |Running on ~WebOS? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/is/windowsphone]] |Running on Windows Phone? (\"yes\" or \"no\")  |\r\n|[[$:/info/browser/name]] |Platform name (see below) |\r\n|[[$:/info/browser/version]] |Browser version |\n\nThe browser information is obtained with [[Bowser, a browser detector library from Dustin Diaz|https://github.com/ded/bowser/]]. Possible browser names include:\n\n* ''\"Amazon Silk\"''\r\n* ''\"Android\"''\r\n* ''\"Bada\"''\r\n* ''\"~BlackBerry\"''\r\n* ''\"Chrome\"''\r\n* ''\"Firefox\"''\r\n* ''\"Internet Explorer\"''\r\n* ''\"iOS\"''\r\n* ''\"Opera\"''\r\n* ''\"~PhantomJS\"''\r\n* ''\"Safari\"''\r\n* ''\"Sailfish\"''\r\n* ''\"~SeaMonkey\"''\r\n* ''\"~TiddlyDesktop\"''\r\n* ''\"Tizen\"''\r\n* ''\"~WebOS\"''\r\n* ''\"Windows Phone\"''\n\nNote that Bowser returns \"iPhone\", \"iPad\" and \"iPod\" as distinct values for the name of the current browser. TiddlyWiki converts all three distinct values into \"iOS\" before copying to [[$:/info/browser/name]].\r\n"}}}