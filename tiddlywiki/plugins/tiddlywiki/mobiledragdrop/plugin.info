{"title":"$:/plugins/tiddlywiki/mobiledragdrop","description":"Mobile drag and drop shim","author":"Tim Ruffles, adapted by Jeremy Ruston ","core-version":">=5.0.0","list":"readme license","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/mobiledragdrop/ios-drag-drop.js":{"text":"(function(doc) {\r\n\r\nfunction _exposeIosHtml5DragDropShim(config) {\r\n  log = noop; // noOp, remove this line to enable debugging\r\n\r\n  var coordinateSystemForElementFromPoint;\r\n\r\n  var DRAG_OVER_EMIT_FREQ = 50;\r\n\r\n  function main() {\r\n    config = config || {};\r\n    if (!config.hasOwnProperty(\"simulateAnchorClick\")) config.simulateAnchorClick = true;\r\n\r\n    coordinateSystemForElementFromPoint = navigator.userAgent.match(/OS [1-4](?:_\\d+)+ like Mac/) ? \"page\" : \"client\";\r\n\r\n    var div = doc.createElement('div');\r\n    var dragDiv = 'draggable' in div;\r\n    var evts = 'ondragstart' in div && 'ondrop' in div;\r\n\r\n    var needsPatch = !(dragDiv || evts) || /iPad|iPhone|iPod|Android/.test(navigator.userAgent);\r\n    log((needsPatch ? \"\" : \"not \") + \"patching html5 drag drop\");\r\n\r\n    if(!needsPatch) {\r\n      return;\r\n    }\r\n\r\n    if(!config.enableEnterLeave) {\r\n      DragDrop.prototype.synthesizeEnterLeave = noop;\r\n    }\r\n\r\n    if(config.holdToDrag){\r\n      doc.addEventListener(\"touchstart\", touchstartDelay(config.holdToDrag), {passive:false});\r\n    }\r\n    else {\r\n      doc.addEventListener(\"touchstart\", touchstart, {passive:false});\r\n    }\r\n  }\r\n\r\n  function DragDrop(event, el) {\r\n\r\n    this.dragData = {};\r\n    this.dragDataTypes = [];\r\n    this.dragImage = null;\r\n    this.dragImageTransform = null;\r\n    this.dragImageWebKitTransform = null;\r\n    this.customDragImage = null;\r\n    this.customDragImageX = null;\r\n    this.customDragImageY = null;\r\n    this.el = el || event.target;\r\n    this.dragOverTimer = null;\r\n    this.lastMoveEvent = null;\r\n\r\n    log(\"dragstart\");\r\n\r\n    if (this.dispatchDragStart()) {\r\n      this.createDragImage();\r\n      this.listen();\r\n    }\r\n  }\r\n\r\n  DragDrop.prototype = {\r\n    listen: function() {\r\n      var move = onEvt(doc, \"touchmove\", this.move, this);\r\n      var end = onEvt(doc, \"touchend\", ontouchend, this);\r\n      var cancel = onEvt(doc, \"touchcancel\", cleanup, this);\r\n\r\n      function ontouchend(event) {\r\n        this.dragend(event, event.target);\r\n        cleanup.call(this);\r\n      }\r\n      function cleanup() {\r\n        log(\"cleanup\");\r\n        this.dragDataTypes = [];\r\n        if (this.dragImage !== null) {\r\n          this.dragImage.parentNode.removeChild(this.dragImage);\r\n          this.dragImage = null;\r\n          this.dragImageTransform = null;\r\n          this.dragImageWebKitTransform = null;\r\n        }\r\n        this.customDragImage = null;\r\n        this.customDragImageX = null;\r\n        this.customDragImageY = null;\r\n        this.el = this.dragData = null;\r\n        return [move, end, cancel].forEach(function(handler) {\r\n          return handler.off();\r\n        });\r\n      }\r\n    },\r\n    move: function(event) {\r\n      event.preventDefault();\r\n      var pageXs = [], pageYs = [];\r\n      [].forEach.call(event.changedTouches, function(touch) {\r\n        pageXs.push(touch.pageX);\r\n        pageYs.push(touch.pageY);\r\n      });\r\n\r\n      var x = average(pageXs) - (this.customDragImageX || parseInt(this.dragImage.offsetWidth, 10) / 2);\r\n      var y = average(pageYs) - (this.customDragImageY || parseInt(this.dragImage.offsetHeight, 10) / 2);\r\n      this.translateDragImage(x, y);\r\n\r\n      this.synthesizeEnterLeave(event);\r\n      this.synthesizeOver(event);\r\n    },\r\n    // We use translate instead of top/left because of sub-pixel rendering and for the hope of better performance\r\n    // http://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/\r\n    translateDragImage: function(x, y) {\r\n      var translate = \"translate(\" + x + \"px,\" + y + \"px) \";\r\n\r\n      if (this.dragImageWebKitTransform !== null) {\r\n        this.dragImage.style[\"-webkit-transform\"] = translate + this.dragImageWebKitTransform;\r\n      }\r\n      if (this.dragImageTransform !== null) {\r\n        this.dragImage.style.transform = translate + this.dragImageTransform;\r\n      }\r\n    },\r\n    synthesizeEnterLeave: function(event) {\r\n      var target = elementFromTouchEvent(this.el,event)\r\n      if (target != this.lastEnter) {\r\n        if (this.lastEnter) {\r\n          this.dispatchLeave(event);\r\n        }\r\n        this.lastEnter = target;\r\n        if (this.lastEnter) {\r\n          this.dispatchEnter(event);\r\n        }\r\n      }\r\n    },\r\n    synthesizeOver: function(event) {\r\n      this.lastMoveEvent = event;\r\n      if(this.lastEnter && !this.dragOverTimer) {\r\n        this.dragOverTimer = setInterval(this.dispatchOver.bind(this), DRAG_OVER_EMIT_FREQ);\r\n      }\r\n    },\r\n    clearDragOverTimer: function() {\r\n      if(this.dragOverTimer) {\r\n        clearInterval(this.dragOverTimer);\r\n        this.dragOverTimer = null;\r\n      }\r\n    },\r\n    dragend: function(event) {\r\n\r\n      // we'll dispatch drop if there's a target, then dragEnd.\r\n      // drop comes first http://www.whatwg.org/specs/web-apps/current-work/multipage/dnd.html#drag-and-drop-processing-model\r\n      log(\"dragend\");\r\n\r\n      if (this.lastEnter) {\r\n        this.dispatchLeave(event);\r\n      }\r\n\r\n      var target = elementFromTouchEvent(this.el,event)\r\n      if (target) {\r\n        log(\"found drop target \" + target.tagName);\r\n        this.dispatchDrop(target, event);\r\n      } else {\r\n        log(\"no drop target\");\r\n      }\r\n\r\n      var dragendEvt = doc.createEvent(\"Event\");\r\n      dragendEvt.initEvent(\"dragend\", true, true);\r\n      this.el.dispatchEvent(dragendEvt);\r\n      this.clearDragOverTimer();\r\n    },\r\n    dispatchDrop: function(target, event) {\r\n      var dropEvt = doc.createEvent(\"Event\");\r\n      dropEvt.initEvent(\"drop\", true, true);\r\n\r\n      var touch = event.changedTouches[0];\r\n      var x = touch[coordinateSystemForElementFromPoint + 'X'];\r\n      var y = touch[coordinateSystemForElementFromPoint + 'Y'];\r\n\r\n      var targetOffset = getOffset(target);\r\n\r\n      dropEvt.offsetX = x - targetOffset.x;\r\n      dropEvt.offsetY = y - targetOffset.y;\r\n\r\n      dropEvt.dataTransfer = {\r\n        types: this.dragDataTypes,\r\n        getData: function(type) {\r\n          return this.dragData[type];\r\n        }.bind(this),\r\n        dropEffect: \"move\"\r\n      };\r\n      dropEvt.preventDefault = function() {\r\n        // https://www.w3.org/Bugs/Public/show_bug.cgi?id=14638 - if we don't cancel it, we'll snap back\r\n      }.bind(this);\r\n\r\n      once(doc, \"drop\", function() {\r\n        log(\"drop event not canceled\");\r\n      },this);\r\n\r\n      target.dispatchEvent(dropEvt);\r\n    },\r\n    dispatchEnter: function(event) {\r\n\r\n      var enterEvt = doc.createEvent(\"Event\");\r\n      enterEvt.initEvent(\"dragenter\", true, true);\r\n      enterEvt.dataTransfer = {\r\n        types: this.dragDataTypes,\r\n        getData: function(type) {\r\n          return this.dragData[type];\r\n        }.bind(this)\r\n      };\r\n\r\n      var touch = event.changedTouches[0];\r\n      enterEvt.pageX = touch.pageX;\r\n      enterEvt.pageY = touch.pageY;\r\n      enterEvt.clientX = touch.clientX;\r\n      enterEvt.clientY = touch.clientY;\r\n\r\n      this.lastEnter.dispatchEvent(enterEvt);\r\n    },\r\n    dispatchOver: function() {\r\n\r\n      var overEvt = doc.createEvent(\"Event\");\r\n      overEvt.initEvent(\"dragover\", true, true);\r\n      overEvt.dataTransfer = {\r\n        types: this.dragDataTypes,\r\n        getData: function(type) {\r\n          return this.dragData[type];\r\n        }.bind(this)\r\n      };\r\n\r\n      var touch = this.lastMoveEvent.changedTouches[0];\r\n      overEvt.pageX = touch.pageX;\r\n      overEvt.pageY = touch.pageY;\r\n      overEvt.clientX = touch.clientX;\r\n      overEvt.clientY = touch.clientY;\r\n\r\n      this.lastEnter.dispatchEvent(overEvt);\r\n    },\r\n    dispatchLeave: function(event) {\r\n\r\n      var leaveEvt = doc.createEvent(\"Event\");\r\n      leaveEvt.initEvent(\"dragleave\", true, true);\r\n      leaveEvt.dataTransfer = {\r\n        types: this.dragDataTypes,\r\n        getData: function(type) {\r\n          return this.dragData[type];\r\n        }.bind(this)\r\n      };\r\n\r\n      var touch = event.changedTouches[0];\r\n      leaveEvt.pageX = touch.pageX;\r\n      leaveEvt.pageY = touch.pageY;\r\n      leaveEvt.clientX = touch.clientX;\r\n      leaveEvt.clientY = touch.clientY;\r\n\r\n      this.lastEnter.dispatchEvent(leaveEvt);\r\n      this.lastEnter = null;\r\n      this.clearDragOverTimer();\r\n    },\r\n    dispatchDragStart: function() {\r\n      var evt = doc.createEvent(\"Event\");\r\n      evt.initEvent(\"dragstart\", true, true);\r\n      evt.dataTransfer = {\r\n        setData: function(type, val) {\r\n          this.dragData[type] = val;\r\n          if (this.dragDataTypes.indexOf(type) == -1) {\r\n            this.dragDataTypes[this.dragDataTypes.length] = type;\r\n          }\r\n          return val;\r\n        }.bind(this),\r\n        setDragImage: function(el, x, y){\r\n          this.customDragImage = el;\r\n          this.customDragImageX = x\r\n          this.customDragImageY = y\r\n        }.bind(this),\r\n        dropEffect: \"move\"\r\n      };\r\n      return this.el.dispatchEvent(evt);\r\n    },\r\n    createDragImage: function() {\r\n      if (this.customDragImage) {\r\n        this.dragImage = this.customDragImage.cloneNode(true);\r\n        duplicateStyle(this.customDragImage, this.dragImage);\r\n      } else {\r\n        this.dragImage = this.el.cloneNode(true);\r\n        duplicateStyle(this.el, this.dragImage);\r\n      }\r\n      this.dragImage.style.opacity = \"0.5\";\r\n      this.dragImage.style.position = \"absolute\";\r\n      this.dragImage.style.left = \"0px\";\r\n      this.dragImage.style.top = \"0px\";\r\n      this.dragImage.style.zIndex = \"999999\";\r\n\r\n      var transform = this.dragImage.style.transform;\r\n      if (typeof transform !== \"undefined\") {\r\n        this.dragImageTransform = \"\";\r\n        if (transform != \"none\") {\r\n          this.dragImageTransform = transform.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, '');\r\n        }\r\n      }\r\n\r\n      var webkitTransform = this.dragImage.style[\"-webkit-transform\"];\r\n      if (typeof webkitTransform !== \"undefined\") {\r\n        this.dragImageWebKitTransform = \"\";\r\n        if (webkitTransform != \"none\") {\r\n          this.dragImageWebKitTransform = webkitTransform.replace(/translate\\(\\D*\\d+[^,]*,\\D*\\d+[^,]*\\)\\s*/g, '');\r\n        }\r\n      }\r\n\r\n      this.translateDragImage(-9999, -9999);\r\n\r\n      doc.body.appendChild(this.dragImage);\r\n    }\r\n  };\r\n\r\n  // delayed touch start event\r\n  function touchstartDelay(delay) {\r\n    return function(evt){\r\n      var el = evt.target;\r\n\r\n      do {\r\n        if (elementIsDraggable(el)) {\r\n          var heldItem = function() {\r\n            end.off();\r\n            cancel.off();\r\n            scroll.off();\r\n            touchstart(evt);\r\n          };\r\n\r\n          var onReleasedItem = function() {\r\n            end.off();\r\n            cancel.off();\r\n            scroll.off();\r\n            clearTimeout(timer);\r\n          };\r\n\r\n          var timer = setTimeout(heldItem, delay);\r\n\r\n          var end = onEvt(el, 'touchend', onReleasedItem, this);\r\n          var cancel = onEvt(el, 'touchcancel', onReleasedItem, this);\r\n          var scroll = onEvt(window, 'scroll', onReleasedItem, this);\r\n          break;\r\n        }\r\n      } while ((el = el.parentNode) && el !== doc.body);\r\n    };\r\n  };\r\n\r\n  // event listeners\r\n  function touchstart(evt) {\r\n    var el = evt.target;\r\n    do {\r\n      if (elementIsDraggable(el)) {\r\n        handleTouchStartOnAnchor(evt, el);\r\n\r\n        evt.preventDefault();\r\n        new DragDrop(evt,el);\r\n        break;\r\n      }\r\n    } while((el = el.parentNode) && el !== doc.body);\r\n  }\r\n\r\n  function elementIsDraggable(el){\r\n    // if an element is not draggable either explicitly or implicitly we can exit immediately\r\n    if(!el.draggable) return false;\r\n\r\n    // if an element has been explicitly set to be draggable we're good to go\r\n    if(el.hasAttribute(\"draggable\")) return true;\r\n\r\n    // otherwise we investigate the implicit option\r\n    return (!config.requireExplicitDraggable);\r\n  }\r\n\r\n  function elementIsAnchor(el){\r\n    return el.tagName.toLowerCase() == \"a\";\r\n  }\r\n\r\n  function handleTouchStartOnAnchor(evt, el){\r\n    // If draggable isn't explicitly set for anchors, then simulate a click event.\r\n    // Otherwise plain old vanilla links will stop working.\r\n    // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Touch_events#Handling_clicks\r\n    if (!el.hasAttribute(\"draggable\") && elementIsAnchor(el) && config.simulateAnchorClick) {\r\n      var clickEvt = document.createEvent(\"MouseEvents\");\r\n      clickEvt.initMouseEvent(\"click\", true, true, el.ownerDocument.defaultView, 1,\r\n        evt.screenX, evt.screenY, evt.clientX, evt.clientY,\r\n        evt.ctrlKey, evt.altKey, evt.shiftKey, evt.metaKey, 0, null);\r\n      el.dispatchEvent(clickEvt);\r\n      log(\"Simulating click to anchor\");\r\n    }\r\n  }\r\n\r\n  // DOM helpers\r\n  function elementFromTouchEvent(el,event) {\r\n    var touch = event.changedTouches[0];\r\n    var target = doc.elementFromPoint(\r\n      touch[coordinateSystemForElementFromPoint + \"X\"],\r\n      touch[coordinateSystemForElementFromPoint + \"Y\"]\r\n    );\r\n    return target;\r\n  }\r\n\r\n  //calculate the offset position of an element (relative to the window, not the document)\r\n  function getOffset(el) {\r\n    var rect = el.getBoundingClientRect();\r\n    return {\r\n      \"x\": rect.left,\r\n      \"y\": rect.top\r\n    };\r\n  }\r\n\r\n  function onEvt(el, event, handler, context) {\r\n    if(context) {\r\n      handler = handler.bind(context);\r\n    }\r\n    el.addEventListener(event, handler, {passive:false});\r\n    return {\r\n      off: function() {\r\n        return el.removeEventListener(event, handler, {passive:false});\r\n      }\r\n    };\r\n  }\r\n\r\n  function once(el, event, handler, context) {\r\n    if(context) {\r\n      handler = handler.bind(context);\r\n    }\r\n    function listener(evt) {\r\n      handler(evt);\r\n      return el.removeEventListener(event,listener);\r\n    }\r\n    return el.addEventListener(event,listener);\r\n  }\r\n\r\n  // duplicateStyle expects dstNode to be a clone of srcNode\r\n  function duplicateStyle(srcNode, dstNode) {\r\n    // Is this node an element?\r\n    if (srcNode.nodeType == 1) {\r\n      // Remove any potential conflict attributes\r\n      dstNode.removeAttribute(\"id\");\r\n      dstNode.removeAttribute(\"class\");\r\n      dstNode.removeAttribute(\"style\");\r\n      dstNode.removeAttribute(\"draggable\");\r\n\r\n      // Clone the style\r\n      var cs = window.getComputedStyle(srcNode);\r\n      for (var i = 0; i < cs.length; i++) {\r\n        var csName = cs[i];\r\n        dstNode.style.setProperty(csName, cs.getPropertyValue(csName), cs.getPropertyPriority(csName));\r\n      }\r\n\r\n      // Pointer events as none makes the drag image transparent to document.elementFromPoint()\r\n      dstNode.style.pointerEvents = \"none\";\r\n    }\r\n\r\n    // Do the same for the children\r\n    if (srcNode.hasChildNodes()) {\r\n      for (var j = 0; j < srcNode.childNodes.length; j++) {\r\n        duplicateStyle(srcNode.childNodes[j], dstNode.childNodes[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  // general helpers\r\n  function log(msg) {\r\n    console.log(msg);\r\n  }\r\n\r\n  function average(arr) {\r\n    if (arr.length === 0) return 0;\r\n    return arr.reduce((function(s, v) {\r\n      return v + s;\r\n    }), 0) / arr.length;\r\n  }\r\n\r\n  function noop() {}\r\n\r\n  main();\r\n\r\n};\r\n\r\nif (typeof module === 'object' && typeof module.exports === 'object') {\r\n  module.exports = _exposeIosHtml5DragDropShim;\r\n} else if (typeof window !== 'undefined') {\r\n  _exposeIosHtml5DragDropShim(window.iosDragDropShim);\r\n}\r\n})(document);","type":"application/javascript","title":"$:/plugins/tiddlywiki/mobiledragdrop/ios-drag-drop.js"},"$:/plugins/tiddlywiki/mobiledragdrop/license":{"text":"Copyright (c) 2013 Tim Ruffles\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","type":"text/plain","title":"$:/plugins/tiddlywiki/mobiledragdrop/license"},"$:/plugins/tiddlywiki/mobiledragdrop/rawmarkup":{"title":"$:/plugins/tiddlywiki/mobiledragdrop/rawmarkup","tags":"$:/tags/RawMarkupWikified","text":"`<script>\r\nvar iosDragDropShim = { enableEnterLeave: true, holdToDrag: 300 };`\r\n{{$:/plugins/tiddlywiki/mobiledragdrop/ios-drag-drop.js}}\r\n`</script>`\r\n"},"$:/plugins/tiddlywiki/mobiledragdrop/readme":{"title":"$:/plugins/tiddlywiki/mobiledragdrop/readme","text":"This plugin provides a \"shim\" that enables HTML 5 compatible drag and drop operations on mobile browsers, including iOS and Android. The shim was created by Tim Ruffles and is published at https://github.com/timruffles/ios-html5-drag-drop-shim.\n\nAfter installing the plugin it is necessary to save the HTML file a second time before it will be fully enabled.\r\n"},"$:/plugins/tiddlywiki/mobiledragdrop/startup.js":{"title":"$:/plugins/tiddlywiki/mobiledragdrop/startup.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/mobiledragdrop/startup.js\r\ntype: application/javascript\r\nmodule-type: startup\r\n\r\nStartup initialisation\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\n// Export name and synchronous status\r\nexports.name = \"mobiledragdrop\";\r\nexports.platforms = [\"browser\"];\r\nexports.after = [\"startup\"];\r\nexports.synchronous = true;\r\n\r\nexports.startup = function() {\r\n\twindow.addEventListener(\"touchmove\", function() {});\r\n};\r\n\r\n})();\r\n","type":"application/javascript","module-type":"startup"}}}