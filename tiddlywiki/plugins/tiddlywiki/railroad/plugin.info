{"title":"$:/plugins/tiddlywiki/railroad","description":"Railroad diagram generator","author":"AstridElocson","plugin-type":"plugin","list":"readme usage syntax example","version":"5.1.18-prerelease","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/railroad/components.js":{"title":"$:/plugins/tiddlywiki/railroad/components.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/railroad/components.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\r\nComponents of a railroad diagram.\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar railroad = require(\"$:/plugins/tiddlywiki/railroad/railroad-diagrams.js\");\r\n\r\n/////////////////////////// Base component\r\n\r\nvar Component = function() {\r\n\tthis.type = \"Component\";\r\n};\r\n\r\n// Set up a leaf component\r\nComponent.prototype.initialiseLeaf = function(type,text) {\r\n\tthis.type = type;\r\n\tthis.text = text;\r\n};\r\n\r\n// Set up a component with a single child\r\nComponent.prototype.initialiseWithChild = function(type,content) {\r\n\tthis.type = type;\r\n\tthis.child = toSingleChild(content);\r\n};\r\n\r\n// Set up a component with an array of children\r\nComponent.prototype.initialiseWithChildren = function(type,content) {\r\n\tthis.type = type;\r\n\t// Force the content to be an array\r\n\tthis.children = $tw.utils.isArray(content) ? content : [content];\r\n}\r\n\r\n// Return an array of the SVG strings of an array of children\r\nComponent.prototype.getSvgOfChildren = function() {\r\n\treturn this.children.map(function(child) {\r\n\t\treturn child.toSvg();\r\n\t});\r\n}\r\n\r\nComponent.prototype.toSvg = function() {\r\n\treturn \"\";\r\n}\r\n\r\nComponent.prototype.debug = function(output,indent) {\r\n\toutput.push(indent);\r\n\toutput.push(this.type);\r\n\t// Add the text of a leaf component\r\n\tif(this.text && this.text !== \"\") {\r\n\t\toutput.push(\": \");\r\n\t\toutput.push(this.text);\r\n\t}\r\n\t// Flag the normal route\r\n\tif(this.normal !== undefined) {\r\n\t\tif(this.normal === true) {\r\n\t\t\toutput.push(\" (normal)\");\r\n\t\t} else if(this.normal !== false) {\r\n\t\t\toutput.push(\" (normal: \");\r\n\t\t\toutput.push(this.normal);\r\n\t\t\toutput.push(\")\");\r\n\t\t}\r\n\t}\r\n\toutput.push(\"\\n\");\r\n\tvar contentIndent = indent + \"  \";\r\n\t// Add the one child\r\n\tif(this.child) {\r\n\t\tthis.child.debug(output,contentIndent);\r\n\t}\r\n\t// Add the array of children\r\n\tif(this.children) {\r\n\t\tthis.debugArray(this.children,output,contentIndent);\r\n\t}\r\n  \t// Add the separator if there is one\r\n\tif(this.separator) {\r\n\t\toutput.push(indent);\r\n\t\toutput.push(\"(separator)\\n\");\r\n\t\tthis.separator.debug(output,contentIndent);\r\n\t}\r\n};\r\n\r\nComponent.prototype.debugArray = function(array,output,indent) {\r\n\tfor(var i=0; i<array.length; i++) {\r\n\t\tvar item = array[i];\r\n\t\t// Choice content is a special case: we number the branches\r\n\t\tif(item.isChoiceBranch) {\r\n\t\t\toutput.push(indent);\r\n\t\t\toutput.push(\"(\");\r\n\t\t\toutput.push(i);\r\n\t\t\toutput.push(\")\\n\");\r\n\t\t\titem.debug(output,\"  \"+indent);\r\n\t\t} else {\r\n\t\t\titem.debug(output,indent);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvar toSingleChild = function(content) {\r\n\tif($tw.utils.isArray(content)) {\r\n\t\t// Reduce an array of one child to just the child\r\n\t\tif(content.length === 1) {\r\n\t\t\treturn content[0];\r\n\t\t} else {\r\n\t\t\t// Never allow an empty sequence\r\n\t\t  \tif(content.length === 0) {\r\n  \t\t\t\tcontent.push(new Dummy());\r\n\t\t  \t}\r\n\t\t\t// Wrap multiple children into a single sequence component\r\n\t\t\treturn new Sequence(content);\r\n\t\t}\r\n\t} else {\r\n\t\t// Already single\r\n\t\treturn content;\r\n\t}\r\n}\r\n\r\n/////////////////////////// Leaf components\r\n\r\nvar Comment = function(text) {\r\n\tthis.initialiseLeaf(\"Comment\",text);\r\n};\r\n\r\nComment.prototype = new Component();\r\n\r\nComment.prototype.toSvg = function() {\r\n\treturn railroad.Comment(this.text);\r\n}\r\n\r\nvar Dummy = function() {\r\n\tthis.initialiseLeaf(\"Dummy\");\r\n};\r\n\r\nDummy.prototype = new Component();\r\n\r\nDummy.prototype.toSvg = function() {\r\n\treturn railroad.Skip();\r\n}\r\n\r\nvar Nonterminal = function(text) {\r\n\tthis.initialiseLeaf(\"Nonterminal\",text);\r\n};\r\n\r\nNonterminal.prototype = new Component();\r\n\r\nNonterminal.prototype.toSvg = function() {\r\n\treturn railroad.NonTerminal(this.text);\r\n}\r\n\r\nvar Terminal = function(text) {\r\n\tthis.initialiseLeaf(\"Terminal\",text);\r\n};\r\n\r\nTerminal.prototype = new Component();\r\n\r\nTerminal.prototype.toSvg = function() {\r\n\treturn railroad.Terminal(this.text);\r\n}\r\n\r\n/////////////////////////// Components with one child\r\n\r\nvar Optional = function(content,normal) {\r\n\tthis.initialiseWithChild(\"Optional\",content);\r\n\tthis.normal = normal;\r\n};\r\n\r\nOptional.prototype = new Component();\r\n\r\nOptional.prototype.toSvg = function() {\r\n\t// Call Optional(component,\"skip\")\r\n\treturn railroad.Optional(this.child.toSvg(), this.normal ? undefined : \"skip\");\r\n}\r\n\r\nvar OptionalRepeated = function(content,separator,normal,wantArrow) {\r\n\tthis.initialiseWithChild(\"OptionalRepeated\",content);\r\n\tthis.separator = toSingleChild(separator);\r\n\tthis.normal = normal;\r\n\tthis.wantArrow = wantArrow;\r\n};\r\n\r\nOptionalRepeated.prototype = new Component();\r\n\r\nOptionalRepeated.prototype.toSvg = function() {\r\n\t// Call ZeroOrMore(component,separator,\"skip\")\r\n\tvar separatorSvg = this.separator ? this.separator.toSvg() : null;\r\n\tvar skip = this.normal ? undefined : \"skip\";\r\n\treturn railroad.ZeroOrMore(this.child.toSvg(),separatorSvg,skip,this.wantArrow);\r\n}\r\n\r\nvar Repeated = function(content,separator,wantArrow) {\r\n\tthis.initialiseWithChild(\"Repeated\",content);\r\n\tthis.separator = toSingleChild(separator);\r\n\tthis.wantArrow = wantArrow;\r\n};\r\n\r\nRepeated.prototype = new Component();\r\n\r\nRepeated.prototype.toSvg = function() {\r\n\t// Call OneOrMore(component,separator)\r\n\tvar separatorSvg = this.separator ? this.separator.toSvg() : null;\r\n\treturn railroad.OneOrMore(this.child.toSvg(),separatorSvg,this.wantArrow);\r\n}\r\n\r\nvar Link = function(content,options) {\r\n\tthis.initialiseWithChild(\"Link\",content);\r\n\tthis.options = options;\r\n};\r\n\r\nLink.prototype = new Component();\r\n\r\nLink.prototype.toSvg = function() {\r\n\treturn railroad.Link(this.child.toSvg(),this.options);\r\n}\r\n\r\nvar Transclusion = function(content) {\r\n\tthis.initialiseWithChild(\"Transclusion\",content);\r\n};\r\n\r\nTransclusion.prototype = new Component();\r\n\r\nTransclusion.prototype.toSvg = function() {\r\n\treturn this.child.toSvg();\r\n}\r\n\r\n/////////////////////////// Components with an array of children\r\n\r\nvar Root = function(content) {\r\n\tthis.initialiseWithChildren(\"Root\",content);\r\n};\r\n\r\nRoot.prototype = new Component();\r\n\r\nRoot.prototype.toSvg = function(options) {\r\n\tvar args = this.getSvgOfChildren();\r\n\targs.unshift(options);\r\n\t// Call Diagram(options,component1,component2,...)\r\n\treturn railroad.Diagram.apply(null,args);\r\n}\r\n\r\nvar Sequence = function(content) {\r\n\tthis.initialiseWithChildren(\"Sequence\",content);\r\n};\r\n\r\nSequence.prototype = new Component();\r\n\r\nSequence.prototype.toSvg = function() {\r\n\t// Call Sequence(component1,component2,...)\r\n\treturn railroad.Sequence.apply(null,this.getSvgOfChildren());\r\n}\r\n\r\nvar Choice = function(content,normal) {\r\n\tthis.initialiseWithChildren(\"Choice\",content.map(toSingleChild));\r\n\tfor(var i=0; i<this.children.length; i++) {\r\n\t\tthis.children[i].isChoiceBranch = true;\r\n\t}\r\n\tthis.normal = normal;\r\n};\r\n\r\nChoice.prototype = new Component();\r\n\r\nChoice.prototype.toSvg = function() {\r\n\t// Call Choice(normal,component1,component2,...)\r\n\tvar args = this.getSvgOfChildren();\r\n\targs.unshift(this.normal);\r\n\treturn railroad.Choice.apply(null,args);\r\n}\r\n\r\n/////////////////////////// Exports\r\n\r\nexports.components = {\r\n\tChoice: Choice,\r\n\tComment: Comment,\r\n\tDummy: Dummy,\r\n\tLink: Link,\r\n\tNonterminal: Nonterminal,\r\n\tOptional: Optional,\r\n\tOptionalRepeated: OptionalRepeated,\r\n\tRepeated: Repeated,\r\n\tRoot: Root,\r\n\tSequence: Sequence,\r\n\tTerminal: Terminal,\r\n\tTransclusion: Transclusion\r\n};\r\n\r\n})();","type":"application/javascript","module-type":"library"},"$:/plugins/tiddlywiki/railroad/example-source":{"title":"$:/plugins/tiddlywiki/railroad/example-source","created":"20150103184022184","modified":"20150119214125000","tags":"","type":"text/vnd.tiddlywiki.railroad","text":"[\"+\"]\r\n({ [[digit|GettingStarted]] } | \"#\" <'escape sequence'>)\r\n[{(\"@\" name-char | :\"--\" )}]\r\n"},"$:/plugins/tiddlywiki/railroad/example":{"title":"$:/plugins/tiddlywiki/railroad/example","created":"20150102165032410","modified":"20150120090735000","tags":"","text":"Notation:\n\n<pre><code><$text text={{$:/plugins/tiddlywiki/railroad/example-source}}/></code></pre>\n\nDiagram:\n\n{{$:/plugins/tiddlywiki/railroad/example-source}}\n\nDebug mode:\n\n<$railroad debug=\"yes\" text={{$:/plugins/tiddlywiki/railroad/example-source}}/>\r\n"},"$:/plugins/tiddlywiki/railroad/readme":{"title":"$:/plugins/tiddlywiki/railroad/readme","created":"20150102163222184","modified":"20150119231005000","text":"This plugin provides a `<$railroad>` widget for generating railroad diagrams as SVG images.\n\nAlternatively, the [[diagram notation|$:/plugins/tiddlywiki/railroad/syntax]] can be stored in a dedicated tiddler with its `type` field set to `text/vnd.tiddlywiki.railroad`, and that tiddler can simply be transcluded to wherever it is needed.\n\nThe plugin is based on [[a library by Tab Atkins|https://github.com/tabatkins/railroad-diagrams]], and has been extended to make it more flexible, including allowing components of a diagram to function as links or be transcluded from other tiddlers.\r\n"},"$:/plugins/tiddlywiki/railroad/syntax-string":{"title":"$:/plugins/tiddlywiki/railroad/syntax-string","created":"20150103184022184","modified":"20150103184022184","text":"('\"' text '\"' | \"'\" text \"'\" | '\"\"\"' text '\"\"\"')"},"$:/plugins/tiddlywiki/railroad/syntax":{"title":"$:/plugins/tiddlywiki/railroad/syntax","created":"20150103184022184","modified":"20150119220342000","text":"The railroad widget uses a special notation to construct the components defined below.\n\n`x` and `y` here stand for any component.\n\nNames (as opposed to quoted strings) are available when a value starts with a letter and contains only letters, digits, underscores, dots and hyphens.\n\n---\n\n; sequence\r\n: <$railroad text=\"\"\" [\"<-\"] {x} [\"->\"] \"\"\"/>\r\n* A sequence of components\r\n* The `<-` and `->` delimiters allow you to force a single component to be treated as a sequence. This is occasionally useful for spacing a diagram out\n\n---\n\n; optional\r\n: <$railroad text=\"\"\" \"[\" [\":\"] x \"]\" \"\"\"/>\r\n* A component that can be omitted\r\n* The colon makes `x` appear straight ahead\n\n---\n\n; repeated\r\n: <$railroad text=\"\"\" \"{\" x [:\"+\" y] \"}\" \"\"\"/>\r\n* A list of one or more `x`\r\n* The `+` suffix adds `y` as a separator between each `x` and the next\n\n---\n\n; optional repeated\r\n: <$railroad text=\"\"\" \"[{\" [\":\"] x [:\"+\" y] \"}]\" \"\"\"/>\r\n* An optional list of `x`, i.e. a list of zero or more `x`\n\n---\n\n; choice\r\n: <$railroad text=\"\"\" \"(\" {[:\":\"] x +\"|\"} \")\" \"\"\"/>\r\n* A set of alternatives\r\n* The colon indicates which branch appears straight ahead. By default, it's the first branch\n\n---\n\n; string / terminal\r\n: <$railroad text={{$:/plugins/tiddlywiki/railroad/syntax-string}}/>\r\n* A literal or terminal component\r\n* This follows the normal ~TiddlyWiki rules for quoted strings\n\n---\n\n; nonterminal\r\n: <$railroad text=\"\"\" (name | \"<\" string \">\") \"\"\"/>\r\n* A nonterminal component, i.e. the name of another diagram\n\n---\n\n; comment\r\n: <$railroad text=\"\"\" \"/\" string \"/\" \"\"\"/>\r\n* A comment\n\n---\n\n; dummy\r\n: <$railroad text=\"\"\" \"-\" \"\"\"/>\r\n* The absence of a component\n\n---\n\n; link\r\n: <$railroad text=\"\"\" \"[[\" x \"|\" (name|string) \"]]\" \"\"\"/>\r\n* A link to the tiddler title or URI given by the string or name\n\n---\n\n; transclusion\r\n: <$railroad text=\"\"\" \"{{\" (name|string) \"}}\" \"\"\"/>\r\n* Treats the content of another tiddler as diagram syntax and transcludes it into the current diagram\n\n---\n\n; arrow pragma\r\n: <$railroad text=\"\"\" \"\\arrow\" (\"yes\" | \"no\") \"\"\"/>\r\n* Controls whether repeat paths have an arrow on them\r\n* Can be toggled on and off in mid-diagram, if desired\n\n---\n\n; debug pragma\r\n: <$railroad text=\"\"\" \"\\debug\" \"\"\"/>\r\n* Causes the diagram to display its parse tree\n\n---\n\n; start/end pragma\r\n: <$railroad text=\"\"\" (\"\\start\" |: \"\\end\") (\"none\" |: \"single\" | \"double\") \"\"\"/>\r\n* Controls the style of the diagram's startpoint or endpoint\r\n"},"$:/plugins/tiddlywiki/railroad/usage":{"title":"$:/plugins/tiddlywiki/railroad/usage","created":"20150102163222184","modified":"20150119231005000","text":"The content of the `<$railroad>` widget is ignored.\n\n|!Attribute |!Description |!Default |\r\n|text |Text in a special notation that defines the diagram's layout |-- |\r\n|arrow |If set to `no`, repeat paths do not have an arrow on them |`yes` |\r\n|start |Style of the startpoint: `single`, `double`, `none` |`single` |\r\n|end |Style of the endpoint: `single`, `double`, `none` |`single` |\r\n|debug |If set to `yes`, the diagram displays its parse tree |`no` |\n\nThese options can also be specified via pragmas in the diagram notation, or globally via a dictionary tiddler called `$:/config/railroad`:\n\n```\r\narrow: yes\r\nstart: single\r\nend: single\r\ndebug: no\r\n```\r\n"},"$:/plugins/tiddlywiki/railroad/railroad-diagrams.css":{"text":"/* CSS modified for TiddlyWiki */\r\nsvg.railroad-diagram {\r\n\tbackground-color: hsl(30,20%,98%);\r\n\tborder-radius: 5px;\r\n}\r\nsvg.railroad-diagram:hover {\r\n\tbackground-color: hsl(30,20%,96%);\r\n}\r\nsvg.railroad-diagram path,\r\nsvg.railroad-diagram rect {\r\n\tstroke-width: 2;\r\n\tstroke: #333;\r\n}\r\nsvg.railroad-diagram path {\r\n\tfill: rgba(0,0,0,0);\r\n}\r\nsvg.railroad-diagram rect {\r\n\tfill: hsl(120,100%,90%);\r\n}\r\nsvg.railroad-diagram text {\r\n\tfont: 14px monospace;\r\n\ttext-anchor: middle;\r\n}\r\nsvg.railroad-diagram text.label {\r\n\ttext-anchor: start;\r\n}\r\nsvg.railroad-diagram text.comment {\r\n\tfont: italic 12px monospace;\r\n}\r\nsvg.railroad-diagram path.arrow {\r\n    stroke-width: 2;\r\n}","type":"text/css","title":"$:/plugins/tiddlywiki/railroad/railroad-diagrams.css","tags":"$:/tags/Stylesheet"},"$:/plugins/tiddlywiki/railroad/railroad-diagrams.js":{"text":"(function(document) {\n/* TiddlyWiki: modifications to the original library are commented like this */\r\n\r\n/*\r\nRailroad Diagrams\r\nby Tab Atkins Jr. (and others)\r\nhttp://xanthir.com\r\nhttp://twitter.com/tabatkins\r\nhttp://github.com/tabatkins/railroad-diagrams\r\n\r\nThis document and all associated files in the github project are licensed under CC0: http://creativecommons.org/publicdomain/zero/1.0/\r\nThis means you can reuse, remix, or otherwise appropriate this project for your own use WITHOUT RESTRICTION.\r\n(The actual legal meaning can be found at the above link.)\r\nDon't ask me for permission to use any part of this project, JUST USE IT.\r\nI would appreciate attribution, but that is not required by the license.\r\n*/\r\n\r\n/*\r\nThis file uses a module pattern to avoid leaking names into the global scope.\r\nThe only accidental leakage is the name \"temp\".\r\nThe exported names can be found at the bottom of this file;\r\nsimply change the names in the array of strings to change what they are called in your application.\r\n\r\nAs well, several configuration constants are passed into the module function at the bottom of this file.\r\nAt runtime, these constants can be found on the Diagram class.\r\n*/\r\n\r\nvar temp = (function(options) {\r\n\tfunction subclassOf(baseClass, superClass) {\r\n\t\tbaseClass.prototype = Object.create(superClass.prototype);\r\n\t\tbaseClass.prototype.$super = superClass.prototype;\r\n\t}\r\n\r\n\tfunction unnull(/* children */) {\r\n\t\treturn [].slice.call(arguments).reduce(function(sofar, x) { return sofar !== undefined ? sofar : x; });\r\n\t}\r\n\r\n\tfunction determineGaps(outer, inner) {\r\n\t\tvar diff = outer - inner;\r\n\t\tswitch(Diagram.INTERNAL_ALIGNMENT) {\r\n\t\t\tcase 'left': return [0, diff]; break;\r\n\t\t\tcase 'right': return [diff, 0]; break;\r\n\t\t\tcase 'center':\r\n\t\t\tdefault: return [diff/2, diff/2]; break;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction wrapString(value) {\r\n\t\treturn ((typeof value) == 'string') ? new Terminal(value) : value;\r\n\t}\r\n\r\n\r\n\tfunction SVG(name, attrs, text) {\r\n\t\tattrs = attrs || {};\r\n\t\ttext = text || '';\r\n\t\tvar el = document.createElementNS(\"http://www.w3.org/2000/svg\",name);\r\n\t\tfor(var attr in attrs) {\r\n\t\t\tel.setAttribute(attr, attrs[attr]);\r\n\t\t}\r\n\t\tel.textContent = text;\r\n\t\treturn el;\r\n\t}\r\n\r\n\tfunction FakeSVG(tagName, attrs, text){\r\n\t\tif(!(this instanceof FakeSVG)) return new FakeSVG(tagName, attrs, text);\r\n\t\tif(text) this.children = text;\r\n\t\telse this.children = [];\r\n\t\tthis.tagName = tagName;\r\n\t\tthis.attrs = unnull(attrs, {});\r\n\t\treturn this;\r\n\t};\r\n\tFakeSVG.prototype.format = function(x, y, width) {\r\n\t\t// Virtual\r\n\t};\r\n\tFakeSVG.prototype.addTo = function(parent) {\r\n\t\tif(parent instanceof FakeSVG) {\r\n\t\t\tparent.children.push(this);\r\n\t\t\treturn this;\r\n\t\t} else {\r\n\t\t\tvar svg = this.toSVG();\r\n\t\t\tparent.appendChild(svg);\r\n\t\t\treturn svg;\r\n\t\t}\r\n\t};\r\n\tFakeSVG.prototype.toSVG = function() {\r\n\t\tvar el = SVG(this.tagName, this.attrs);\r\n\t\tif(typeof this.children == 'string') {\r\n\t\t\tel.textContent = this.children;\r\n\t\t} else {\r\n\t\t\tthis.children.forEach(function(e) {\r\n\t\t\t\tel.appendChild(e.toSVG());\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn el;\r\n\t};\r\n\tFakeSVG.prototype.toString = function() {\r\n\t\tvar str = '<' + this.tagName;\r\n\t\tvar group = this.tagName == \"g\" || this.tagName == \"svg\";\r\n\t\tfor(var attr in this.attrs) {\r\n\t\t\tstr += ' ' + attr + '=\"' + (this.attrs[attr]+'').replace(/&/g, '&amp;').replace(/\"/g, '&quot;') + '\"';\r\n\t\t}\r\n\t\tstr += '>';\r\n\t\tif(group) str += \"\\n\";\r\n\t\tif(typeof this.children == 'string') {\r\n\t\t\tstr += this.children.replace(/&/g, '&amp;').replace(/</g, '&lt;');\r\n\t\t} else {\r\n\t\t\tthis.children.forEach(function(e) {\r\n\t\t\t\tstr += e;\r\n\t\t\t});\r\n\t\t}\r\n\t\tstr += '</' + this.tagName + '>\\n';\r\n\t\treturn str;\r\n\t}\r\n\r\n\tfunction Path(x,y,attrs) {\r\n\t\tif(!(this instanceof Path)) return new Path(x,y,attrs);\r\n\t\tFakeSVG.call(this, 'path', attrs);\r\n\t\tthis.attrs.d = \"M\"+x+' '+y;\r\n\t}\r\n\tsubclassOf(Path, FakeSVG);\r\n\tPath.prototype.m = function(x,y) {\r\n\t\tthis.attrs.d += 'm'+x+' '+y;\r\n\t\treturn this;\r\n\t}\r\n\tPath.prototype.h = function(val) {\r\n\t\tthis.attrs.d += 'h'+val;\r\n\t\treturn this;\r\n\t}\r\n\tPath.prototype.right = Path.prototype.h;\r\n\tPath.prototype.left = function(val) { return this.h(-val); }\r\n\tPath.prototype.v = function(val) {\r\n\t\tthis.attrs.d += 'v'+val;\r\n\t\treturn this;\r\n\t}\r\n\tPath.prototype.down = Path.prototype.v;\r\n\tPath.prototype.up = function(val) { return this.v(-val); }\r\n\tPath.prototype.arc = function(sweep){\r\n\t\tvar x = Diagram.ARC_RADIUS;\r\n\t\tvar y = Diagram.ARC_RADIUS;\r\n\t\tif(sweep[0] == 'e' || sweep[1] == 'w') {\r\n\t\t\tx *= -1;\r\n\t\t}\r\n\t\tif(sweep[0] == 's' || sweep[1] == 'n') {\r\n\t\t\ty *= -1;\r\n\t\t}\r\n\t\tif(sweep == 'ne' || sweep == 'es' || sweep == 'sw' || sweep == 'wn') {\r\n\t\t\tvar cw = 1;\r\n\t\t} else {\r\n\t\t\tvar cw = 0;\r\n\t\t}\r\n\t\tthis.attrs.d += \"a\"+Diagram.ARC_RADIUS+\" \"+Diagram.ARC_RADIUS+\" 0 0 \"+cw+' '+x+' '+y;\r\n\t\treturn this;\r\n\t}\r\n\tPath.prototype.format = function() {\r\n\t\t// All paths in this library start/end horizontally.\r\n\t\t// The extra .5 ensures a minor overlap, so there's no seams in bad rasterizers.\r\n\t\tthis.attrs.d += 'h.5';\r\n\t\treturn this;\r\n\t}\r\n/* TiddlyWiki: added support for arbitrary straight lines */\r\n\tPath.prototype.line = function(dx,dy) {\r\n\t\tthis.attrs.d += \"l\"+dx+\" \"+dy;\r\n\t\treturn this;\r\n\t}\r\n\r\n/* TiddlyWiki: added twOptions parameter, passing it to Start() and End() */\r\n\tfunction Diagram(twOptions, items) {\r\n\t\tif(!(this instanceof Diagram)) return new Diagram(twOptions, [].slice.call(arguments,1));\r\n\t\tFakeSVG.call(this, 'svg', {class: Diagram.DIAGRAM_CLASS});\r\n\t\tthis.items = items.map(wrapString);\r\n\t\tthis.items.unshift(new Start(twOptions.start));\r\n\t\tthis.items.push(new End(twOptions.end));\r\n\t\tthis.width = this.items.reduce(function(sofar, el) { return sofar + el.width + (el.needsSpace?20:0)}, 0)+1;\r\n\t\tthis.up = Math.max.apply(null, this.items.map(function (x) { return x.up; }));\r\n\t\tthis.down = Math.max.apply(null, this.items.map(function (x) { return x.down; }));\r\n\t\tthis.formatted = false;\t\t\r\n\t}\r\n\tsubclassOf(Diagram, FakeSVG);\r\n\tfor(var option in options) {\r\n\t\tDiagram[option] = options[option];\r\n\t}\r\n\tDiagram.prototype.format = function(paddingt, paddingr, paddingb, paddingl) {\r\n\t\tpaddingt = unnull(paddingt, 20);\r\n\t\tpaddingr = unnull(paddingr, paddingt, 20);\r\n\t\tpaddingb = unnull(paddingb, paddingt, 20);\r\n\t\tpaddingl = unnull(paddingl, paddingr, 20);\r\n\t\tvar x = paddingl;\r\n\t\tvar y = paddingt;\r\n\t\ty += this.up;\r\n\t\tvar g = FakeSVG('g', Diagram.STROKE_ODD_PIXEL_LENGTH ? {transform:'translate(.5 .5)'} : {});\r\n\t\tfor(var i = 0; i < this.items.length; i++) {\r\n\t\t\tvar item = this.items[i];\r\n\t\t\tif(item.needsSpace) {\r\n\t\t\t\tPath(x,y).h(10).addTo(g);\r\n\t\t\t\tx += 10;\r\n\t\t\t}\r\n\t\t\titem.format(x, y, item.width).addTo(g);\r\n\t\t\tx += item.width;\r\n\t\t\tif(item.needsSpace) {\r\n\t\t\t\tPath(x,y).h(10).addTo(g);\r\n\t\t\t\tx += 10;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.attrs.width = this.width + paddingl + paddingr;\r\n\t\tthis.attrs.height = this.up + this.down + paddingt + paddingb;\r\n\t\tthis.attrs.viewBox = \"0 0 \"  + this.attrs.width + \" \" + this.attrs.height;\r\n\t\tg.addTo(this);\r\n\t\tthis.formatted = true;\r\n\t\treturn this;\r\n\t}\r\n\tDiagram.prototype.addTo = function(parent) {\r\n\t\tvar scriptTag = document.getElementsByTagName('script');\r\n\t\tscriptTag = scriptTag[scriptTag.length - 1];\r\n\t\tvar parentTag = scriptTag.parentNode;\r\n\t\tparent = parent || parentTag;\r\n\t\treturn this.$super.addTo.call(this, parent);\r\n\t}\r\n\tDiagram.prototype.toSVG = function() {\r\n\t\tif (!this.formatted) {\r\n\t\t\tthis.format();\r\n\t\t}\r\n\t\treturn this.$super.toSVG.call(this);\r\n\t}\r\n\tDiagram.prototype.toString = function() {\r\n\t\tif (!this.formatted) {\r\n\t\t\tthis.format();\r\n\t\t}\r\n\t\treturn this.$super.toString.call(this);\r\n\t}\r\n\r\n\tfunction Sequence(items) {\r\n\t\tif(!(this instanceof Sequence)) return new Sequence([].slice.call(arguments));\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tthis.items = items.map(wrapString);\r\n\t\tthis.width = this.items.reduce(function(sofar, el) { return sofar + el.width + (el.needsSpace?20:0)}, 0);\r\n\t\tthis.up = this.items.reduce(function(sofar,el) { return Math.max(sofar, el.up)}, 0);\r\n\t\tthis.down = this.items.reduce(function(sofar,el) { return Math.max(sofar, el.down)}, 0);\r\n\t}\r\n\tsubclassOf(Sequence, FakeSVG);\r\n\tSequence.prototype.format = function(x,y,width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\tfor(var i = 0; i < this.items.length; i++) {\r\n\t\t\tvar item = this.items[i];\r\n\t\t\tif(item.needsSpace) {\r\n\t\t\t\tPath(x,y).h(10).addTo(this);\r\n\t\t\t\tx += 10;\r\n\t\t\t}\r\n\t\t\titem.format(x, y, item.width).addTo(this);\r\n\t\t\tx += item.width;\r\n\t\t\tif(item.needsSpace) {\r\n\t\t\t\tPath(x,y).h(10).addTo(this);\r\n\t\t\t\tx += 10;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction Choice(normal, items) {\r\n\t\tif(!(this instanceof Choice)) return new Choice(normal, [].slice.call(arguments,1));\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tif( typeof normal !== \"number\" || normal !== Math.floor(normal) ) {\r\n\t\t\tthrow new TypeError(\"The first argument of Choice() must be an integer.\");\r\n\t\t} else if(normal < 0 || normal >= items.length) {\r\n\t\t\tthrow new RangeError(\"The first argument of Choice() must be an index for one of the items.\");\r\n\t\t} else {\r\n\t\t\tthis.normal = normal;\r\n\t\t}\r\n\t\tthis.items = items.map(wrapString);\r\n\t\tthis.width = this.items.reduce(function(sofar, el){return Math.max(sofar, el.width)},0) + Diagram.ARC_RADIUS*4;\r\n\t\tthis.up = this.down = 0;\r\n\t\tfor(var i = 0; i < this.items.length; i++) {\r\n\t\t\tvar item = this.items[i];\r\n\t\t\tif(i < normal) { this.up += Math.max(Diagram.ARC_RADIUS,item.up + item.down + Diagram.VERTICAL_SEPARATION); }\r\n\t\t\tif(i == normal) { this.up += Math.max(Diagram.ARC_RADIUS, item.up); this.down += Math.max(Diagram.ARC_RADIUS, item.down); }\r\n\t\t\tif(i > normal) { this.down += Math.max(Diagram.ARC_RADIUS,Diagram.VERTICAL_SEPARATION + item.up + item.down); }\r\n\t\t}\r\n\t}\r\n\tsubclassOf(Choice, FakeSVG);\r\n\tChoice.prototype.format = function(x,y,width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\tvar last = this.items.length -1;\r\n\t\tvar innerWidth = this.width - Diagram.ARC_RADIUS*4;\r\n\r\n\t\t// Do the elements that curve above\r\n\t\tfor(var i = this.normal - 1; i >= 0; i--) {\r\n\t\t\tvar item = this.items[i];\r\n\t\t\tif( i == this.normal - 1 ) {\r\n\t\t\t\tvar distanceFromY = Math.max(Diagram.ARC_RADIUS*2, this.items[i+1].up + Diagram.VERTICAL_SEPARATION + item.down);\r\n\t\t\t}\r\n\t\t\tPath(x,y).arc('se').up(distanceFromY - Diagram.ARC_RADIUS*2).arc('wn').addTo(this);\r\n\t\t\titem.format(x+Diagram.ARC_RADIUS*2,y - distanceFromY,innerWidth).addTo(this);\r\n\t\t\tPath(x+Diagram.ARC_RADIUS*2+innerWidth, y-distanceFromY).arc('ne').down(distanceFromY - Diagram.ARC_RADIUS*2).arc('ws').addTo(this);\r\n\t\t\tdistanceFromY += Math.max(Diagram.ARC_RADIUS, item.up + Diagram.VERTICAL_SEPARATION + (i == 0 ? 0 : this.items[i-1].down));\r\n\t\t}\r\n\r\n\t\t// Do the straight-line path.\r\n\t\tPath(x,y).right(Diagram.ARC_RADIUS*2).addTo(this);\r\n\t\tthis.items[this.normal].format(x+Diagram.ARC_RADIUS*2, y, innerWidth).addTo(this);\r\n\t\tPath(x+Diagram.ARC_RADIUS*2+innerWidth, y).right(Diagram.ARC_RADIUS*2).addTo(this);\r\n\r\n\t\t// Do the elements that curve below\r\n\t\tfor(var i = this.normal+1; i <= last; i++) {\r\n\t\t\tvar item = this.items[i];\r\n\t\t\tif( i == this.normal + 1 ) {\r\n\t\t\t\tvar distanceFromY = Math.max(Diagram.ARC_RADIUS*2, this.items[i-1].down + Diagram.VERTICAL_SEPARATION + item.up);\r\n\t\t\t}\r\n\t\t\tPath(x,y).arc('ne').down(distanceFromY - Diagram.ARC_RADIUS*2).arc('ws').addTo(this);\r\n\t\t\titem.format(x+Diagram.ARC_RADIUS*2, y+distanceFromY, innerWidth).addTo(this);\r\n\t\t\tPath(x+Diagram.ARC_RADIUS*2+innerWidth, y+distanceFromY).arc('se').up(distanceFromY - Diagram.ARC_RADIUS*2).arc('wn').addTo(this);\r\n\t\t\tdistanceFromY += Math.max(Diagram.ARC_RADIUS, item.down + Diagram.VERTICAL_SEPARATION + (i == last ? 0 : this.items[i+1].up));\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction Optional(item, skip) {\r\n\t\tif( skip === undefined )\r\n\t\t\treturn Choice(1, Skip(), item);\r\n\t\telse if ( skip === \"skip\" )\r\n\t\t\treturn Choice(0, Skip(), item);\r\n\t\telse\r\n\t\t\tthrow \"Unknown value for Optional()'s 'skip' argument.\";\r\n\t}\r\n\r\n/* TiddlyWiki: added wantArrow */\r\n\tfunction OneOrMore(item, rep, wantArrow) {\r\n\t\tif(!(this instanceof OneOrMore)) return new OneOrMore(item, rep, wantArrow);\r\n\t\tFakeSVG.call(this, 'g');\r\n\r\n/* TiddlyWiki: code added */\r\n\t\tthis.wantArrow = wantArrow;\r\n\r\n\t\trep = rep || (new Skip);\r\n\t\tthis.item = wrapString(item);\r\n\t\tthis.rep = wrapString(rep);\r\n\t\tthis.width = Math.max(this.item.width, this.rep.width) + Diagram.ARC_RADIUS*2;\r\n\t\tthis.up = this.item.up;\r\n\t\tthis.down = Math.max(Diagram.ARC_RADIUS*2, this.item.down + Diagram.VERTICAL_SEPARATION + this.rep.up + this.rep.down);\r\n\r\n/* TiddlyWiki: moved calculation of distanceFromY (of the repeat arc) to here */\r\n\t\tthis.distanceFromY = Math.max(Diagram.ARC_RADIUS*2, this.item.down+Diagram.VERTICAL_SEPARATION+this.rep.up);\r\n\t}\r\n\tsubclassOf(OneOrMore, FakeSVG);\r\n\tOneOrMore.prototype.needsSpace = true;\r\n\tOneOrMore.prototype.format = function(x,y,width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\t// Draw item\r\n\t\tPath(x,y).right(Diagram.ARC_RADIUS).addTo(this);\r\n\t\tthis.item.format(x+Diagram.ARC_RADIUS,y,this.width-Diagram.ARC_RADIUS*2).addTo(this);\r\n\t\tPath(x+this.width-Diagram.ARC_RADIUS,y).right(Diagram.ARC_RADIUS).addTo(this);\r\n\r\n\t\t// Draw repeat arc\r\n/* TiddlyWiki: moved calculation of distanceFromY from here to constructor */\r\n\t\tvar distanceFromY = this.distanceFromY;\r\n\t\t\r\n\t\tPath(x+Diagram.ARC_RADIUS,y).arc('nw').down(distanceFromY-Diagram.ARC_RADIUS*2).arc('ws').addTo(this);\r\n\t\tthis.rep.format(x+Diagram.ARC_RADIUS, y+distanceFromY, this.width - Diagram.ARC_RADIUS*2).addTo(this);\r\n\t\tPath(x+this.width-Diagram.ARC_RADIUS, y+distanceFromY).arc('se').up(distanceFromY-Diagram.ARC_RADIUS*2).arc('en').addTo(this);\r\n\t\t\r\n/* TiddlyWiki: code added */\r\n\t\tif(this.wantArrow) {\r\n\t\t\tvar arrowSize = Diagram.ARC_RADIUS/2;\r\n\t\t\t// Compensate for the illusion that makes the arrow look unbalanced if it's too close to the curve below it\r\n\t\t\tvar multiplier = (distanceFromY < arrowSize*5) ? 1.2 : 1;\r\n\t\t\tPath(x-arrowSize, y+distanceFromY/2 + arrowSize/2, {class:\"arrow\"}).\r\n\t\t\t\tline(arrowSize, -arrowSize).line(arrowSize*multiplier, arrowSize).addTo(this);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction ZeroOrMore(item, rep, skip, wantArrow) {\r\n\t\treturn Optional(OneOrMore(item, rep, wantArrow), skip);\r\n\t}\r\n\r\n/* TiddlyWiki: added type parameter */\r\n\tfunction Start(type) {\r\n\t\tif(!(this instanceof Start)) return new Start(type);\r\n\t\tFakeSVG.call(this, 'path');\r\n\t\tthis.type = type || 'single'\r\n\t\tthis.width = (this.type === 'double') ? 20 : 10;\r\n\t\tthis.up = 10;\r\n\t\tthis.down = 10;\r\n\t}\r\n\tsubclassOf(Start, FakeSVG);\r\n\tStart.prototype.format = function(x,y) {\r\n/* TiddlyWiki: added types */\r\n\t\tif(this.type === 'single') {\r\n\t\t\tthis.attrs.d = 'M '+x+' '+(y-10)+' v 20 m 0 -10 h 10.5';\r\n\t\t} else if(this.type === 'double') {\r\n\t\t\tthis.attrs.d = 'M '+x+' '+(y-10)+' v 20 m 10 -20 v 20 m -10 -10 h 20.5';\r\n\t\t} else { // 'none'\r\n\t\t\tthis.attrs.d = 'M '+x+' '+y+' h 10.5';\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n/* TiddlyWiki: added type parameter */\r\n\tfunction End(type) {\r\n\t\tif(!(this instanceof End)) return new End(type);\r\n\t\tFakeSVG.call(this, 'path');\r\n\t\tthis.type = type || 'double';\r\n\t\tthis.width = (this.type === 'double') ? 20 : 10;\r\n\t\tthis.up = 10;\r\n\t\tthis.down = 10;\r\n\t}\r\n\tsubclassOf(End, FakeSVG);\r\n\tEnd.prototype.format = function(x,y) {\r\n/* TiddlyWiki: added types */\r\n\t\tif(this.type === 'single') {\r\n\t\t\tthis.attrs.d = 'M '+x+' '+y+' h 10 m 0 -10 v 20';\r\n\t\t} else if(this.type === 'double') {\r\n\t\t\tthis.attrs.d = 'M '+x+' '+y+' h 20 m -10 -10 v 20 m 10 -20 v 20';\r\n\t\t} else { // 'none'\r\n\t\t\tthis.attrs.d = 'M '+x+' '+y+' h 10';\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction Terminal(text) {\r\n\t\tif(!(this instanceof Terminal)) return new Terminal(text);\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tthis.text = text;\r\n\t\tthis.width = text.length * 8 + 20; /* Assume that each char is .5em, and that the em is 16px */\r\n\t\tthis.up = 11;\r\n\t\tthis.down = 11;\r\n\t}\r\n\tsubclassOf(Terminal, FakeSVG);\r\n\tTerminal.prototype.needsSpace = true;\r\n\tTerminal.prototype.format = function(x, y, width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\tFakeSVG('rect', {x:x, y:y-11, width:this.width, height:this.up+this.down, rx:10, ry:10}).addTo(this);\r\n\t\tFakeSVG('text', {x:x+this.width/2, y:y+4}, this.text).addTo(this);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction NonTerminal(text) {\r\n\t\tif(!(this instanceof NonTerminal)) return new NonTerminal(text);\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tthis.text = text;\r\n\t\tthis.width = text.length * 8 + 20;\r\n\t\tthis.up = 11;\r\n\t\tthis.down = 11;\r\n\t}\r\n\tsubclassOf(NonTerminal, FakeSVG);\r\n\tNonTerminal.prototype.needsSpace = true;\r\n\tNonTerminal.prototype.format = function(x, y, width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\tFakeSVG('rect', {x:x, y:y-11, width:this.width, height:this.up+this.down}).addTo(this);\r\n\t\tFakeSVG('text', {x:x+this.width/2, y:y+4}, this.text).addTo(this);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction Comment(text) {\r\n\t\tif(!(this instanceof Comment)) return new Comment(text);\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tthis.text = text;\r\n\t\tthis.width = text.length * 7 + 10;\r\n\t\tthis.up = 11;\r\n\t\tthis.down = 11;\r\n\t}\r\n\tsubclassOf(Comment, FakeSVG);\r\n\tComment.prototype.needsSpace = true;\r\n\tComment.prototype.format = function(x, y, width) {\r\n\t\t// Hook up the two sides if this is narrower than its stated width.\r\n\t\tvar gaps = determineGaps(width, this.width);\r\n\t\tPath(x,y).h(gaps[0]).addTo(this);\r\n\t\tPath(x+gaps[0]+this.width,y).h(gaps[1]).addTo(this);\r\n\t\tx += gaps[0];\r\n\r\n\t\tFakeSVG('text', {x:x+this.width/2, y:y+5, class:'comment'}, this.text).addTo(this);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tfunction Skip() {\r\n\t\tif(!(this instanceof Skip)) return new Skip();\r\n\t\tFakeSVG.call(this, 'g');\r\n\t\tthis.width = 0;\r\n\t\tthis.up = 0;\r\n\t\tthis.down = 0;\r\n\t}\r\n\tsubclassOf(Skip, FakeSVG);\r\n\tSkip.prototype.format = function(x, y, width) {\r\n\t\tPath(x,y).right(width).addTo(this);\r\n\t\treturn this;\r\n\t}\r\n\t\r\n/* TiddlyWiki: added linking ability */\r\n\tfunction Link(item,options) {\r\n\t\tif(!(this instanceof Link)) return new Link(item,options);\r\n\t\tFakeSVG.call(this,'a',options);\r\n\t\tthis.item = item;\r\n\t\tthis.width = item.width;\r\n\t\tthis.up = item.up;\r\n\t\tthis.down = item.down;\r\n\t}\r\n\tsubclassOf(Link, FakeSVG);\r\n\tLink.prototype.needsSpace = true;\r\n\tLink.prototype.format = function(x, y, width) {\r\n\t\tthis.item.format(x,y,width).addTo(this);\r\n\t\treturn this;\r\n\t}\r\n\r\n/* TiddlyWiki: this block replaces the export mechanism in the original library */\r\n\tif (exports) {\r\n\t\texports.Diagram = Diagram;\r\n\t\texports.Sequence = Sequence;\r\n\t\texports.Choice = Choice;\r\n\t\texports.Optional = Optional;\r\n\t\texports.OneOrMore = OneOrMore;\r\n\t\texports.ZeroOrMore = ZeroOrMore;\r\n\t\texports.Terminal = Terminal;\r\n\t\texports.NonTerminal = NonTerminal;\r\n\t\texports.Comment = Comment;\r\n\t\texports.Skip = Skip;\r\n\t\texports.Link = Link;\r\n\t};\r\n})(\r\n\t{\r\n\tVERTICAL_SEPARATION: 8,\r\n\tARC_RADIUS: 10,\r\n\tDIAGRAM_CLASS: 'railroad-diagram',\r\n\tSTROKE_ODD_PIXEL_LENGTH: true,\r\n\tINTERNAL_ALIGNMENT: 'center',\r\n\t}\r\n);\r\n\r\n/* TiddlyWiki: removed assignments to properties of the window object */\r\n\n})($tw.node ? $tw.fakeDocument : window.document)\n","type":"application/javascript","title":"$:/plugins/tiddlywiki/railroad/railroad-diagrams.js","module-type":"library"},"$:/plugins/tiddlywiki/railroad/parser.js":{"title":"$:/plugins/tiddlywiki/railroad/parser.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/railroad/parser.js\r\ntype: application/javascript\r\nmodule-type: library\r\n\r\nParser for the source of a railroad diagram.\r\n\r\n[:x]\t\t\toptional, normally included\r\n[x]\t\t\t\toptional, normally omitted\r\n{x}\t\t\t\tone or more\r\n{x +\",\"}\t\tone or more, comma-separated\r\n[{:x}]\t\t\tzero or more, normally included\r\n[{:x +\",\"}]\t\tzero or more, comma-separated, normally included\r\n[{x}]\t\t\tzero or more, normally omitted\r\n[{x +\",\"}]\t\tzero or more, comma-separated, normally omitted\r\nx y z\t\t\tsequence\r\n<-x y z->\t\texplicit sequence\r\n(x|y|z)\t\t\talternatives\r\n(x|:y|z)\t\talternatives, normally y\r\n\"x\"\t\t\t\tterminal\r\n<\"x\">\t\t\tnonterminal\r\n/\"blah\"/\t\tcomment\r\n-\t\t\t\tdummy\r\n[[x|\"tiddler\"]]\tlink\r\n{{\"tiddler\"}}\ttransclusion\r\n\r\n\"x\" can also be written 'x' or \"\"\"x\"\"\"\r\n\r\npragmas:\r\n\t\\arrow yes|no\r\n\t\\debug yes|no\r\n\t\\start single|double|none\r\n\t\\end single|double|none\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar components = require(\"$:/plugins/tiddlywiki/railroad/components.js\").components;\r\n\r\nvar Parser = function(widget,source,options) {\r\n\tthis.widget = widget;\r\n\tthis.source = source;\r\n\tthis.options = options;\r\n\tthis.tokens = this.tokenise(source);\r\n\tthis.tokenPos = 0;\r\n\tthis.advance();\r\n\tthis.content = this.parseContent();\r\n\tthis.root = new components.Root(this.content);\r\n\tthis.checkFinished();\r\n};\r\n\r\n/////////////////////////// Parser dispatch\r\n\r\nParser.prototype.parseContent = function() {\r\n\tvar content = [];\r\n\t// Parse zero or more components\r\n\twhile(true) {\r\n\t\tvar component = this.parseComponent();\r\n\t\tif(!component) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif(!component.isPragma) {\r\n\t\t\tcontent.push(component);\r\n\t\t}\r\n\t}\r\n\treturn content;\r\n};\r\n\r\nParser.prototype.parseComponent = function() {\r\n\tvar component = null;\r\n\tif(this.token) {\r\n\t\tif(this.at(\"string\")) {\r\n\t\t\tcomponent = this.parseTerminal();\r\n\t\t} else if(this.at(\"name\")) {\r\n\t\t\tcomponent = this.parseName();\r\n\t\t} else if(this.at(\"pragma\")) {\r\n\t\t\tcomponent = this.parsePragma();\r\n\t\t} else {\r\n\t\t\tswitch(this.token.value) {\r\n\t\t\t\tcase \"[\":\r\n\t\t\t\t\tcomponent = this.parseOptional();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"{\":\r\n\t\t\t\t\tcomponent = this.parseRepeated();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"<\":\r\n\t\t\t\t\tcomponent = this.parseNonterminal();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"(\":\r\n\t\t\t\t\tcomponent = this.parseChoice();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"/\":\r\n\t\t\t\t\tcomponent = this.parseComment();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"[[\":\r\n\t\t\t\t\tcomponent = this.parseLink();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"{{\":\r\n\t\t\t\t\tcomponent = this.parseTransclusion();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"<-\":\r\n\t\t\t\t\tcomponent = this.parseSequence();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"-\":\r\n\t\t\t\t\tcomponent = this.parseDummy();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn component;\r\n};\r\n\r\n/////////////////////////// Specific components\r\n\r\nParser.prototype.parseChoice = function() {\r\n\t// Consume the (\r\n\tthis.advance();\r\n\tvar content = [],\r\n\t\tcolon = -1;\r\n\tdo {\r\n\t\t// Allow at most one branch to be prefixed with a colon\r\n\t\tif(colon === -1 && this.eat(\":\")) {\r\n\t\t\tcolon = content.length;\r\n\t\t}\r\n\t\t// Parse the next branch\r\n\t\tcontent.push(this.parseContent());\r\n\t} while(this.eat(\"|\"));\r\n\t// Consume the closing bracket\r\n\tthis.close(\")\");\r\n\t// Create a component\r\n\treturn new components.Choice(content,colon === -1 ? 0 : colon);\r\n};\r\n\r\nParser.prototype.parseComment = function() {\r\n\t// Consume the /\r\n\tthis.advance();\r\n\t// The comment's content should be in a string literal\r\n\tvar content = this.expectString(\"after /\");\r\n\t// Consume the closing /\r\n\tthis.close(\"/\");\r\n\t// Create a component\r\n\treturn new components.Comment(content);\r\n};\r\n\r\nParser.prototype.parseDummy = function() {\r\n\t// Consume the -\r\n\tthis.advance();\r\n\t// Create a component\r\n\treturn new components.Dummy();\r\n};\r\n\r\nParser.prototype.parseLink = function() {\r\n\t// Consume the [[\r\n\tthis.advance();\r\n\t// Parse the content\r\n\tvar content = this.parseContent();\r\n\t// Consume the |\r\n\tthis.expect(\"|\");\r\n\t// Consume the target\r\n\tvar target = this.expectNameOrString(\"as link target\");\r\n\t// Prepare some attributes for the SVG \"a\" element to carry\r\n\tvar options = {\"data-tw-target\": target};\r\n\tif($tw.utils.isLinkExternal(target)) {\r\n\t\toptions[\"data-tw-external\"] = true;\r\n\t}\r\n\t// Consume the closing ]]\r\n\tthis.close(\"]]\");\r\n\t// Create a component\r\n\treturn new components.Link(content,options);\r\n};\r\n\r\nParser.prototype.parseName = function() {\r\n\t// Create a component\r\n\tvar component = new components.Nonterminal(this.token.value);\r\n\t// Consume the name\r\n\tthis.advance();\r\n\treturn component;\r\n};\r\n\r\nParser.prototype.parseNonterminal = function() {\r\n\t// Consume the <\r\n\tthis.advance();\r\n\t// The nonterminal's name should be in a string literal\r\n\tvar content = this.expectString(\"after <\");\r\n\t// Consume the closing bracket\r\n\tthis.close(\">\");\r\n\t// Create a component\r\n\treturn new components.Nonterminal(content);\r\n};\r\n\r\nParser.prototype.parseOptional = function() {\r\n\tvar wantArrow = this.options.arrow;\r\n\t// Consume the [\r\n\tthis.advance();\r\n\t// Consume the { if there is one\r\n\tvar repeated = this.eat(\"{\");\r\n\t// Note whether omission is the normal route\r\n\tvar normal = this.eat(\":\");\r\n\t// Parse the content\r\n\tvar content = this.parseContent(),\r\n\t\tseparator = null;\r\n\t// Parse the separator if there is one\r\n\tif(repeated && this.eat(\"+\")) {\r\n\t\tseparator = this.parseContent();\r\n\t}\r\n\t// Consume the closing brackets\r\n\tif(repeated) {\r\n\t\tthis.close(\"}\");\r\n\t}\r\n\tthis.close(\"]\");\r\n\t// Create a component\r\n\treturn repeated ? new components.OptionalRepeated(content,separator,normal,wantArrow)\r\n\t\t: new components.Optional(content,normal);\r\n};\r\n\r\nParser.prototype.parseRepeated = function() {\r\n\tvar wantArrow = this.options.arrow;\r\n\t// Consume the {\r\n\tthis.advance();\r\n\t// Parse the content\r\n\tvar content = this.parseContent(),\r\n\t\tseparator = null;\r\n\t// Parse the separator if there is one\r\n\tif(this.eat(\"+\")) {\r\n\t\tseparator = this.parseContent();\r\n\t}\r\n\t// Consume the closing bracket\r\n\tthis.close(\"}\");\r\n\t// Create a component\r\n\treturn new components.Repeated(content,separator,wantArrow);\r\n};\r\n\r\nParser.prototype.parseSequence = function() {\r\n\t// Consume the <-\r\n\tthis.advance();\r\n\t// Parse the content\r\n\tvar content = this.parseContent();\r\n\t// Consume the closing ->\r\n\tthis.close(\"->\");\r\n\t// Create a component\r\n\treturn new components.Sequence(content);\r\n};\r\n\r\nParser.prototype.parseTerminal = function() {\r\n\tvar component = new components.Terminal(this.token.value);\r\n\t// Consume the string literal\r\n\tthis.advance();\r\n    return component;\r\n};\r\n\r\nParser.prototype.parseTransclusion = function() {\r\n\t// Consume the {{\r\n\tthis.advance();\r\n\t// Consume the text reference\r\n\tvar textRef = this.expectNameOrString(\"as transclusion source\");\r\n\t// Consume the closing }}\r\n\tthis.close(\"}}\");\r\n\t// Retrieve the content of the text reference\r\n\tvar source = this.widget.wiki.getTextReference(textRef,\"\",this.widget.getVariable(\"currentTiddler\"));\r\n\t// Parse the content\r\n\tvar content = new Parser(this.widget,source).content;\r\n\t// Create a component\r\n\treturn new components.Transclusion(content);\r\n};\r\n\r\n/////////////////////////// Pragmas\r\n\r\nParser.prototype.parsePragma = function() {\r\n\t// Create a dummy component\r\n\tvar component = { isPragma: true };\r\n\t// Consume the pragma\r\n\tvar pragma = this.token.value;\r\n\tthis.advance();\r\n\t// Apply the setting\r\n\tif(pragma === \"arrow\") {\r\n\t\tthis.options.arrow = this.parseYesNo(pragma);\t\t\r\n\t} else if(pragma === \"debug\") {\r\n\t\tthis.options.debug = true;\r\n\t} else if(pragma === \"start\") {\r\n\t\tthis.options.start = this.parseTerminusStyle(pragma);\t\t\r\n\t} else if(pragma === \"end\") {\r\n\t\tthis.options.end = this.parseTerminusStyle(pragma);\t\t\r\n\t} else {\r\n\t\tthrow \"Invalid pragma\";\r\n\t}\r\n\treturn component;\r\n};\r\n\r\nParser.prototype.parseYesNo = function(pragma) {\r\n\treturn this.parseSetting([\"yes\",\"no\"],pragma) === \"yes\";\r\n}\r\n\r\nParser.prototype.parseTerminusStyle = function(pragma) {\r\n\treturn this.parseSetting([\"single\",\"double\",\"none\"],pragma);\r\n}\r\n\r\nParser.prototype.parseSetting = function(options,pragma) {\r\n\tif(this.at(\"name\") && options.indexOf(this.token.value) !== -1) {\r\n\t\treturn this.tokenValueEaten();\t\t\r\n\t}\r\n\tthrow options.join(\" or \") + \" expected after \\\\\" + pragma;\r\n}\r\n\r\n/////////////////////////// Token manipulation\r\n\r\nParser.prototype.advance = function() {\r\n\tif(this.tokenPos >= this.tokens.length) {\r\n\t\tthis.token = null;\r\n\t}\r\n\tthis.token = this.tokens[this.tokenPos++];\r\n};\r\n\r\nParser.prototype.at = function(token) {\r\n\treturn this.token && (this.token.type === token || this.token.type === \"token\" && this.token.value === token);\r\n};\r\n\r\nParser.prototype.eat = function(token) {\r\n\tvar at = this.at(token);\r\n\tif(at) {\r\n\t\tthis.advance();\r\n\t}\r\n\treturn at;\r\n};\r\n\r\nParser.prototype.tokenValueEaten = function() {\r\n\tvar output = this.token.value;\r\n\tthis.advance();\r\n\treturn output;\r\n};\r\n\r\nParser.prototype.close = function(token) {\r\n\tif(!this.eat(token)) {\r\n\t\tthrow \"Closing \" + token + \" expected\";\r\n\t}\r\n};\r\n\r\nParser.prototype.checkFinished = function() {\r\n\tif(this.token) {\r\n\t\tthrow \"Syntax error at \" + this.token.value;\r\n\t}\r\n};\r\n\r\nParser.prototype.expect = function(token) {\r\n\tif(!this.eat(token)) {\r\n\t\tthrow token + \" expected\";\r\n\t}\r\n};\r\n\r\nParser.prototype.expectString = function(context,token) {\r\n\tif(!this.at(\"string\")) {\r\n\t\ttoken = token || \"String\";\r\n\t\tthrow token + \" expected \" + context;\r\n\t}\r\n\treturn this.tokenValueEaten();\r\n};\r\n\r\nParser.prototype.expectNameOrString = function(context) {\r\n\tif(this.at(\"name\")) {\r\n\t\treturn this.tokenValueEaten();\r\n\t}\r\n\treturn this.expectString(context,\"Name or string\");\r\n};\r\n\r\n/////////////////////////// Tokenisation\r\n\r\nParser.prototype.tokenise = function(source) {\r\n\tvar tokens = [],\r\n\t\tpos = 0,\r\n\t\tc, s, token;\r\n\twhile(pos < source.length) {\r\n\t\t// Initialise this iteration\r\n\t\ts = token = null;\r\n\t\t// Skip whitespace\r\n\t\tpos = $tw.utils.skipWhiteSpace(source,pos);\r\n\t\t// Avoid falling off the end of the string\r\n\t\tif (pos >= source.length) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t// Examine the next character\r\n\t\tc = source.charAt(pos);\r\n\t\tif(\"\\\"'\".indexOf(c) !== -1) {\r\n\t\t\t// String literal\r\n\t\t\ttoken = $tw.utils.parseStringLiteral(source,pos);\r\n\t\t\tif(!token) {\r\n\t\t\t\tthrow \"Unterminated string literal\";\r\n\t\t\t}\r\n\t\t} else if(\"[]{}\".indexOf(c) !== -1) {\r\n\t\t\t// Single or double character\r\n\t\t\ts = source.charAt(pos+1) === c ? c + c : c;\r\n\t\t} else if(c === \"<\") {\r\n\t\t\t// < or <-\r\n\t\t\ts = source.charAt(pos+1) === \"-\" ? \"<-\" : \"<\";\r\n\t\t} else if(c === \"-\") {\r\n\t\t\t// - or ->\r\n\t\t\ts = source.charAt(pos+1) === \">\" ? \"->\" : \"-\";\r\n\t\t} else if(\"()>+/:|\".indexOf(c) !== -1) {\r\n\t\t\t// Single character\r\n\t\t\ts = c;\r\n\t\t} else if(c.match(/[a-zA-Z]/)) {\r\n\t\t\t// Name\r\n\t\t\ttoken = this.readName(source,pos);\r\n\t\t} else if(c.match(/\\\\/)) {\r\n\t\t\t// Pragma\r\n\t\t\ttoken = this.readPragma(source,pos);\r\n\t\t} else {\r\n\t\t\tthrow \"Syntax error at \" + c;\r\n\t\t}\r\n\t\t// Add our findings to the return array\r\n\t\tif(token) {\r\n\t\t\ttokens.push(token);\r\n\t\t} else {\r\n\t\t\ttoken = $tw.utils.parseTokenString(source,pos,s);\r\n\t\t\ttokens.push(token);\r\n\t\t}\r\n\t\t// Prepare for the next character\r\n\t\tpos = token.end;\r\n\t}\r\n\treturn tokens;\r\n};\r\n\r\nParser.prototype.readName = function(source,pos) {\r\n\tvar re = /([a-zA-Z0-9_.-]+)/g;\r\n\tre.lastIndex = pos;\r\n\tvar match = re.exec(source);\r\n\tif(match && match.index === pos) {\r\n\t\treturn {type: \"name\", value: match[1], start: pos, end: pos+match[1].length};\r\n\t} else {\r\n\t\tthrow \"Invalid name\";\r\n\t}\r\n};\r\n\r\nParser.prototype.readPragma = function(source,pos) {\r\n\tvar re = /([a-z]+)/g;\r\n\tpos++;\r\n\tre.lastIndex = pos;\r\n\tvar match = re.exec(source);\r\n\tif(match && match.index === pos) {\r\n\t\treturn {type: \"pragma\", value: match[1], start: pos, end: pos+match[1].length};\r\n\t} else {\r\n\t\tthrow \"Invalid pragma\";\r\n\t}\r\n};\r\n\r\n/////////////////////////// Exports\r\n\r\nexports.parser = Parser;\r\n\r\n})();","type":"application/javascript","module-type":"library"},"$:/plugins/tiddlywiki/railroad/typed-parser.js":{"title":"$:/plugins/tiddlywiki/railroad/typed-parser.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/railroad/typed-parser.js\r\ntype: application/javascript\r\nmodule-type: parser\r\n\r\nThis parser wraps unadorned railroad syntax into a railroad widget\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar RailroadParser = function(type,text,options) {\r\n\tvar element = {\r\n\t\t\ttype: \"railroad\",\r\n\t\t\ttag: \"$railroad\",\r\n\t\t\ttext: text\r\n\t\t};\r\n\tthis.tree = [element];\r\nconsole.log(text);\r\n};\r\n\r\nexports[\"text/vnd.tiddlywiki.railroad\"] = RailroadParser;\r\n\r\n})();\r\n\r\n","type":"application/javascript","module-type":"parser"},"$:/plugins/tiddlywiki/railroad/wrapper.js":{"title":"$:/plugins/tiddlywiki/railroad/wrapper.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/railroad/wrapper.js\r\ntype: application/javascript\r\nmodule-type: widget\r\n\r\nWrapper for `railroad-diagrams.js` that provides a `<$railroad>` widget.\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar Parser = require(\"$:/plugins/tiddlywiki/railroad/parser.js\").parser,\r\n\tWidget = require(\"$:/core/modules/widgets/widget.js\").widget;\r\n\r\nvar RailroadWidget = function(parseTreeNode,options) {\r\n\tthis.initialise(parseTreeNode,options);\r\n};\r\n\r\nvar RAILROAD_OPTIONS = \"$:/config/railroad\";\r\n\r\n/*\r\nInherit from the base widget class\r\n*/\r\nRailroadWidget.prototype = new Widget();\r\n\r\n/*\r\nRender this widget into the DOM\r\n*/\r\nRailroadWidget.prototype.render = function(parent,nextSibling) {\r\n\t// Housekeeping\r\n\tthis.parentDomNode = parent;\r\n\tthis.computeAttributes();\r\n\tthis.execute();\r\n\t// Get the source text\r\n\tvar source = this.getAttribute(\"text\",this.parseTreeNode.text || \"\");\r\n\t// Create a div to contain the SVG or error message\r\n\tvar div = this.document.createElement(\"div\");\r\n\ttry {\r\n\t\t// Initialise options from the config tiddler or widget attributes\r\n\t\tvar config = $tw.wiki.getTiddlerData(RAILROAD_OPTIONS,{});\r\n\t\tvar options = {\r\n\t\t\tarrow: this.getAttribute(\"arrow\", config.arrow || \"yes\") === \"yes\",\r\n\t\t\tdebug: this.getAttribute(\"debug\", config.debug || \"no\") === \"yes\",\r\n\t\t\tstart: this.getAttribute(\"start\", config.start || \"single\"),\r\n\t\t\tend: this.getAttribute(\"end\", config.end || \"single\")\r\n\t\t};\r\n\t\t// Parse the source\r\n\t\tvar parser = new Parser(this,source,options);\r\n\t\t// Generate content into the div\r\n\t\tif(parser.options.debug) {\r\n\t\t\tthis.renderDebug(parser,div);\r\n\t\t} else {\r\n\t\t\tthis.renderSvg(parser,div);\r\n\t\t}\r\n\t} catch(ex) {\r\n\t\tdiv.className = \"tc-error\";\r\n\t\tdiv.textContent = ex;\r\n\t}\r\n\t// Insert the div into the DOM\r\n\tparent.insertBefore(div,nextSibling);\r\n\tthis.domNodes.push(div);\r\n};\r\n\r\nRailroadWidget.prototype.renderDebug = function(parser,div) {\r\n\tvar output = [\"<pre>\"];\r\n\tparser.root.debug(output, \"\");\r\n\toutput.push(\"</pre>\");\r\n\tdiv.innerHTML = output.join(\"\");\r\n};\r\n\r\nRailroadWidget.prototype.renderSvg = function(parser,div) {\r\n\t// Generate a model of the diagram\r\n\tvar fakeSvg = parser.root.toSvg(parser.options);\r\n\t// Render the model into a tree of SVG DOM nodes\r\n\tvar svg = fakeSvg.toSVG();\r\n\t// Fill in the remaining attributes of any link nodes\r\n\tthis.patchLinks(svg);\r\n\t// Insert the SVG tree into the div\r\n\tdiv.appendChild(svg);\r\n};\r\n\r\nRailroadWidget.prototype.patchLinks = function(node) {\r\n\tvar self = this;\r\n\tif(!$tw.node && node.hasChildNodes()) {\r\n\t\tvar children = node.childNodes;\r\n\t\tfor(var i=0; i<children.length; i++) {\r\n\t\t\tvar child = children[i];\r\n\t\t\tvar attributes = child.attributes;\r\n\t\t\tif(attributes) {\r\n\t\t\t\t// Find each element that has a data-tw-target attribute\r\n\t\t\t\tvar target = child.attributes[\"data-tw-target\"];\r\n\t\t\t\tif(target !== undefined) {\r\n\t\t\t\t\ttarget = target.value;\r\n\t\t\t\t\tif(child.attributes[\"data-tw-external\"]) {\r\n\t\t\t\t\t\t// External links are straightforward\r\n\t\t\t\t\t\tchild.setAttribute(\"target\",\"_blank\");\r\n\t\t\t\t\t\tchild.setAttribute(\"rel\",\"noopener noreferrer\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Each internal link gets its own onclick handler, capturing its own copy of target\r\n\t\t\t\t\t\t(function(myTarget) {\r\n\t\t\t\t\t\t\tchild.onclick = function(event) {\r\n\t\t\t\t\t\t\t\tself.dispatchLink(myTarget,event);\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})(target);\r\n\t\t\t\t\t\ttarget = \"#\" + target;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchild.setAttributeNS(\"http://www.w3.org/1999/xlink\",\"href\",target);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.patchLinks(child);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nRailroadWidget.prototype.refresh = function(changedTiddlers) {\r\n\tvar changedAttributes = this.computeAttributes();\r\n\tif(changedAttributes.text || changedTiddlers[RAILROAD_OPTIONS]) {\r\n\t\tthis.refreshSelf();\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\t\r\n};\r\n\r\nRailroadWidget.prototype.dispatchLink = function(to,event) {\r\n\t// Send the click on its way as a navigate event\r\n\tvar bounds = this.domNodes[0].getBoundingClientRect();\r\n\tthis.dispatchEvent({\r\n\t\ttype: \"tm-navigate\",\r\n\t\tnavigateTo: to,\r\n\t\tnavigateFromTitle: this.getVariable(\"storyTiddler\"),\r\n\t\tnavigateFromNode: this,\r\n\t\tnavigateFromClientRect: { top: bounds.top, left: bounds.left, width: bounds.width, right: bounds.right, bottom: bounds.bottom, height: bounds.height\r\n\t\t},\r\n\t\tnavigateSuppressNavigation: event.metaKey || event.ctrlKey || (event.button === 1)\r\n\t});\r\n\tevent.preventDefault();\r\n\tevent.stopPropagation();\r\n\treturn false;\r\n};\r\n\r\nexports.railroad = RailroadWidget;\r\n\r\n})();","type":"application/javascript","module-type":"widget"}}}