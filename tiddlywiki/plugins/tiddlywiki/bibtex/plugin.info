{"title":"$:/plugins/tiddlywiki/bibtex","description":"BibTeX importer","author":"Henrik Muehe and Mikola Lysenko, adapted by Jeremy Ruston","plugin-type":"plugin","list":"readme license","version":"5.1.18-prerelease","dependents":"","type":"application/json","tiddlers":{"$:/plugins/tiddlywiki/bibtex/deserializer.js":{"title":"$:/plugins/tiddlywiki/bibtex/deserializer.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/bibtex/deserializer.js\r\ntype: application/javascript\r\nmodule-type: tiddlerdeserializer\r\n\r\nXLSX file deserializer\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar bibtexParse = require(\"$:/plugins/tiddlywiki/bibtex/bibtexParse.js\");\r\n\r\n/*\r\nParse an XLSX file into tiddlers\r\n*/\r\nexports[\"application/x-bibtex\"] = function(text,fields) {\r\n\tvar data,\r\n\t\tresults = [];\r\n\t// Parse the text\r\n\ttry {\r\n\t\tdata = bibtexParse.toJSON(text)\r\n\t} catch(ex) {\r\n\t\tdata = ex.toString();\r\n\t}\r\n\tif(typeof data === \"string\") {\r\n\t\treturn [{\r\n\t\t\ttitle: \"BibTeX import error: \" + data,\r\n\t\t}];\r\n\t}\r\n\t// Convert each entry\r\n\t$tw.utils.each(data,function(entry) {\r\n\t\tvar fields = {\r\n\t\t\ttitle: entry.citationKey,\r\n\t\t\t\"bibtex-entry-type\": entry.entryType\r\n\t\t};\r\n\t\t$tw.utils.each(entry.entryTags,function(value,name) {\r\n\t\t\tfields[\"bibtex-\" + name] = value;\r\n\t\t});\r\n\t\tresults.push(fields);\r\n\t});\r\n\t// Return the output tiddlers\r\n\treturn results;\r\n};\r\n\r\n})();\r\n","type":"application/javascript","module-type":"tiddlerdeserializer"},"$:/plugins/tiddlywiki/bibtex/readme":{"title":"$:/plugins/tiddlywiki/bibtex/readme","text":"The BibTeX plugin provides a deserializer that can convert bibliographic entries in `.bib` files into individual tiddlers.\n\nYou can use it in the browser by dragging and dropping a `.bib` file into the TiddlyWiki window. Under Node.js, use the `--load` command to load a `.bib` file.\n\nThe conversion is as follows:\n\n* `title` comes from citationKey\r\n* `bibtex-entry-type` comes from entryType\r\n* all `entryTags` are assigned to fields with the prefix `bibtex-`\n\nThe BibTeX plugin is based on the library [[bibtexParseJs by Henrik Muehe and Mikola Lysenko|https://github.com/ORCID/bibtexParseJs]].\r\n"},"$:/plugins/tiddlywiki/bibtex/bibtexParse.js":{"text":"/* start bibtexParse 0.0.22 */\r\n\r\n//Original work by Henrik Muehe (c) 2010\r\n//\r\n//CommonJS port by Mikola Lysenko 2013\r\n//\r\n//Port to Browser lib by ORCID / RCPETERS\r\n//\r\n//Issues:\r\n//no comment handling within strings\r\n//no string concatenation\r\n//no variable values yet\r\n//Grammar implemented here:\r\n//bibtex -> (string | preamble | comment | entry)*;\r\n//string -> '@STRING' '{' key_equals_value '}';\r\n//preamble -> '@PREAMBLE' '{' value '}';\r\n//comment -> '@COMMENT' '{' value '}';\r\n//entry -> '@' key '{' key ',' key_value_list '}';\r\n//key_value_list -> key_equals_value (',' key_equals_value)*;\r\n//key_equals_value -> key '=' value;\r\n//value -> value_quotes | value_braces | key;\r\n//value_quotes -> '\"' .*? '\"'; // not quite\r\n//value_braces -> '{' .*? '\"'; // not quite\r\n(function(exports) {\r\n\r\n    function BibtexParser() {\r\n        \r\n        this.months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"];\r\n        this.notKey = [',','{','}',' ','='];\r\n        this.pos = 0;\r\n        this.input = \"\";\r\n        this.entries = new Array();\r\n\r\n        this.currentEntry = \"\";\r\n\r\n        this.setInput = function(t) {\r\n            this.input = t;\r\n        };\r\n\r\n        this.getEntries = function() {\r\n            return this.entries;\r\n        };\r\n\r\n        this.isWhitespace = function(s) {\r\n            return (s == ' ' || s == '\\r' || s == '\\t' || s == '\\n');\r\n        };\r\n\r\n        this.match = function(s, canCommentOut) {\r\n            if (canCommentOut == undefined || canCommentOut == null)\r\n                canCommentOut = true;\r\n            this.skipWhitespace(canCommentOut);\r\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\r\n                this.pos += s.length;\r\n            } else {\r\n                throw \"Token mismatch, expected \" + s + \", found \"\r\n                        + this.input.substring(this.pos);\r\n            };\r\n            this.skipWhitespace(canCommentOut);\r\n        };\r\n\r\n        this.tryMatch = function(s, canCommentOut) {\r\n            if (canCommentOut == undefined || canCommentOut == null)\r\n                canCommentOut = true;\r\n            this.skipWhitespace(canCommentOut);\r\n            if (this.input.substring(this.pos, this.pos + s.length) == s) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            };\r\n            this.skipWhitespace(canCommentOut);\r\n        };\r\n\r\n        /* when search for a match all text can be ignored, not just white space */\r\n        this.matchAt = function() {\r\n            while (this.input.length > this.pos && this.input[this.pos] != '@') {\r\n                this.pos++;\r\n            };\r\n\r\n            if (this.input[this.pos] == '@') {\r\n                return true;\r\n            };\r\n            return false;\r\n        };\r\n\r\n        this.skipWhitespace = function(canCommentOut) {\r\n            while (this.isWhitespace(this.input[this.pos])) {\r\n                this.pos++;\r\n            };\r\n            if (this.input[this.pos] == \"%\" && canCommentOut == true) {\r\n                while (this.input[this.pos] != \"\\n\") {\r\n                    this.pos++;\r\n                };\r\n                this.skipWhitespace(canCommentOut);\r\n            };\r\n        };\r\n\r\n        this.value_braces = function() {\r\n            var bracecount = 0;\r\n            this.match(\"{\", false);\r\n            var start = this.pos;\r\n            var escaped = false;\r\n            while (true) {\r\n                if (!escaped) {\r\n                    if (this.input[this.pos] == '}') {\r\n                        if (bracecount > 0) {\r\n                            bracecount--;\r\n                        } else {\r\n                            var end = this.pos;\r\n                            this.match(\"}\", false);\r\n                            return this.input.substring(start, end);\r\n                        };\r\n                    } else if (this.input[this.pos] == '{') {\r\n                        bracecount++;\r\n                    } else if (this.pos >= this.input.length - 1) {\r\n                        throw \"Unterminated value\";\r\n                    };\r\n                };\r\n                if (this.input[this.pos] == '\\\\' && escaped == false)\r\n                    escaped = true;\r\n                else\r\n                    escaped = false;\r\n                this.pos++;\r\n            };\r\n        };\r\n\r\n        this.value_comment = function() {\r\n            var str = '';\r\n            var brcktCnt = 0;\r\n            while (!(this.tryMatch(\"}\", false) && brcktCnt == 0)) {\r\n                str = str + this.input[this.pos];\r\n                if (this.input[this.pos] == '{')\r\n                    brcktCnt++;\r\n                if (this.input[this.pos] == '}')\r\n                    brcktCnt--;\r\n                if (this.pos >= this.input.length - 1) {\r\n                    throw \"Unterminated value:\" + this.input.substring(start);\r\n                };\r\n                this.pos++;\r\n            };\r\n            return str;\r\n        };\r\n\r\n        this.value_quotes = function() {\r\n            this.match('\"', false);\r\n            var start = this.pos;\r\n            var escaped = false;\r\n            while (true) {\r\n                if (!escaped) {\r\n                    if (this.input[this.pos] == '\"') {\r\n                        var end = this.pos;\r\n                        this.match('\"', false);\r\n                        return this.input.substring(start, end);\r\n                    } else if (this.pos >= this.input.length - 1) {\r\n                        throw \"Unterminated value:\" + this.input.substring(start);\r\n                    };\r\n                }\r\n                if (this.input[this.pos] == '\\\\' && escaped == false)\r\n                    escaped = true;\r\n                else\r\n                    escaped = false;\r\n                this.pos++;\r\n            };\r\n        };\r\n\r\n        this.single_value = function() {\r\n            var start = this.pos;\r\n            if (this.tryMatch(\"{\")) {\r\n                return this.value_braces();\r\n            } else if (this.tryMatch('\"')) {\r\n                return this.value_quotes();\r\n            } else {\r\n                var k = this.key();\r\n                if (k.match(\"^[0-9]+$\"))\r\n                    return k;\r\n                else if (this.months.indexOf(k.toLowerCase()) >= 0)\r\n                    return k.toLowerCase();\r\n                else\r\n                    throw \"Value expected:\" + this.input.substring(start) + ' for key: ' + k;\r\n            \r\n            };\r\n        };\r\n\r\n        this.value = function() {\r\n            var values = [];\r\n            values.push(this.single_value());\r\n            while (this.tryMatch(\"#\")) {\r\n                this.match(\"#\");\r\n                values.push(this.single_value());\r\n            };\r\n            return values.join(\"\");\r\n        };\r\n\r\n        this.key = function(optional) {\r\n            var start = this.pos;\r\n            while (true) {\r\n                if (this.pos >= this.input.length) {\r\n                    throw \"Runaway key\";\r\n                };\r\n                                // а-яА-Я is Cyrillic\r\n                //console.log(this.input[this.pos]);\r\n                if (this.notKey.indexOf(this.input[this.pos]) >= 0) {\r\n                    if (optional && this.input[this.pos] != ',') {\r\n                        this.pos = start;\r\n                        return null;\r\n                    };\r\n                    return this.input.substring(start, this.pos);\r\n                } else {\r\n                    this.pos++;\r\n                    \r\n                };\r\n            };\r\n        };\r\n\r\n        this.key_equals_value = function() {\r\n            var key = this.key();\r\n            if (this.tryMatch(\"=\")) {\r\n                this.match(\"=\");\r\n                var val = this.value();\r\n                return [ key, val ];\r\n            } else {\r\n                throw \"... = value expected, equals sign missing:\"\r\n                        + this.input.substring(this.pos);\r\n            };\r\n        };\r\n\r\n        this.key_value_list = function() {\r\n            var kv = this.key_equals_value();\r\n            this.currentEntry['entryTags'] = {};\r\n            this.currentEntry['entryTags'][kv[0]] = kv[1];\r\n            while (this.tryMatch(\",\")) {\r\n                this.match(\",\");\r\n                // fixes problems with commas at the end of a list\r\n                if (this.tryMatch(\"}\")) {\r\n                    break;\r\n                }\r\n                ;\r\n                kv = this.key_equals_value();\r\n                this.currentEntry['entryTags'][kv[0]] = kv[1];\r\n            };\r\n        };\r\n\r\n        this.entry_body = function(d) {\r\n            this.currentEntry = {};\r\n            this.currentEntry['citationKey'] = this.key(true);\r\n            this.currentEntry['entryType'] = d.substring(1);\r\n            if (this.currentEntry['citationKey'] != null) {            \r\n                this.match(\",\");\r\n            }\r\n            this.key_value_list();\r\n            this.entries.push(this.currentEntry);\r\n        };\r\n\r\n        this.directive = function() {\r\n            this.match(\"@\");\r\n            return \"@\" + this.key();\r\n        };\r\n\r\n        this.preamble = function() {\r\n            this.currentEntry = {};\r\n            this.currentEntry['entryType'] = 'PREAMBLE';\r\n            this.currentEntry['entry'] = this.value_comment();\r\n            this.entries.push(this.currentEntry);\r\n        };\r\n\r\n        this.comment = function() {\r\n            this.currentEntry = {};\r\n            this.currentEntry['entryType'] = 'COMMENT';\r\n            this.currentEntry['entry'] = this.value_comment();\r\n            this.entries.push(this.currentEntry);\r\n        };\r\n\r\n        this.entry = function(d) {\r\n            this.entry_body(d);\r\n        };\r\n\r\n        this.alernativeCitationKey = function () {\r\n            this.entries.forEach(function (entry) {\r\n                if (!entry.citationKey && entry.entryTags) {\r\n                    entry.citationKey = '';\r\n                    if (entry.entryTags.author) {\r\n                        entry.citationKey += entry.entryTags.author.split(',')[0] += ', ';\r\n                    }\r\n                    entry.citationKey += entry.entryTags.year;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.bibtex = function() {\r\n            while (this.matchAt()) {\r\n                var d = this.directive();\r\n                this.match(\"{\");\r\n                if (d == \"@STRING\") {\r\n                    this.string();\r\n                } else if (d == \"@PREAMBLE\") {\r\n                    this.preamble();\r\n                } else if (d == \"@COMMENT\") {\r\n                    this.comment();\r\n                } else {\r\n                    this.entry(d);\r\n                }\r\n                this.match(\"}\");\r\n            };\r\n\r\n            this.alernativeCitationKey();\r\n        };\r\n    };\r\n    \r\n    exports.toJSON = function(bibtex) {\r\n        var b = new BibtexParser();\r\n        b.setInput(bibtex);\r\n        b.bibtex();\r\n        return b.entries;\r\n    };\r\n\r\n    /* added during hackathon don't hate on me */\r\n    exports.toBibtex = function(json) {\r\n        var out = '';\r\n        for ( var i in json) {\r\n            out += \"@\" + json[i].entryType;\r\n            out += '{';\r\n            if (json[i].citationKey)\r\n                out += json[i].citationKey + ', ';\r\n            if (json[i].entry)\r\n                out += json[i].entry ;\r\n            if (json[i].entryTags) {\r\n                var tags = '';\r\n                for (var jdx in json[i].entryTags) {\r\n                    if (tags.length != 0)\r\n                        tags += ', ';\r\n                    tags += jdx + '= {' + json[i].entryTags[jdx] + '}';\r\n                }\r\n                out += tags;\r\n            }\r\n            out += '}\\n\\n';\r\n        }\r\n        return out;\r\n        \r\n    };\r\n\r\n})(typeof exports === 'undefined' ? this['bibtexParse'] = {} : exports);\r\n\r\n/* end bibtexParse */\r\n","type":"application/javascript","title":"$:/plugins/tiddlywiki/bibtex/bibtexParse.js","module-type":"library"},"$:/plugins/tiddlywiki/bibtex/license":{"text":"\r\nThe MIT License (MIT)\r\nCopyright (c) 2013 ORCID, Inc.\r\n\r\nCopyright (c) 2010 Henrik Muehe\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","type":"text/plain","title":"$:/plugins/tiddlywiki/bibtex/license"}}}