{"title":"$:/plugins/tiddlywiki/external-attachments","description":"External attachment support for TiddlyDesktop et al.","author":"Jeremy Ruston","core-version":">=5.0.0","list":"readme settings","version":"5.1.18-prerelease","plugin-type":"plugin","dependents":"","type":"application/json","tiddlers":{"$:/config/ExternalAttachments/Enable":{"title":"$:/config/ExternalAttachments/Enable","text":"yes"},"$:/config/ExternalAttachments/UseAbsoluteForDescendents":{"title":"$:/config/ExternalAttachments/UseAbsoluteForDescendents","text":"no"},"$:/config/ExternalAttachments/UseAbsoluteForNonDescendents":{"title":"$:/config/ExternalAttachments/UseAbsoluteForNonDescendents","text":"no"},"$:/plugins/tiddlywiki/external-attachments/readme":{"title":"$:/plugins/tiddlywiki/external-attachments/readme","text":"! Introduction\n\nThis plugin provides support for importing tiddlers as external attachments. That means that instead of importing binary files as self-contained tiddlers, they are imported as \"skinny\" tiddlers that reference the original file via the ''_canonical_uri'' field. This reduces the size of the wiki and thus improves performance. However, it does mean that the wiki is no longer fully self-contained.\n\n! Compatibility\n\nThis plugin only works when using TiddlyWiki with platforms such as TiddlyDesktop that support the ''path'' attribute for imported/dragged files.\n\n"},"$:/plugins/tiddlywiki/external-attachments/settings":{"title":"$:/plugins/tiddlywiki/external-attachments/settings","text":"When used on platforms that provide the necessary support (such as ~TiddlyDesktop), you can optionally import binary files as external tiddlers that reference the original file via the ''_canonical_uri'' field.\n\nBy default, a relative path is used to reference the file. Optionally, you can specify that an absolute path is used instead. You can do this separately for \"descendent\" attachments -- files that are contained within the directory containing the wiki -- vs. \"non-descendent\" attachments.\n\n<$checkbox tiddler=\"$:/config/ExternalAttachments/Enable\" field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> <$link to=\"$:/config/ExternalAttachments/Enable\">Enable importing binary files as external attachments</$link> </$checkbox>\n\n<$checkbox tiddler=\"$:/config/ExternalAttachments/UseAbsoluteForDescendents\" field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> <$link to=\"$:/config/ExternalAttachments/UseAbsoluteForDescendents\">Use absolute paths for descendent attachments</$link> </$checkbox>\n\n<$checkbox tiddler=\"$:/config/ExternalAttachments/UseAbsoluteForNonDescendents\" field=\"text\" checked=\"yes\" unchecked=\"no\" default=\"no\"> <$link to=\"$:/config/ExternalAttachments/UseAbsoluteForNonDescendents\">Use absolute paths for non-descendent attachments</$link> </$checkbox>\r\n"},"$:/plugins/tiddlywiki/external-attachments/startup.js":{"title":"$:/plugins/tiddlywiki/external-attachments/startup.js","text":"/*\\\r\ntitle: $:/plugins/tiddlywiki/external-attachments/startup.js\r\ntype: application/javascript\r\nmodule-type: startup\r\n\r\nStartup initialisation\r\n\r\n\\*/\r\n(function(){\r\n\r\n/*jslint node: true, browser: true */\r\n/*global $tw: false */\r\n\"use strict\";\r\n\r\nvar ENABLE_EXTERNAL_ATTACHMENTS_TITLE = \"$:/config/ExternalAttachments/Enable\",\r\n\tUSE_ABSOLUTE_FOR_DESCENDENTS_TITLE = \"$:/config/ExternalAttachments/UseAbsoluteForDescendents\",\r\n\tUSE_ABSOLUTE_FOR_NON_DESCENDENTS_TITLE = \"$:/config/ExternalAttachments/UseAbsoluteForNonDescendents\";\r\n\r\n// Export name and synchronous status\r\nexports.name = \"external-attachments\";\r\nexports.platforms = [\"browser\"];\r\nexports.after = [\"startup\"];\r\nexports.synchronous = true;\r\n\r\nexports.startup = function() {\r\n\ttest_makePathRelative();\r\n\t$tw.hooks.addHook(\"th-importing-file\",function(info) {\r\n\t\tif(document.location.protocol === \"file:\" && info.isBinary && info.file.path && $tw.wiki.getTiddlerText(ENABLE_EXTERNAL_ATTACHMENTS_TITLE,\"\") === \"yes\") {\r\n\t\t\tvar locationPathParts = document.location.pathname.split(\"/\").slice(0,-1),\r\n\t\t\t\tfilePathParts = info.file.path.split(/[\\\\\\/]/mg).map(encodeURIComponent);\r\n\t\t\tinfo.callback([\r\n\t\t\t\t{\r\n\t\t\t\t\ttitle: info.file.name,\r\n\t\t\t\t\ttype: info.type,\r\n\t\t\t\t\t\"_canonical_uri\": makePathRelative(\r\n\t\t\t\t\t\tfilePathParts.join(\"/\"),\r\n\t\t\t\t\t\tlocationPathParts.join(\"/\"),\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tuseAbsoluteForNonDescendents: $tw.wiki.getTiddlerText(USE_ABSOLUTE_FOR_NON_DESCENDENTS_TITLE,\"\") === \"yes\",\r\n\t\t\t\t\t\t\tuseAbsoluteForDescendents: $tw.wiki.getTiddlerText(USE_ABSOLUTE_FOR_DESCENDENTS_TITLE,\"\") === \"yes\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t]);\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/*\r\nGiven a source absolute path and a root absolute path, returns the source path expressed as a relative path from the root path.\r\n*/\r\nfunction makePathRelative(sourcepath,rootpath,options) {\r\n\toptions = options || {};\r\n\tvar sourceParts = sourcepath.split(\"/\"),\r\n\t\trootParts = rootpath.split(\"/\"),\r\n\t\toutputParts = [];\r\n\t// Check that each path started with a slash\r\n\tif(sourceParts[0] || rootParts[0]) {\r\n\t\tthrow \"makePathRelative: both paths must be absolute\";\r\n\t}\r\n\t// Identify any common portion from the start\r\n\tvar c = 1,\r\n\t\tp;\r\n\twhile(c < sourceParts.length && c < rootParts.length && sourceParts[c] === rootParts[c]) {\r\n\t\tc += 1;\r\n\t}\r\n\t// Return \".\" if there's nothing left\r\n\tif(c === sourceParts.length && c === rootParts.length ) {\r\n\t\treturn \".\"\r\n\t}\r\n\t// Use an absolute path if required\r\n\tif((options.useAbsoluteForNonDescendents && c < rootParts.length) || (options.useAbsoluteForDescendents && c === rootParts.length)) {\r\n\t\treturn sourcepath;\r\n\t}\r\n\t// Move up a directory for each directory left in the root\r\n\tfor(p = c; p < rootParts.length; p++) {\r\n\t\toutputParts.push(\"..\");\r\n\t}\t\t\r\n\t// Add on the remaining parts of the source path\r\n\tfor(p = c; p < sourceParts.length; p++) {\r\n\t\toutputParts.push(sourceParts[p]);\r\n\t}\r\n\treturn outputParts.join(\"/\");\r\n}\r\n\r\nfunction test_makePathRelative() {\r\n\tvar msg = \"makePathRelative test failed\";\r\n\tif(makePathRelative(\"/Users/me/something\",\"/Users/you/something\") !== \"../../me/something\") {\r\n\t\tthrow msg;\r\n\t}\r\n\tif(makePathRelative(\"/Users/me/something\",\"/Users/you/something\",{useAbsoluteForNonDescendents: true}) !== \"/Users/me/something\") {\r\n\t\tthrow msg;\r\n\t}\r\n\tif(makePathRelative(\"/Users/me/something/else\",\"/Users/me/something\") !== \"else\") {\r\n\t\tthrow msg;\r\n\t}\r\n\tif(makePathRelative(\"/Users/me/something\",\"/Users/me/something/new\") !== \"..\") {\r\n\t\tthrow msg;\r\n\t}\r\n\tif(makePathRelative(\"/Users/me/something\",\"/Users/me/something/new\",{useAbsoluteForNonDescendents: true}) !== \"/Users/me/something\") {\r\n\t\tthrow msg;\r\n\t}\r\n\tif(makePathRelative(\"/Users/me/something\",\"/Users/me/something\") !== \".\") {\r\n\t\tthrow msg;\r\n\t}\r\n}\r\n\r\n})();\r\n","type":"application/javascript","module-type":"startup"}}}